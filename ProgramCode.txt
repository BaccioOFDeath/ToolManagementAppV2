Code Dump - 2025-06-16 19:46:13
==============================
// File: ToolManagementAppV2.Tests\Services\CustomerServiceTests.cs
// Lines: 58, Size: 1806 bytes
using System.IO;
using System.Linq;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Interfaces;
using Xunit;

namespace ToolManagementAppV2.Tests.Services
{
    public class CustomerServiceTests
    {
        [Fact]
        public void SearchCustomers_WithNull_ReturnsAllCustomers()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var dbService = new DatabaseService(dbPath);
                ICustomerService service = new CustomerService(dbService);

                service.AddCustomer(new Customer { Company = "Acme", Contact = "J" });

                var results = service.SearchCustomers(null);
                Assert.Single(results);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }

        [Fact]
        public void GetCustomerByID_ReturnsCustomer()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var dbService = new DatabaseService(dbPath);
                ICustomerService service = new CustomerService(dbService);

                service.AddCustomer(new Customer { Company = "Acme", Contact = "John" });
                var cust = service.GetAllCustomers().First();

                var fetched = service.GetCustomerByID(cust.CustomerID);
                Assert.NotNull(fetched);
                Assert.Equal(cust.CustomerID, fetched.CustomerID);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }
    }
}


// File: ToolManagementAppV2.Tests\Services\InterfaceReferenceTests.cs
// Lines: 42, Size: 1381 bytes
using System.IO;
using ToolManagementAppV2.Interfaces;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Tools;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Services.Rentals;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Services.Settings;
using Xunit;

namespace ToolManagementAppV2.Tests.Services
{
    public class InterfaceReferenceTests
    {
        [Fact]
        public void Services_CanBeReferenced_ByInterface()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolSvc = new ToolService(db);
                ICustomerService custSvc = new CustomerService(db);
                IRentalService rentalSvc = new RentalService(db);
                IUserService userSvc = new UserService(db);
                ISettingsService settingsSvc = new SettingsService(db);

                Assert.NotNull(toolSvc);
                Assert.NotNull(custSvc);
                Assert.NotNull(rentalSvc);
                Assert.NotNull(userSvc);
                Assert.NotNull(settingsSvc);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }
    }
}


// File: ToolManagementAppV2.Tests\Services\RentalServiceTests.cs
// Lines: 198, Size: 7579 bytes
using System;
using System.IO;
using System.Linq;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Services.Rentals;
using ToolManagementAppV2.Services.Tools;
using ToolManagementAppV2.Interfaces;
using Xunit;

namespace ToolManagementAppV2.Tests.Services
{
    public class RentalServiceTests
    {
        [Fact]
        public void GetRentalHistoryForTool_ReturnsHistory()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolService = new ToolService(db);
                ICustomerService customerService = new CustomerService(db);
                IRentalService rentalService = new RentalService(db);

                var tool = new Tool { ToolNumber = "T1", NameDescription = "Hammer", QuantityOnHand = 5 };
                toolService.AddTool(tool);
                var addedTool = toolService.GetAllTools().First();

                var cust = new Customer { Company = "Acme" };
                customerService.AddCustomer(cust);
                var addedCust = customerService.GetAllCustomers().First();

                rentalService.RentTool(addedTool.ToolID, addedCust.CustomerID, DateTime.Today, DateTime.Today.AddDays(1));
                rentalService.RentTool(addedTool.ToolID, addedCust.CustomerID, DateTime.Today.AddDays(2), DateTime.Today.AddDays(3));

                var history = rentalService.GetRentalHistoryForTool(addedTool.ToolID);
                Assert.Equal(2, history.Count);
                Assert.True(history[0].RentalDate > history[1].RentalDate);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }

        [Fact]
        public void RentTool_NoAvailability_DoesNotThrow()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolService = new ToolService(db);
                ICustomerService customerService = new CustomerService(db);
                IRentalService rentalService = new RentalService(db);

                var tool = new Tool { ToolNumber = "T1", NameDescription = "Hammer", QuantityOnHand = 0 };
                toolService.AddTool(tool);
                var addedTool = toolService.GetAllTools().First();

                customerService.AddCustomer(new Customer { Company = "Acme" });
                var cust = customerService.GetAllCustomers().First();

                var ex = Record.Exception(() => rentalService.RentTool(addedTool.ToolID, cust.CustomerID, DateTime.Today, DateTime.Today.AddDays(1)));
                Assert.Null(ex);
                Assert.Empty(rentalService.GetAllRentals());
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }

        [Fact]
        public void RentToolWithTransaction_NoAvailability_DoesNotThrow()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolService = new ToolService(db);
                ICustomerService customerService = new CustomerService(db);
                IRentalService rentalService = new RentalService(db);

                var tool = new Tool { ToolNumber = "T2", NameDescription = "Wrench", QuantityOnHand = 0 };
                toolService.AddTool(tool);
                var addedTool = toolService.GetAllTools().First();

                customerService.AddCustomer(new Customer { Company = "Beta" });
                var cust = customerService.GetAllCustomers().First();

                var ex = Record.Exception(() => rentalService.RentToolWithTransaction(addedTool.ToolID, cust.CustomerID, DateTime.Today, DateTime.Today.AddDays(1)));
                Assert.Null(ex);
                Assert.Empty(rentalService.GetAllRentals());
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }

        [Fact]
        public void ReturnTool_InvalidRentalID_DoesNotThrow()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IRentalService rentalService = new RentalService(db);

                var ex = Record.Exception(() => rentalService.ReturnTool(1, DateTime.Today));
                Assert.Null(ex);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }

        [Fact]
        public void ReturnToolWithTransaction_InvalidRentalID_DoesNotThrow()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IRentalService rentalService = new RentalService(db);

                var ex = Record.Exception(() => rentalService.ReturnToolWithTransaction(1, DateTime.Today));
                Assert.Null(ex);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }

        [Fact]
        public void ExtendRental_InvalidRentalID_Throws()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                var rentalService = new RentalService(db);

                Assert.Throws<InvalidOperationException>(() =>
                    rentalService.ExtendRental(1, DateTime.Today.AddDays(1)));
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }

        [Fact]
        public void ExtendRental_ReturnedRental_Throws()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                var toolService = new ToolService(db);
                var customerService = new CustomerService(db);
                var rentalService = new RentalService(db);

                var tool = new Tool { ToolNumber = "T1", NameDescription = "Hammer", QuantityOnHand = 1 };
                toolService.AddTool(tool);
                var addedTool = toolService.GetAllTools().First();

                customerService.AddCustomer(new Customer { Company = "Acme" });
                var cust = customerService.GetAllCustomers().First();

                rentalService.RentTool(addedTool.ToolID, cust.CustomerID, DateTime.Today, DateTime.Today.AddDays(1));
                var rental = rentalService.GetAllRentals().First();

                rentalService.ReturnTool(rental.RentalID, DateTime.Today);

                Assert.Throws<InvalidOperationException>(() =>
                    rentalService.ExtendRental(rental.RentalID, DateTime.Today.AddDays(2)));
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }
    }
}


// File: ToolManagementAppV2.Tests\Services\SettingsServiceTests.cs
// Lines: 40, Size: 1225 bytes
using System.Collections.Generic;
using System.Data.SQLite;
using System.IO;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Interfaces;
using Xunit;

namespace ToolManagementAppV2.Tests.Services
{
    public class SettingsServiceTests
    {
        [Fact]
        public void UpdateSettings_DoesNotThrowOnFailure()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var dbService = new DatabaseService(dbPath);
                ISettingsService service = new SettingsService(dbService);

                using (var conn = new SQLiteConnection(dbService.ConnectionString))
                {
                    conn.Open();
                    using var cmd = new SQLiteCommand("DROP TABLE Settings", conn);
                    cmd.ExecuteNonQuery();
                }

                var settings = new Dictionary<string, string> { ["Key1"] = "Value1" };
                service.UpdateSettings(settings);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }
    }
}


// File: ToolManagementAppV2.Tests\Services\ToolServiceTests.cs
// Lines: 44, Size: 1251 bytes
using System;
using System.IO;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Tools;
using ToolManagementAppV2.Interfaces;
using Xunit;

namespace ToolManagementAppV2.Tests.Services
{
    public class ToolServiceTests
    {
        [Fact]
        public void SearchTools_WithNull_ReturnsAllTools()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var dbService = new DatabaseService(dbPath);
                IToolService service = new ToolService(dbService);

                service.AddTool(new Tool
                {
                    ToolNumber = "T1",
                    NameDescription = "Test Tool",
                    Location = "Loc",
                    Brand = "Brand",
                    PartNumber = "PN",
                    QuantityOnHand = 1,
                    RentedQuantity = 0
                });

                var results = service.SearchTools(null);
                Assert.Single(results);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }
    }
}


// File: ToolManagementAppV2.Tests\Services\UserAuthenticationTests.cs
// Lines: 38, Size: 1159 bytes
using System.IO;
using System.Linq;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Utilities.Helpers;
using ToolManagementAppV2.Interfaces;
using Xunit;

public class UserAuthenticationTests
{
    [Fact]
    public void AuthenticateUser_HashesPassword()
    {
        var dbPath = Path.GetTempFileName();
        try
        {
            var dbService = new DatabaseService(dbPath);
            IUserService userService = new UserService(dbService);

            var user = new User { UserName = "test", Password = "secret", IsAdmin = false };
            userService.AddUser(user);
            var added = userService.GetAllUsers().First();

            Assert.NotEqual("secret", added.Password);
            Assert.Equal(SecurityHelper.ComputeSha256Hash("secret"), added.Password);

            var auth = userService.AuthenticateUser("test", "secret");
            Assert.NotNull(auth);
        }
        finally
        {
            if (File.Exists(dbPath))
                File.Delete(dbPath);
        }
    }
}


// File: ToolManagementAppV2.Tests\Services\UserDeletionTests.cs
// Lines: 36, Size: 1070 bytes
using System.IO;
using System.Linq;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Interfaces;
using Xunit;

public class UserDeletionTests
{
    [Fact]
    public void Deleting_Last_Admin_Is_Blocked()
    {
        var dbPath = Path.GetTempFileName();
        try
        {
            var dbService = new DatabaseService(dbPath);
            IUserService userService = new UserService(dbService);

            var admin = new User { UserName = "admin", Password = "pw", IsAdmin = true };
            userService.AddUser(admin);

            var added = userService.GetAllUsers().First();
            var result = userService.TryDeleteUser(added.UserID);

            Assert.False(result, "Deletion should be blocked when user is the last admin.");
            Assert.Single(userService.GetAllUsers());
        }
        finally
        {
            if (File.Exists(dbPath))
                File.Delete(dbPath);
        }
    }
}


// File: ToolManagementAppV2.Tests\Tests\BooleanToAdminConverterTests.cs
// Lines: 67, Size: 2392 bytes
using System.Globalization;
using System.Windows.Data;
using ToolManagementAppV2.Utilities.Converters;
using Xunit;

namespace ToolManagementAppV2.Tests
{
    public class BooleanToAdminConverterTests
    {
        [Fact]
        public void Convert_True_ReturnsAdmin()
        {
            var converter = new BooleanToAdminConverter();
            var result = converter.Convert(true, typeof(string), null, CultureInfo.InvariantCulture);
            Assert.Equal("Admin", result);
        }

        [Fact]
        public void Convert_False_ReturnsEmptyString()
        {
            var converter = new BooleanToAdminConverter();
            var result = converter.Convert(false, typeof(string), null, CultureInfo.InvariantCulture);
            Assert.Equal(string.Empty, result);
        }

        [Fact]
        public void Convert_InvalidInput_ReturnsBindingDoNothing()
        {
            var converter = new BooleanToAdminConverter();
            var result = converter.Convert(5, typeof(string), null, CultureInfo.InvariantCulture);
            Assert.Equal(Binding.DoNothing, result);
        }

        [Fact]
        public void ConvertBack_AdminString_ReturnsTrue()
        {
            var converter = new BooleanToAdminConverter();
            var result = converter.ConvertBack("Admin", typeof(bool), null, CultureInfo.InvariantCulture);
            Assert.True((bool)result);
        }

        [Fact]
        public void ConvertBack_True_ReturnsTrue()
        {
            var converter = new BooleanToAdminConverter();
            var result = converter.ConvertBack(true, typeof(bool), null, CultureInfo.InvariantCulture);
            Assert.True((bool)result);
        }

        [Fact]
        public void ConvertBack_OtherString_ReturnsFalse()
        {
            var converter = new BooleanToAdminConverter();
            var result = converter.ConvertBack("User", typeof(bool), null, CultureInfo.InvariantCulture);
            Assert.False((bool)result);
        }

        [Fact]
        public void ConvertBack_InvalidInput_ReturnsBindingDoNothing()
        {
            var converter = new BooleanToAdminConverter();
            var result = converter.ConvertBack(42, typeof(bool), null, CultureInfo.InvariantCulture);
            Assert.Equal(Binding.DoNothing, result);
        }
    }
}


// File: ToolManagementAppV2.Tests\Tests\CheckOutStatusConverterTests.cs
// Lines: 35, Size: 1169 bytes
using System.Globalization;
using System.Windows.Data;
using ToolManagementAppV2.Utilities.Converters;
using Xunit;

namespace ToolManagementAppV2.Tests
{
    public class CheckOutStatusConverterTests
    {
        [Fact]
        public void ConvertBack_CheckIn_ReturnsTrue()
        {
            var converter = new CheckOutStatusConverter();
            var result = converter.ConvertBack("Check In", typeof(bool), null, CultureInfo.InvariantCulture);
            Assert.True((bool)result);
        }

        [Fact]
        public void ConvertBack_CheckOut_ReturnsFalse()
        {
            var converter = new CheckOutStatusConverter();
            var result = converter.ConvertBack("Check Out", typeof(bool), null, CultureInfo.InvariantCulture);
            Assert.False((bool)result);
        }

        [Fact]
        public void ConvertBack_InvalidInput_ReturnsBindingDoNothing()
        {
            var converter = new CheckOutStatusConverter();
            var result = converter.ConvertBack(42, typeof(bool), null, CultureInfo.InvariantCulture);
            Assert.Equal(Binding.DoNothing, result);
        }
    }
}


// File: ToolManagementAppV2.Tests\Tests\ConsoleLoggingTests.cs
// Lines: 236, Size: 8849 bytes
using System;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.Serialization;
using System.Windows.Controls;
using ToolManagementAppV2;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Services.Tools;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Services.Rentals;
using ToolManagementAppV2.Interfaces;
using ToolManagementAppV2.Utilities.Converters;
using ToolManagementAppV2.Utilities.Helpers;
using ToolManagementAppV2.Models.Domain;
using Xunit;
using System.Linq;

namespace ToolManagementAppV2.Tests
{
    public class ConsoleLoggingTests
    {
        [Fact]
        public void PathHelper_InvalidPath_LogsException()
        {
            var sw = new StringWriter();
            var original = Console.Out;
            Console.SetOut(sw);
            try
            {
                var result = PathHelper.GetAbsolutePath("invalid|path");
                Assert.Null(result);
            }
            finally
            {
                Console.SetOut(original);
            }
            Assert.NotEqual(string.Empty, sw.ToString());
        }

        [Fact]
        public void NullToDefaultImageConverter_InvalidResource_LogsException()
        {
            var converter = new NullToDefaultImageConverter();
            var method = typeof(NullToDefaultImageConverter).GetMethod("LoadFromResource", BindingFlags.NonPublic | BindingFlags.Instance);
            var sw = new StringWriter();
            var original = Console.Out;
            Console.SetOut(sw);
            try
            {
                method.Invoke(converter, new object[] { "NoSuchFile.png" });
            }
            finally
            {
                Console.SetOut(original);
            }
            Assert.NotEqual(string.Empty, sw.ToString());
        }

        [Fact]
        public void ShowError_LogsException()
        {
            var window = (MainWindow)FormatterServices.GetUninitializedObject(typeof(MainWindow));
            var method = typeof(MainWindow).GetMethod("ShowError", BindingFlags.NonPublic | BindingFlags.Instance);
            var sw = new StringWriter();
            var original = Console.Out;
            Console.SetOut(sw);
            try
            {
                method.Invoke(window, new object[] { "Error", new Exception("fail") });
            }
            finally
            {
                Console.SetOut(original);
            }
            Assert.Contains("fail", sw.ToString());
        }

        [Fact]
        public void RefreshUserList_InvalidPhoto_LogsException()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IUserService userService = new UserService(db);
                userService.AddUser(new User { UserName = "u", Password = "p", UserPhotoPath = "pack://application:,,,/Resources/NoFile.png" });
                var window = (MainWindow)FormatterServices.GetUninitializedObject(typeof(MainWindow));
                var list = new ListView();
                typeof(MainWindow).GetField("_userService", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(window, userService);
                typeof(MainWindow).GetField("UserList", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(window, list);

                var sw = new StringWriter();
                var original = Console.Out;
                Console.SetOut(sw);
                try
                {
                    typeof(MainWindow).GetMethod("RefreshUserList", BindingFlags.NonPublic | BindingFlags.Instance).Invoke(window, null);
                }
                finally
                {
                    Console.SetOut(original);
                }
                Assert.NotEqual(string.Empty, sw.ToString());
            }
            finally
            {
                if (File.Exists(dbPath)) File.Delete(dbPath);
            }
        }

        [Fact]
        public void BackupDatabase_LogsException()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                var sw = new StringWriter();
                var original = Console.Out;
                Console.SetOut(sw);
                Assert.Throws<IOException>(() => db.BackupDatabase("invalid|path.db"));
                Console.SetOut(original);
                Assert.NotEqual(string.Empty, sw.ToString());
            }
            finally
            {
                if (File.Exists(dbPath)) File.Delete(dbPath);
            }
        }

        [Fact]
        public void RentTool_LogsException()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolService = new ToolService(db);
                ICustomerService customerService = new CustomerService(db);
                IRentalService rentalService = new RentalService(db);

                toolService.AddTool(new Tool { ToolNumber = "T1", NameDescription = "Hammer", QuantityOnHand = 0 });
                var tool = toolService.GetAllTools().First();
                customerService.AddCustomer(new Customer { Company = "Acme" });
                var cust = customerService.GetAllCustomers().First();

                var sw = new StringWriter();
                var original = Console.Out;
                Console.SetOut(sw);
                rentalService.RentTool(tool.ToolID, cust.CustomerID, DateTime.Today, DateTime.Today.AddDays(1));
                Console.SetOut(original);
                Assert.NotEqual(string.Empty, sw.ToString());
            }
            finally
            {
                if (File.Exists(dbPath)) File.Delete(dbPath);
            }
        }

        [Fact]
        public void RentToolWithTransaction_LogsException()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolService = new ToolService(db);
                ICustomerService customerService = new CustomerService(db);
                IRentalService rentalService = new RentalService(db);

                toolService.AddTool(new Tool { ToolNumber = "T2", NameDescription = "Wrench", QuantityOnHand = 0 });
                var tool = toolService.GetAllTools().First();
                customerService.AddCustomer(new Customer { Company = "Beta" });
                var cust = customerService.GetAllCustomers().First();

                var sw = new StringWriter();
                var original = Console.Out;
                Console.SetOut(sw);
                rentalService.RentToolWithTransaction(tool.ToolID, cust.CustomerID, DateTime.Today, DateTime.Today.AddDays(1));
                Console.SetOut(original);
                Assert.NotEqual(string.Empty, sw.ToString());
            }
            finally
            {
                if (File.Exists(dbPath)) File.Delete(dbPath);
            }
        }

        [Fact]
        public void ReturnTool_LogsException()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IRentalService rentalService = new RentalService(db);

                var sw = new StringWriter();
                var original = Console.Out;
                Console.SetOut(sw);
                rentalService.ReturnTool(1, DateTime.Today);
                Console.SetOut(original);
                Assert.NotEqual(string.Empty, sw.ToString());
            }
            finally
            {
                if (File.Exists(dbPath)) File.Delete(dbPath);
            }
        }

        [Fact]
        public void ReturnToolWithTransaction_LogsException()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IRentalService rentalService = new RentalService(db);

                var sw = new StringWriter();
                var original = Console.Out;
                Console.SetOut(sw);
                rentalService.ReturnToolWithTransaction(1, DateTime.Today);
                Console.SetOut(original);
                Assert.NotEqual(string.Empty, sw.ToString());
            }
            finally
            {
                if (File.Exists(dbPath)) File.Delete(dbPath);
            }
        }
    }
}


// File: ToolManagementAppV2.Tests\Tests\CsvHelperUtilTests.cs
// Lines: 48, Size: 2027 bytes
using Xunit;
using System.Collections.Generic;
using ToolManagementAppV2.Utilities.IO;

namespace ToolManagementAppV2.Tests
{
    public class CsvHelperUtilTests
    {
        [Fact]
        public void GetMapped_IgnoresHeaderCase()
        {
            var headers = new[] { "toolnumber", "location" };
            var row = new[] { "123", "Loc" };
            var map = new Dictionary<string, string> { ["ToolNumber"] = "ToolNumber", ["Location"] = "LOCATION" };

            var number = typeof(CsvHelperUtil)
                .GetMethod("GetMapped", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static)!
                .Invoke(null, new object[] { row, headers, map, "ToolNumber" });

            var location = typeof(CsvHelperUtil)
                .GetMethod("GetMapped", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static)!
                .Invoke(null, new object[] { row, headers, map, "Location" });

            Assert.Equal("123", number);
            Assert.Equal("Loc", location);
        }

        [Fact]
        public void GetMapped_IgnoresHeaderCase_Reversed()
        {
            var headers = new[] { "TOOLNUMBER", "LOCATION" };
            var row = new[] { "321", "Loc" };
            var map = new Dictionary<string, string> { ["ToolNumber"] = "toolnumber", ["Location"] = "location" };

            var number = typeof(CsvHelperUtil)
                .GetMethod("GetMapped", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static)!
                .Invoke(null, new object[] { row, headers, map, "ToolNumber" });

            var location = typeof(CsvHelperUtil)
                .GetMethod("GetMapped", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static)!
                .Invoke(null, new object[] { row, headers, map, "Location" });

            Assert.Equal("321", number);
            Assert.Equal("Loc", location);
        }
    }
}


// File: ToolManagementAppV2.Tests\Tests\CsvImportTests.cs
// Lines: 32, Size: 864 bytes
using System.Collections.Generic;
using System.IO;
using ToolManagementAppV2.Utilities.IO;
using Xunit;

public class CsvImportTests
{
    [Fact]
    public void LoadToolsFromCsv_SkipsRowsMissingToolNumber()
    {
        var csv = string.Join('\n',
            "ToolNumber,NameDescription,AvailableQuantity",
            ",Hammer,5",
            "T1,Screwdriver,2");
        var path = Path.GetTempFileName();
        File.WriteAllText(path, csv);

        var map = new Dictionary<string, string>
        {
            { "ToolNumber", "ToolNumber" },
            { "NameDescription", "NameDescription" },
            { "AvailableQuantity", "AvailableQuantity" }
        };

        var tools = CsvHelperUtil.LoadToolsFromCsv(path, map, out var invalid);

        Assert.Single(tools);
        Assert.Contains(2, invalid);
    }
}



// File: ToolManagementAppV2.Tests\Tests\MainWindowRentalBindingTests.cs
// Lines: 22, Size: 662 bytes
using System.Windows.Controls;
using System.Windows.Data;
using ToolManagementAppV2;
using ToolManagementAppV2.ViewModels;
using Xunit;

namespace ToolManagementAppV2.Tests.Tests
{
    public class MainWindowRentalBindingTests
    {
        [Fact]
        public void RentalsList_BindsToActiveRentalsCollection()
        {
            var window = new MainWindow();
            var vm = Assert.IsType<MainViewModel>(window.DataContext);

            Assert.True(BindingOperations.IsDataBound(window.RentalsList, ItemsControl.ItemsSourceProperty));
            Assert.Same(vm.ActiveRentals, window.RentalsList.ItemsSource);
        }
    }
}


// File: ToolManagementAppV2.Tests\Tests\MainWindowTabBindingTests.cs
// Lines: 37, Size: 1580 bytes
using System.Linq;
using System.Windows.Controls;
using System.Windows.Data;
using ToolManagementAppV2;
using ToolManagementAppV2.ViewModels;
using Xunit;

namespace ToolManagementAppV2.Tests.Tests
{
    public class MainWindowTabBindingTests
    {
        [Fact]
        public void SwitchingTabs_DoesNotBreakToolsListBinding()
        {
            var window = new MainWindow();
            var vm = Assert.IsType<MainViewModel>(window.DataContext);

            // ToolsList should be bound to the Tools collection
            Assert.True(BindingOperations.IsDataBound(window.ToolsList, ItemsControl.ItemsSourceProperty));
            Assert.Same(vm.Tools, window.ToolsList.ItemsSource);

            var tabControl = window.MyTabControl;
            var searchTab = tabControl.Items.OfType<TabItem>().First(t => t.Header!.ToString() == "Search Tools");
            var toolsTab = tabControl.Items.OfType<TabItem>().First(t => t.Header!.ToString() == "Tool Management");

            tabControl.SelectedItem = searchTab;
            window.MyTabControl_SelectionChanged(tabControl, new SelectionChangedEventArgs(TabControl.SelectionChangedEvent, null, null));

            tabControl.SelectedItem = toolsTab;
            window.MyTabControl_SelectionChanged(tabControl, new SelectionChangedEventArgs(TabControl.SelectionChangedEvent, null, null));

            Assert.True(BindingOperations.IsDataBound(window.ToolsList, ItemsControl.ItemsSourceProperty));
            Assert.Same(vm.Tools, window.ToolsList.ItemsSource);
        }
    }
}


// File: ToolManagementAppV2.Tests\Tests\MapUserLoggingTests.cs
// Lines: 72, Size: 2242 bytes
using System;
using System.IO;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Interfaces;
using Xunit;

namespace ToolManagementAppV2.Tests
{
    public class MapUserLoggingTests
    {
        [Fact]
        public void GetAllUsers_InvalidPackPath_LogsException()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IUserService service = new UserService(db);
                service.AddUser(new User { UserName = "u", Password = "p", UserPhotoPath = "pack://application:,,,/Resources/NoImage.png" });

                var sw = new StringWriter();
                var original = Console.Out;
                Console.SetOut(sw);
                try
                {
                    service.GetAllUsers();
                }
                finally
                {
                    Console.SetOut(original);
                }
                Assert.NotEqual(string.Empty, sw.ToString());
            }
            finally
            {
                if (File.Exists(dbPath)) File.Delete(dbPath);
            }
        }

        [Fact]
        public void GetAllUsers_InvalidFilePath_LogsException()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IUserService service = new UserService(db);
                service.AddUser(new User { UserName = "u", Password = "p", UserPhotoPath = "invalid|path.png" });

                var sw = new StringWriter();
                var original = Console.Out;
                Console.SetOut(sw);
                try
                {
                    service.GetAllUsers();
                }
                finally
                {
                    Console.SetOut(original);
                }
                Assert.NotEqual(string.Empty, sw.ToString());
            }
            finally
            {
                if (File.Exists(dbPath)) File.Delete(dbPath);
            }
        }
    }
}


// File: ToolManagementAppV2.Tests\Tests\NonEmptyStringToBoolConverterTests.cs
// Lines: 59, Size: 2185 bytes
using System.Globalization;
using System.Windows.Data;
using ToolManagementAppV2.Utilities.Converters;
using Xunit;

namespace ToolManagementAppV2.Tests
{
    public class NonEmptyStringToBoolConverterTests
    {
        [Fact]
        public void Convert_NonEmptyString_ReturnsTrue()
        {
            var converter = new NonEmptyStringToBoolConverter();
            var result = converter.Convert("text", typeof(bool), null, CultureInfo.InvariantCulture);
            Assert.True((bool)result);
        }

        [Fact]
        public void Convert_EmptyOrNull_ReturnsFalse()
        {
            var converter = new NonEmptyStringToBoolConverter();
            Assert.False((bool)converter.Convert(string.Empty, typeof(bool), null, CultureInfo.InvariantCulture));
            Assert.False((bool)converter.Convert(null, typeof(bool), null, CultureInfo.InvariantCulture));
        }

        [Fact]
        public void Convert_InvalidInput_ReturnsFalse()
        {
            var converter = new NonEmptyStringToBoolConverter();
            var result = converter.Convert(42, typeof(bool), null, CultureInfo.InvariantCulture);
            Assert.False((bool)result);
        }

        [Fact]
        public void ConvertBack_True_ReturnsEmptyString()
        {
            var converter = new NonEmptyStringToBoolConverter();
            var result = converter.ConvertBack(true, typeof(string), null, CultureInfo.InvariantCulture);
            Assert.Equal(string.Empty, result);
        }

        [Fact]
        public void ConvertBack_False_ReturnsNull()
        {
            var converter = new NonEmptyStringToBoolConverter();
            var result = converter.ConvertBack(false, typeof(string), null, CultureInfo.InvariantCulture);
            Assert.Null(result);
        }

        [Fact]
        public void ConvertBack_InvalidInput_ReturnsBindingDoNothing()
        {
            var converter = new NonEmptyStringToBoolConverter();
            var result = converter.ConvertBack(42, typeof(string), null, CultureInfo.InvariantCulture);
            Assert.Equal(Binding.DoNothing, result);
        }
    }
}


// File: ToolManagementAppV2.Tests\Tests\NullToDefaultImageConverterTests.cs
// Lines: 68, Size: 2795 bytes
using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Utilities.Converters;
using ToolManagementAppV2.Utilities.Helpers;
using Xunit;

namespace ToolManagementAppV2.Tests
{
    public class NullToDefaultImageConverterTests
    {
        [Fact]
        public void Convert_Null_ReturnsDefaultUser()
        {
            var converter = new NullToDefaultImageConverter();
            var result = converter.Convert(null, typeof(BitmapImage), null, CultureInfo.InvariantCulture);
            var bmp = Assert.IsType<BitmapImage>(result);
            Assert.Equal("pack://application:,,,/Resources/DefaultUserPhoto.png", bmp.UriSource.OriginalString);
        }

        [Fact]
        public void Convert_ValidPath_ReturnsBitmapImage()
        {
            var converter = new NullToDefaultImageConverter();
            var path = "Assets/Avatars/1.png";
            var bmp = Assert.IsType<BitmapImage>(converter.Convert(path, typeof(BitmapImage), null, CultureInfo.InvariantCulture));
            Assert.Equal(PathHelper.GetAbsolutePath(path), bmp.UriSource.OriginalString);
        }

        [Fact]
        public void Convert_InvalidPath_ReturnsDefaultUser()
        {
            var converter = new NullToDefaultImageConverter();
            var result = converter.Convert("invalid|path.png", typeof(BitmapImage), null, CultureInfo.InvariantCulture);
            var bmp = Assert.IsType<BitmapImage>(result);
            Assert.Equal("pack://application:,,,/Resources/DefaultUserPhoto.png", bmp.UriSource.OriginalString);
        }

        [Fact]
        public void ConvertBack_BitmapImage_ReturnsUriString()
        {
            var converter = new NullToDefaultImageConverter();
            var uri = "pack://application:,,,/Resources/DefaultUserPhoto.png";
            var bmp = new BitmapImage(new Uri(uri));
            var result = converter.ConvertBack(bmp, typeof(string), null, CultureInfo.InvariantCulture);
            Assert.Equal(uri, result);
        }

        [Fact]
        public void ConvertBack_String_ReturnsSameString()
        {
            var converter = new NullToDefaultImageConverter();
            var path = "image.png";
            var result = converter.ConvertBack(path, typeof(string), null, CultureInfo.InvariantCulture);
            Assert.Equal(path, result);
        }

        [Fact]
        public void ConvertBack_InvalidInput_ReturnsBindingDoNothing()
        {
            var converter = new NullToDefaultImageConverter();
            var result = converter.ConvertBack(42, typeof(string), null, CultureInfo.InvariantCulture);
            Assert.Equal(Binding.DoNothing, result);
        }
    }
}


// File: ToolManagementAppV2.Tests\Tests\SmokeTest.cs
// Lines: 14, Size: 226 bytes
using Xunit;

namespace ToolManagementAppV2.Tests.Tests
{
    public class SmokeTest
    {
        [Fact]
        public void TestFrameworkIsWorking()
        {
            Assert.True(true);
        }
    }
}


// File: ToolManagementAppV2.Tests\Tests\Utilities.cs
// Lines: 45, Size: 1369 bytes
using System;
using System.IO;
using ToolManagementAppV2.Utilities.Helpers;
using Xunit;

namespace ToolManagementAppV2.Tests
{
    public class Utilities
    {
        [Fact]
        public void GetAbsolutePath_RelativePathInsideApp_ReturnsAbsolutePath()
        {
            var baseDir = Path.GetFullPath(AppDomain.CurrentDomain.BaseDirectory);
            var result = PathHelper.GetAbsolutePath("testfile.tmp");
            var expected = Path.GetFullPath(Path.Combine(baseDir, "testfile.tmp"));
            Assert.Equal(expected, result);
        }

        [Fact]
        public void GetAbsolutePath_PathTraversal_ReturnsNull()
        {
            var result = PathHelper.GetAbsolutePath(".." + Path.DirectorySeparatorChar + "file.txt");
            Assert.Null(result);
        }

        [Fact]
        public void GetAbsolutePath_InvalidCharacters_ReturnsNullAndLogs()
        {
            var sw = new StringWriter();
            var original = Console.Out;
            Console.SetOut(sw);
            try
            {
                var result = PathHelper.GetAbsolutePath("invalid|path");
                Assert.Null(result);
            }
            finally
            {
                Console.SetOut(original);
            }
            Assert.NotEqual(string.Empty, sw.ToString());
        }
    }
}


// File: ToolManagementAppV2.Tests\ViewModels\AvatarSelectionTests.cs
// Lines: 52, Size: 1979 bytes
using System.IO;
using System.Linq;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Services.Rentals;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Services.Tools;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.ViewModels;
using ToolManagementAppV2.Interfaces;
using Xunit;

namespace ToolManagementAppV2.Tests.ViewModels
{
    public class AvatarSelectionTests
    {
        [Fact]
        public void ApplyAvatar_StoresRelativePath()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolService = new ToolService(db);
                IUserService userService = new UserService(db);
                ICustomerService customerService = new CustomerService(db);
                IRentalService rentalService = new RentalService(db);
                ISettingsService settingsService = new SettingsService(db);

                var user = new User { UserName = "u", Password = "p" };
                userService.AddUser(user);
                var added = userService.GetAllUsers().First();

                var vm = new MainViewModel(toolService, userService, customerService, rentalService, settingsService);
                var avatar = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Resources", "Avatars", "1.png");

                vm.ApplyAvatar(added, avatar);

                var updated = userService.GetUserByID(added.UserID);
                Assert.Equal(Path.Combine("Resources", "Avatars", "1.png"), updated.UserPhotoPath);
                Assert.NotNull(updated.PhotoBitmap);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }
    }
}


// File: ToolManagementAppV2.Tests\ViewModels\MainViewModelTests.cs
// Lines: 215, Size: 8878 bytes
using System.IO;
using System.Linq;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Services.Rentals;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Services.Tools;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Interfaces;
using ToolManagementAppV2.ViewModels;
using Xunit;

namespace ToolManagementAppV2.Tests.ViewModels
{
    public class MainViewModelTests
    {
        [Fact]
        public void SearchCommand_FiltersToolsBySearchTerm()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolService = new ToolService(db);
                IUserService userService = new UserService(db);
                ICustomerService customerService = new CustomerService(db);
                IRentalService rentalService = new RentalService(db);
                ISettingsService settingsService = new SettingsService(db);

                toolService.AddTool(new Tool { ToolNumber = "T1", NameDescription = "Hammer" });
                toolService.AddTool(new Tool { ToolNumber = "T2", NameDescription = "Saw" });

                var vm = new MainViewModel(toolService, userService, customerService, rentalService, settingsService);

                vm.SearchTerm = "Ham";
                vm.SearchCommand.Execute(null);

                Assert.Single(vm.SearchResults);
                Assert.Equal("Hammer", vm.SearchResults.First().NameDescription);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }

        [Fact]
        public void SearchCommand_EmptyTerm_ReturnsAllTools()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolService = new ToolService(db);
                IUserService userService = new UserService(db);
                ICustomerService customerService = new CustomerService(db);
                IRentalService rentalService = new RentalService(db);
                ISettingsService settingsService = new SettingsService(db);

                toolService.AddTool(new Tool { ToolNumber = "T1", NameDescription = "Hammer" });
                toolService.AddTool(new Tool { ToolNumber = "T2", NameDescription = "Saw" });

                var vm = new MainViewModel(toolService, userService, customerService, rentalService, settingsService);

                vm.SearchTerm = string.Empty;
                vm.SearchCommand.Execute(null);

                Assert.Equal(2, vm.SearchResults.Count);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }

        [Fact]
        public void AddToolCommand_PersistsNewToolValues()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolService = new ToolService(db);
                IUserService userService = new UserService(db);
                ICustomerService customerService = new CustomerService(db);
                IRentalService rentalService = new RentalService(db);
                ISettingsService settingsService = new SettingsService(db);

                var vm = new MainViewModel(toolService, userService, customerService, rentalService, settingsService);

                vm.NewTool.ToolNumber = "TN1";
                vm.NewTool.NameDescription = "Hammer";
                vm.NewTool.PartNumber = "PN1";
                vm.NewTool.Brand = "BrandA";
                vm.NewTool.Location = "Shelf";
                vm.NewTool.QuantityOnHand = 5;
                vm.NewTool.Supplier = "ABC";
                vm.NewTool.Notes = "Note";

                vm.AddToolCommand.Execute(null);

                var tools = toolService.GetAllTools();
                Assert.Single(tools);
                var tool = tools.First();
                Assert.Equal("TN1", tool.ToolNumber);
                Assert.Equal("Hammer", tool.NameDescription);
                Assert.Equal("PN1", tool.PartNumber);
                Assert.Equal("BrandA", tool.Brand);
                Assert.Equal("Shelf", tool.Location);
                Assert.Equal(5, tool.QuantityOnHand);
                Assert.Equal("ABC", tool.Supplier);
                Assert.Equal("Note", tool.Notes);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }

        [Fact]
        public void AddCustomerCommand_PersistsNewCustomerValues()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolService = new ToolService(db);
                IUserService userService = new UserService(db);
                ICustomerService customerService = new CustomerService(db);
                IRentalService rentalService = new RentalService(db);
                ISettingsService settingsService = new SettingsService(db);

                var vm = new MainViewModel(toolService, userService, customerService, rentalService, settingsService);

                vm.NewCustomerName = "ACME";
                vm.NewCustomerEmail = "a@b.com";
                vm.NewCustomerContact = "John";
                vm.NewCustomerPhone = "123";
                vm.NewCustomerMobile = "456";
                vm.NewCustomerAddress = "Addr";

                vm.AddCustomerCommand.Execute(null);

                var customers = customerService.GetAllCustomers();
                Assert.Single(customers);
                var c = customers.First();
                Assert.Equal("ACME", c.Company);
                Assert.Equal("a@b.com", c.Email);
                Assert.Equal("John", c.Contact);
                Assert.Equal("123", c.Phone);
                Assert.Equal("456", c.Mobile);
                Assert.Equal("Addr", c.Address);

                Assert.True(string.IsNullOrEmpty(vm.NewCustomerName));
                Assert.True(string.IsNullOrEmpty(vm.NewCustomerEmail));
                Assert.True(string.IsNullOrEmpty(vm.NewCustomerContact));
                Assert.True(string.IsNullOrEmpty(vm.NewCustomerPhone));
                Assert.True(string.IsNullOrEmpty(vm.NewCustomerMobile));
                Assert.True(string.IsNullOrEmpty(vm.NewCustomerAddress));
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }

        [Fact]
        public void UpdateCustomerCommand_UpdatesSelectedCustomer()
        {
            var dbPath = Path.GetTempFileName();
            try
            {
                var db = new DatabaseService(dbPath);
                IToolService toolService = new ToolService(db);
                IUserService userService = new UserService(db);
                ICustomerService customerService = new CustomerService(db);
                IRentalService rentalService = new RentalService(db);
                ISettingsService settingsService = new SettingsService(db);

                customerService.AddCustomer(new Customer { Company = "Old" });
                var existing = customerService.GetAllCustomers().First();

                var vm = new MainViewModel(toolService, userService, customerService, rentalService, settingsService);
                vm.SelectedCustomer = existing;
                vm.NewCustomerName = "New";
                vm.NewCustomerEmail = "e@e.com";
                vm.NewCustomerContact = "Bob";
                vm.NewCustomerPhone = "9";
                vm.NewCustomerMobile = "8";
                vm.NewCustomerAddress = "Addr";

                vm.UpdateCustomerCommand.Execute(null);

                var updated = customerService.GetCustomerByID(existing.CustomerID);
                Assert.Equal("New", updated.Company);
                Assert.Equal("e@e.com", updated.Email);
                Assert.Equal("Bob", updated.Contact);
                Assert.Equal("9", updated.Phone);
                Assert.Equal("8", updated.Mobile);
                Assert.Equal("Addr", updated.Address);
            }
            finally
            {
                if (File.Exists(dbPath))
                    File.Delete(dbPath);
            }
        }
    }
}


// File: ToolManagementAppV2.Tests\ViewModels\RentalHistoryViewModelTests.cs
// Lines: 29, Size: 954 bytes
using System.Collections.Generic;
using System.Linq;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.ViewModels.Rental;
using Xunit;

namespace ToolManagementAppV2.Tests.ViewModels
{
    public class RentalHistoryViewModelTests
    {
        [Fact]
        public void Constructor_SetsDisplayNameAndHistory()
        {
            var tool = new Tool { ToolNumber = "T1", NameDescription = "Hammer" };
            var rentals = new List<Rental>
            {
                new Rental { RentalID = 1, ToolID = tool.ToolID, CustomerID = 1 },
                new Rental { RentalID = 2, ToolID = tool.ToolID, CustomerID = 2 }
            };

            var vm = new RentalHistoryViewModel(tool, rentals);

            Assert.Equal("T1 - Hammer", vm.ToolDisplayName);
            Assert.Equal(2, vm.History.Count);
            Assert.Equal(rentals.First().RentalID, vm.History[0].RentalID);
        }
    }
}


// File: ToolManagementAppV2\App.xaml
// Lines: 12, Size: 512 bytes
<Application x:Class="ToolManagementAppV2.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/Styles.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>


// File: ToolManagementAppV2\App.xaml.cs
// Lines: 32, Size: 1007 bytes
// App.xaml.cs – Use OnExplicitShutdown while showing the login window, then switch after login
using System.Windows;

namespace ToolManagementAppV2
{
    public partial class App : Application
    {
        protected override void OnStartup(StartupEventArgs e)
        {
            // Prevent shutdown when the login window closes
            ShutdownMode = ShutdownMode.OnExplicitShutdown;
            base.OnStartup(e);

            LoginWindow login = new LoginWindow();
            bool? loginResult = login.ShowDialog();

            if (loginResult == true)
            {
                // Switch shutdown mode now that we are creating the main window
                ShutdownMode = ShutdownMode.OnMainWindowClose;
                MainWindow mainWindow = new MainWindow();
                Current.MainWindow = mainWindow;
                mainWindow.Show();
            }
            else
            {
                Shutdown();
            }
        }
    }
}


// File: ToolManagementAppV2\AssemblyInfo.cs
// Lines: 14, Size: 747 bytes
using System.Windows;
using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("ToolManagementAppV2.Tests")]

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]


// File: ToolManagementAppV2\Interfaces\ICustomerService.cs
// Lines: 19, Size: 653 bytes
using System.Collections.Generic;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Models.Domain;

namespace ToolManagementAppV2.Interfaces
{
    public interface ICustomerService
    {
        void AddCustomer(Customer customer);
        void UpdateCustomer(Customer customer);
        void DeleteCustomer(int customerID);
        Customer GetCustomerByID(int customerID);
        List<Customer> GetAllCustomers();
        List<Customer> SearchCustomers(string searchTerm);
        void ImportCustomersFromCsv(string filePath, IDictionary<string,string> map);
        void ExportCustomersToCsv(string filePath);
    }
}


// File: ToolManagementAppV2\Interfaces\IRentalService.cs
// Lines: 21, Size: 820 bytes
using System;
using System.Collections.Generic;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Models.Domain;

namespace ToolManagementAppV2.Interfaces
{
    public interface IRentalService
    {
        void RentTool(string toolID, int customerID, DateTime rentalDate, DateTime dueDate);
        void RentToolWithTransaction(string toolID, int customerID, DateTime rentalDate, DateTime dueDate);
        void ReturnTool(int rentalID, DateTime returnDate);
        void ReturnToolWithTransaction(int rentalID, DateTime returnDate);
        void ExtendRental(int rentalID, DateTime newDueDate);
        List<Rental> GetActiveRentals();
        List<Rental> GetOverdueRentals();
        List<Rental> GetAllRentals();
        List<Rental> GetRentalHistoryForTool(string toolID);
    }
}


// File: ToolManagementAppV2\Interfaces\ISettingsService.cs
// Lines: 14, Size: 396 bytes
using System.Collections.Generic;

namespace ToolManagementAppV2.Interfaces
{
    public interface ISettingsService
    {
        void SaveSetting(string key, string value);
        string GetSetting(string key);
        Dictionary<string, string> GetAllSettings();
        void UpdateSettings(Dictionary<string, string> settings);
        void DeleteSetting(string key);
    }
}


// File: ToolManagementAppV2\Interfaces\IToolService.cs
// Lines: 22, Size: 782 bytes
using System.Collections.Generic;
using ToolManagementAppV2.Models;


namespace ToolManagementAppV2.Interfaces
{
    public interface IToolService
    {
        void AddTool(ToolModel tool);
        void UpdateTool(ToolModel tool);
        void DeleteTool(string toolID);
        ToolModel GetToolByID(string toolID);
        List<ToolModel> GetAllTools();
        List<ToolModel> SearchTools(string? searchText);
        void ToggleToolCheckOutStatus(string toolID, string currentUser);
        List<ToolModel> GetToolsCheckedOutBy(string userName);
        void UpdateToolImage(string toolID, string imagePath);
        List<int> ImportToolsFromCsv(string filePath, IDictionary<string, string> map);
        void ExportToolsToCsv(string filePath);
    }
}


// File: ToolManagementAppV2\Interfaces\IUserService.cs
// Lines: 20, Size: 602 bytes
using System.Collections.Generic;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Models.Domain;

namespace ToolManagementAppV2.Interfaces
{
    public interface IUserService
    {
        List<User> GetAllUsers();
        User GetUserByID(int userID);
        User AuthenticateUser(string userName, string password);
        User GetCurrentUser();
        void AddUser(User user);
        void UpdateUser(User user);
        bool TryDeleteUser(int userID);
        bool DeleteUser(int userID);
        void ChangeUserPassword(int userID, string newPassword);
    }
}


// File: ToolManagementAppV2\MainWindow.xaml
// Lines: 588, Size: 40669 bytes
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:local="clr-namespace:ToolManagementAppV2.Utilities.Converters"
        xmlns:av="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="av"
        x:Class="ToolManagementAppV2.MainWindow"
        Title="Tool Inventory Management"
        Height="650"
        Width="1600"
        WindowStartupLocation="CenterScreen">
    <DockPanel Margin="10">
        <!-- Global Resources -->
        <DockPanel.Resources>
            <local:CheckOutStatusConverter x:Key="CheckOutStatusConverter"/>
            <local:NullToDefaultImageConverter x:Key="NullToDefaultImageConverter"/>
            <local:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
            <DataTemplate x:Key="CheckOutButtonTemplate">
                <Button Content="{Binding IsCheckedOut, Converter={StaticResource CheckOutStatusConverter}}"
                Click="CheckOutButton_Click"
                CommandParameter="{Binding ToolID}" />
            </DataTemplate>
            <Style x:Key="ToolImageTooltipStyle" TargetType="ListViewItem">
                <Setter Property="ToolTip">
                    <Setter.Value>
                        <Border BorderBrush="Gray" BorderThickness="1" Padding="2" Background="White">
                            <Image Width="400" Height="400" Stretch="Uniform"
                       Source="{Binding ToolImagePath, Converter={StaticResource NullToDefaultImageConverter}, ConverterParameter=Tool}"/>
                        </Border>
                    </Setter.Value>
                </Setter>
            </Style>
        </DockPanel.Resources>

        <!-- Header with Logo and Title -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <DockPanel>
                <Image x:Name="HeaderIcon" Source="{Binding HeaderLogo}" Width="50" Height="50" />
                <!-- give this a name so code-behind can update it -->
                <TextBlock x:Name="HeaderTitle"
                           Text="Tool Inventory Management"
                           FontWeight="Bold"
                           FontSize="20"
                           Margin="10"
                           VerticalAlignment="Center"/>
                <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" HorizontalAlignment="Right" Margin="5">
                    <Image Source="{Binding CurrentUserPhoto}" Width="50" Height="50" Margin="0,0,10,0" />
                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="{Binding CurrentUserName}" FontWeight="Bold" Margin="0,0,0,5" />
                        <Button Content="Logout" Click="LogoutButton_Click" Width="80" />
                    </StackPanel>
                </StackPanel>
            </DockPanel>
        </Border>


        <!-- Main Content Area -->
        <Grid DockPanel.Dock="Top">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <TabControl x:Name="MyTabControl" Margin="5" Grid.Row="0" SelectionChanged="MyTabControl_SelectionChanged">
                <TabItem Header="Dashboard">
                    <Grid Margin="10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="10">
                            <Button Content="Search Tools" Command="{Binding OpenSearchToolsCommand}" Width="200" Margin="10"/>
                            <Button Content="Manage Tools" Command="{Binding OpenManageToolsCommand}" Width="200" Margin="10"/>
                            <Button Content="Rentals" Command="{Binding OpenRentalsCommand}" Width="200" Margin="10"/>
                            <Button Content="Customers" Command="{Binding OpenCustomersCommand}" Width="200" Margin="10"/>
                            <Button Content="Reports" Command="{Binding OpenReportsCommand}" Width="200" Margin="10"/>
                            <Button Content="Settings" Command="{Binding OpenSettingsCommand}" Width="200" Margin="10"/>
                        </StackPanel>

                        <GroupBox Header="Quick Summary" Grid.Row="1" Margin="10">
                            <StackPanel Margin="10">
                                <TextBlock Text="{Binding TotalToolsSummary}" FontSize="14" Margin="5"/>
                                <TextBlock Text="{Binding TotalCustomersSummary}" FontSize="14" Margin="5"/>
                                <TextBlock Text="{Binding ActiveRentalsSummary}" FontSize="14" Margin="5"/>
                                <TextBlock Text="{Binding OverdueRentalsSummary}" FontSize="14" Margin="5"/>
                                <TextBlock Text="{Binding ActivityLogsSummary}" FontSize="14" Margin="5"/>
                            </StackPanel>
                        </GroupBox>
                    </Grid>
                </TabItem>

                <!-- Search Tools Tab -->
                <TabItem Header="Tool Search">
                    <Grid Margin="10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                            <xctk:WatermarkTextBox x:Name="SearchInput" Width="400" Margin="5" Watermark="Search Tools..." TextChanged="SearchInput_TextChanged" />
                            <Button Content="Print Search" Click="PrintSearchResults_Click" Width="150" Margin="5"/>
                            <Button Content="Print My Tools" Click="PrintMyCheckedOutTools_Click" Width="150" Margin="5"/>
                            <Button Content="Rent Tool" Command="{Binding RentToolCommand}" Width="150" Margin="5"/>
                            <Button Content="Rental History" Command="{Binding ViewRentalHistoryCommand}" Width="150" Margin="5"/>
                        </StackPanel>

                        <ListView x:Name="SearchResultsList" ItemContainerStyle="{StaticResource ToolImageTooltipStyle}" 
                  ItemsSource="{Binding SearchResults}" SelectedItem="{Binding SelectedTool, Mode=TwoWay}" 
                  Margin="0,0,0,10" Grid.Row="1" ScrollViewer.VerticalScrollBarVisibility="Auto">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Action" Width="80" CellTemplate="{StaticResource CheckOutButtonTemplate}"/>
                                    <GridViewColumn Header="Tool #" DisplayMemberBinding="{Binding ToolNumber}" Width="120"/>
                                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding NameDescription}" Width="380"/>
                                    <GridViewColumn Header="Part #" DisplayMemberBinding="{Binding PartNumber}" Width="100"/>
                                    <GridViewColumn Header="Brand" DisplayMemberBinding="{Binding Brand}" Width="100"/>
                                    <GridViewColumn Header="Qty" DisplayMemberBinding="{Binding QuantityOnHand}" Width="60"/>
                                    <GridViewColumn Header="Supplier" DisplayMemberBinding="{Binding Supplier}" Width="100"/>
                                    <GridViewColumn Header="Purchased" Width="100">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding PurchasedDate, StringFormat=\{0:yyyy-MM-dd\}}" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Notes" Width="250">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Notes}" TextWrapping="Wrap"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Image" Width="100">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Image Source="{Binding ToolImagePath, Converter={StaticResource NullToDefaultImageConverter}, ConverterParameter=Tool}" 
                                       Width="50" Height="50" Stretch="Uniform"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>

                        <GroupBox Header="My Checked-Out Tools" Grid.Row="2" Margin="0,10,0,0">
                            <ListView x:Name="CheckedOutToolsList" ItemContainerStyle="{StaticResource ToolImageTooltipStyle}" 
                      ItemsSource="{Binding CheckedOutTools}" SelectedItem="{Binding SelectedTool, Mode=TwoWay}">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Header="Action" Width="80" CellTemplate="{StaticResource CheckOutButtonTemplate}"/>
                                        <GridViewColumn Header="Tool ID" DisplayMemberBinding="{Binding ToolID}" Width="80"/>
                                        <GridViewColumn Header="Name" DisplayMemberBinding="{Binding NameDescription}" Width="300"/>
                                        <GridViewColumn Header="Checked Out By" DisplayMemberBinding="{Binding CheckedOutBy}" Width="150"/>
                                        <GridViewColumn Header="Checked Out Time" DisplayMemberBinding="{Binding CheckedOutTime, StringFormat=\{0:G\}}" Width="150"/>
                                        <GridViewColumn Header="Location" DisplayMemberBinding="{Binding Location}" Width="100"/>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </GroupBox>
                    </Grid>
                </TabItem>


                <!-- Tool Management Tab -->
                <TabItem Header="Tool Management">
                    <Grid Margin="10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="400"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <GroupBox Header="Tool Editor" Grid.Column="0" Margin="0,0,10,0">
                            <Grid Margin="5">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <TextBlock Text="Tool Number:" Grid.Row="0"/>
                                <xctk:WatermarkTextBox Text="{Binding NewTool.ToolNumber, Mode=TwoWay}" Grid.Row="0" Grid.Column="1" Watermark="Tool Number" Margin="0,2"/>

                                <TextBlock Text="Name:" Grid.Row="1"/>
                                <xctk:WatermarkTextBox Text="{Binding NewTool.NameDescription, Mode=TwoWay}" Grid.Row="1" Grid.Column="1" Watermark="Tool Name" Margin="0,2"/>

                                <TextBlock Text="Part Number:" Grid.Row="2"/>
                                <xctk:WatermarkTextBox Text="{Binding NewTool.PartNumber, Mode=TwoWay}" Grid.Row="2" Grid.Column="1" Watermark="Part Number" Margin="0,2"/>

                                <TextBlock Text="Brand:" Grid.Row="3"/>
                                <xctk:WatermarkTextBox Text="{Binding NewTool.Brand, Mode=TwoWay}" Grid.Row="3" Grid.Column="1" Watermark="Brand" Margin="0,2"/>

                                <TextBlock Text="Location:" Grid.Row="4"/>
                                <xctk:WatermarkTextBox Text="{Binding NewTool.Location, Mode=TwoWay}" Grid.Row="4" Grid.Column="1" Watermark="Location" Margin="0,2"/>

                                <TextBlock Text="Quantity:" Grid.Row="5"/>
                                <xctk:WatermarkTextBox Text="{Binding NewTool.QuantityOnHand, Mode=TwoWay}" Grid.Row="5" Grid.Column="1" Watermark="Quantity" Margin="0,2"/>

                                <TextBlock Text="Supplier:" Grid.Row="6"/>
                                <xctk:WatermarkTextBox Text="{Binding NewTool.Supplier, Mode=TwoWay}" Grid.Row="6" Grid.Column="1" Watermark="Supplier" Margin="0,2"/>

                                <TextBlock Text="Purchased Date:" Grid.Row="7"/>
                                <xctk:WatermarkTextBox Text="{Binding NewTool.PurchasedDate, Mode=TwoWay, StringFormat=yyyy-MM-dd}" Grid.Row="7" Grid.Column="1" Watermark="yyyy-MM-dd" Margin="0,2"/>

                                <TextBlock Text="Notes:" Grid.Row="8"/>
                                <xctk:WatermarkTextBox Text="{Binding NewTool.Notes, Mode=TwoWay}" Grid.Row="8" Grid.Column="1" Watermark="Notes" AcceptsReturn="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" Margin="0,2" Height="100"/>

                                <Button Content="Add/Change Tool Image" Click="ChangeToolImage_Click" Grid.Row="9" Grid.ColumnSpan="2" Margin="0,10,0,0"/>

                                <StackPanel Grid.Row="10" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,10,0,0">
                                    <Button Content="Add" Command="{Binding AddToolCommand}" Margin="5"/>
                                    <Button Content="Update" Command="{Binding UpdateToolCommand}" Margin="5"/>
                                    <Button Content="Delete" Command="{Binding DeleteToolCommand}" Margin="5"/>
                                </StackPanel>
                            </Grid>
                        </GroupBox>

                        <ListView x:Name="ToolsList" Grid.Column="1" ItemContainerStyle="{StaticResource ToolImageTooltipStyle}" 
                  ItemsSource="{Binding Tools}" SelectedItem="{Binding SelectedTool, Mode=TwoWay}">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Tool #" DisplayMemberBinding="{Binding ToolNumber}" Width="100"/>
                                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding NameDescription}" Width="250"/>
                                    <GridViewColumn Header="Part #" DisplayMemberBinding="{Binding PartNumber}" Width="100"/>
                                    <GridViewColumn Header="Brand" DisplayMemberBinding="{Binding Brand}" Width="100"/>
                                    <GridViewColumn Header="Location" DisplayMemberBinding="{Binding Location}" Width="100"/>
                                    <GridViewColumn Header="Qty" DisplayMemberBinding="{Binding QuantityOnHand}" Width="60"/>
                                    <GridViewColumn Header="Supplier" DisplayMemberBinding="{Binding Supplier}" Width="100"/>
                                    <GridViewColumn Header="Purchased" Width="100">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding PurchasedDate, StringFormat=\{0:yyyy-MM-dd\}}"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Notes" Width="300">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Notes}" TextWrapping="Wrap"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Image" Width="100">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Image Source="{Binding ToolImagePath, Converter={StaticResource NullToDefaultImageConverter}}" Width="50" Height="50" Stretch="Uniform"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>

                <!-- Rentals Management Tab -->
                <TabItem Header="Rentals">
                    <Grid Margin="10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <GroupBox Header="Rental Operations" Grid.Row="0" Margin="0,0,0,10">
                            <StackPanel Orientation="Vertical" Margin="5">

                                <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                                    <xctk:WatermarkTextBox x:Name="ToolIDForRentalInput" Watermark="Tool ID" Width="150" Margin="5"/>
                                    <xctk:WatermarkTextBox x:Name="CustomerIDForRentalInput" Watermark="Customer ID" Width="150" Margin="5"/>
                                    <xctk:WatermarkTextBox x:Name="DueDateInput" Watermark="Due Date (YYYY-MM-DD)" Width="150" Margin="5"/>
                                    <Button Content="Rent Tool" Command="{Binding RentToolCommand}" Width="120" Margin="5"/>
                                    <Button Content="Return Tool" Command="{Binding ReturnToolCommand}" Width="120" Margin="5"/>
                                    <Button Content="Print Receipt" Click="PrintRentalReceipt_Click" Width="120" Margin="5"/>
                                </StackPanel>

                                <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                                    <xctk:WatermarkTextBox x:Name="RentalIDInput" Watermark="Rental ID" Width="120" Margin="5"/>
                                    <xctk:WatermarkTextBox x:Name="NewDueDateInput" Watermark="New Due Date (YYYY-MM-DD)" Width="150" Margin="5"/>
                                    <Button Content="Extend Rental" Command="{Binding ExtendRentalCommand}" Width="150" Margin="5"/>
                                    <Button Content="Overdue Rentals" Command="{Binding LoadOverdueRentalsCommand}" Width="150" Margin="5"/>
                                </StackPanel>

                            </StackPanel>
                        </GroupBox>

                        <ListView x:Name="RentalsList" ItemsSource="{Binding ActiveRentals}" Grid.Row="1">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Rental ID" DisplayMemberBinding="{Binding RentalID}" Width="80"/>
                                    <GridViewColumn Header="Tool ID" DisplayMemberBinding="{Binding ToolID}" Width="80"/>
                                    <GridViewColumn Header="Customer ID" DisplayMemberBinding="{Binding CustomerID}" Width="80"/>
                                    <GridViewColumn Header="Rental Date" DisplayMemberBinding="{Binding RentalDate, StringFormat=\{0:yyyy-MM-dd\}}" Width="120"/>
                                    <GridViewColumn Header="Due Date" DisplayMemberBinding="{Binding DueDate, StringFormat=\{0:yyyy-MM-dd\}}" Width="120"/>
                                    <GridViewColumn Header="Return Date" DisplayMemberBinding="{Binding ReturnDate, StringFormat=\{0:yyyy-MM-dd\}}" Width="120"/>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>


                <!-- Customers Management Tab -->
                <TabItem Header="Customers">
                    <Grid Margin="10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="400"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <GroupBox Header="Customer Editor" Grid.Column="0" Margin="0,0,10,0">
                            <StackPanel Margin="5">

                                <xctk:WatermarkTextBox x:Name="CustomerNameInput" Watermark="Company Name" Text="{Binding NewCustomerName, Mode=TwoWay}" Margin="5"/>
                                <xctk:WatermarkTextBox x:Name="CustomerEmailInput" Watermark="Email" Text="{Binding NewCustomerEmail, Mode=TwoWay}" Margin="5"/>
                                <xctk:WatermarkTextBox x:Name="CustomerContactInput" Watermark="Contact" Text="{Binding NewCustomerContact, Mode=TwoWay}" Margin="5"/>
                                <xctk:WatermarkTextBox x:Name="CustomerPhoneInput" Watermark="Phone" Text="{Binding NewCustomerPhone, Mode=TwoWay}" Margin="5"/>
                                <xctk:WatermarkTextBox x:Name="CustomerMobileInput" Watermark="Mobile" Text="{Binding NewCustomerMobile, Mode=TwoWay}" Margin="5"/>
                                <xctk:WatermarkTextBox x:Name="CustomerAddressInput" Watermark="Address" Text="{Binding NewCustomerAddress, Mode=TwoWay}" Margin="5"/>

                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="10,20,10,0">
                                    <Button Content="Add" Command="{Binding AddCustomerCommand}" Margin="5" Width="80"/>
                                    <Button Content="Update" Command="{Binding UpdateCustomerCommand}" Margin="5" Width="80"/>
                                    <Button Content="Delete" Command="{Binding DeleteCustomerCommand}" Margin="5" Width="80"/>
                                </StackPanel>

                            </StackPanel>
                        </GroupBox>

                        <Grid Grid.Column="1">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <xctk:WatermarkTextBox x:Name="CustomerSearchInput" Watermark="Search Customers..." TextChanged="CustomerSearchInput_TextChanged" Margin="0,0,0,10" Width="300"/>

                            <ListView x:Name="CustomerList" ItemsSource="{Binding Customers}" SelectedItem="{Binding SelectedCustomer, Mode=TwoWay}" SelectionChanged="CustomerList_SelectionChanged" Grid.Row="1">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Header="Company" DisplayMemberBinding="{Binding Company}" Width="180"/>
                                        <GridViewColumn Header="Email" DisplayMemberBinding="{Binding Email}" Width="200"/>
                                        <GridViewColumn Header="Contact" DisplayMemberBinding="{Binding Contact}" Width="150"/>
                                        <GridViewColumn Header="Phone" DisplayMemberBinding="{Binding Phone}" Width="120"/>
                                        <GridViewColumn Header="Mobile" DisplayMemberBinding="{Binding Mobile}" Width="120"/>
                                        <GridViewColumn Header="Address" DisplayMemberBinding="{Binding Address}" Width="300"/>
                                    </GridView>
                                </ListView.View>
                            </ListView>

                        </Grid>
                    </Grid>
                </TabItem>

                <!-- Users Management Tab -->
                <TabItem Header="Users">
                    <Grid Margin="10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="400"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <GroupBox Header="User Editor" Grid.Column="0" Margin="0,0,10,0">
                            <StackPanel Margin="5">

                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <Border Width="100" Height="100" BorderBrush="Gray" BorderThickness="1">
                                        <Image Source="{Binding SelectedUser.PhotoBitmap, ConverterParameter=User, Converter={StaticResource NullToDefaultImageConverter}}" Stretch="UniformToFill"/>
                                    </Border>
                                    <Button Content="Change Photo" Command="{Binding UploadUserPhotoCommand}" Margin="10,0,0,0" VerticalAlignment="Center"/>
                                </StackPanel>

                                <xctk:WatermarkTextBox Watermark="User Name" Text="{Binding SelectedUser.UserName, Mode=TwoWay}" Margin="5"/>
                                <PasswordBox x:Name="PasswordBox" PasswordChanged="PasswordBox_PasswordChanged" Margin="5"/>
                                <xctk:WatermarkTextBox Watermark="Email" Text="{Binding SelectedUser.Email, Mode=TwoWay}" Margin="5"/>
                                <xctk:WatermarkTextBox Watermark="Phone" Text="{Binding SelectedUser.Phone, Mode=TwoWay}" Margin="5"/>
                                <xctk:WatermarkTextBox Watermark="Mobile" Text="{Binding SelectedUser.Mobile, Mode=TwoWay}" Margin="5"/>
                                <xctk:WatermarkTextBox Watermark="Address" Text="{Binding SelectedUser.Address, Mode=TwoWay}" Margin="5"/>
                                <xctk:WatermarkTextBox Watermark="Role" Text="{Binding SelectedUser.Role, Mode=TwoWay}" Margin="5"/>

                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <TextBlock Text="Is Admin:" Width="100" VerticalAlignment="Center"/>
                                    <CheckBox IsChecked="{Binding SelectedUser.IsAdmin, Mode=TwoWay}" IsEnabled="{Binding IsLastAdmin, Converter={StaticResource InverseBooleanConverter}}"/>
                                </StackPanel>

                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="10,20,10,0">
                                    <Button Content="New" Click="NewUserButton_Click" Margin="5" Width="80"/>
                                    <Button Content="Delete" Click="DeleteUserButton_Click" Margin="5" Width="80"/>
                                    <Button Content="Save" Click="SaveUserButton_Click" Margin="5" Width="80"/>
                                </StackPanel>

                            </StackPanel>
                        </GroupBox>

                        <ListView x:Name="UserList" ItemsSource="{Binding Users}" SelectedItem="{Binding SelectedUser, Mode=TwoWay}" Margin="0,0,0,10" Grid.Column="1">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="User Name" DisplayMemberBinding="{Binding UserName}" Width="180"/>
                                    <GridViewColumn Header="Admin" Width="80">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <CheckBox IsChecked="{Binding IsAdmin}" IsEnabled="False" HorizontalAlignment="Center"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>


                <!-- Settings Tab -->
                <TabItem Header="Settings">
                    <Grid Margin="10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <GroupBox Header="General Settings" Grid.Row="0" Margin="0,0,0,10">
                            <StackPanel Margin="5">

                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <TextBlock Text="Application Name:" Width="200" VerticalAlignment="Center"/>
                                    <TextBox x:Name="ApplicationNameInput" Width="250" Margin="5"/>
                                </StackPanel>

                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <TextBlock Text="Default Rental Duration (days):" Width="200" VerticalAlignment="Center"/>
                                    <xctk:WatermarkTextBox x:Name="RentalDurationInput" Text="7" Width="100" Margin="5"/>
                                </StackPanel>

                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <TextBlock Text="Company Logo:" Width="200" VerticalAlignment="Center"/>
                                    <Image x:Name="LogoPreview" Width="100" Height="100" Stretch="Uniform" Margin="5"/>
                                    <Button Content="Upload Logo" Click="UploadLogoButton_Click" Margin="5"/>
                                </StackPanel>

                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="5">
                                    <Button Content="Save Settings" Click="SaveSettingsButton_Click" Width="150" Margin="5"/>
                                    <Button Content="Load Settings" Click="LoadAllSettingsButton_Click" Width="150" Margin="5"/>
                                </StackPanel>

                            </StackPanel>
                        </GroupBox>

                        <GroupBox Header="Advanced Settings" Grid.Row="1">
                            <StackPanel Margin="5">
                                <ListView x:Name="SettingsList" Height="200" Margin="5">
                                    <ListView.View>
                                        <GridView>
                                            <GridViewColumn Header="Key" DisplayMemberBinding="{Binding Key}" Width="200"/>
                                            <GridViewColumn Header="Value" Width="200">
                                                <GridViewColumn.CellTemplate>
                                                    <DataTemplate>
                                                        <TextBox Text="{Binding Value}" Width="180"/>
                                                    </DataTemplate>
                                                </GridViewColumn.CellTemplate>
                                            </GridViewColumn>
                                        </GridView>
                                    </ListView.View>
                                </ListView>

                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <Button Content="Bulk Update" Click="BulkUpdateSettingsButton_Click" Width="120" Margin="5"/>
                                    <Button Content="Delete Setting" Click="DeleteSettingButton_Click" Width="120" Margin="5"/>
                                </StackPanel>
                            </StackPanel>
                        </GroupBox>
                    </Grid>
                </TabItem>
                <TabItem Header="Import/Export">
                    <Grid Margin="10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <GroupBox Header="Import and Export" Grid.Row="0" Margin="0,0,0,10">
                            <StackPanel Margin="5">

                                <TextBlock Text="Tools" FontWeight="Bold" Margin="5"/>
                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <Button Content="Import Tools" Command="{Binding ImportToolsCommand}" Width="150" Margin="5"/>
                                    <Button Content="Export Tools" Command="{Binding ExportToolsCommand}" Width="150" Margin="5"/>
                                </StackPanel>

                                <TextBlock Text="Customers" FontWeight="Bold" Margin="10,10,5,5"/>
                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <Button Content="Import Customers" Command="{Binding ImportCustomersCommand}" Width="150" Margin="5"/>
                                    <Button Content="Export Customers" Command="{Binding ExportCustomersCommand}" Width="150" Margin="5"/>
                                </StackPanel>

                                <TextBlock Text="Database" FontWeight="Bold" Margin="10,10,5,5"/>
                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <Button Content="Backup Database" Click="BackupDatabaseButton_Click" Width="150" Margin="5"/>
                                </StackPanel>

                            </StackPanel>
                        </GroupBox>
                    </Grid>
                </TabItem>

                <TabItem Header="Activity Logs">
                    <Grid Margin="10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="0,0,0,10">
                            <Button Content="Refresh Logs" Click="RefreshLogsButton_Click" Width="150" Margin="5"/>
                            <Button Content="Purge Logs" Click="PurgeLogsButton_Click" Width="150" Margin="5"/>
                        </StackPanel>

                        <ListView x:Name="ActivityLogsList" Grid.Row="1">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Log ID" DisplayMemberBinding="{Binding LogID}" Width="80"/>
                                    <GridViewColumn Header="User ID" DisplayMemberBinding="{Binding UserID}" Width="80"/>
                                    <GridViewColumn Header="User Name" DisplayMemberBinding="{Binding UserName}" Width="150"/>
                                    <GridViewColumn Header="Action" DisplayMemberBinding="{Binding Action}" Width="400"/>
                                    <GridViewColumn Header="Timestamp" Width="180">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Timestamp, StringFormat=\{0:yyyy-MM-dd HH:mm:ss\}}"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>

                <TabItem Header="Reports">
                    <Grid Margin="10">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <GroupBox Header="Print Reports" Grid.Row="0" Margin="0,0,0,10">
                            <StackPanel Margin="5">

                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <Button Content="Print Inventory Report" Click="PrintInventoryReport_Click" Width="200" Margin="5"/>
                                    <Button Content="Print Active Rentals" Click="PrintActiveRentalsReport_Click" Width="200" Margin="5"/>
                                    <Button Content="Print Full Rental History" Click="PrintFullRentalReport_Click" Width="200" Margin="5"/>
                                    <Button Content="Print Rental Report" Click="PrintRentalReport_Click" Width="200" Margin="5"/>
                                </StackPanel>

                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <Button Content="Print Activity Log" Click="PrintActivityLogReport_Click" Width="200" Margin="5"/>
                                    <Button Content="Print Customer Report" Click="PrintCustomerReport_Click" Width="200" Margin="5"/>
                                    <Button Content="Print User Report" Click="PrintUserReport_Click" Width="200" Margin="5"/>
                                </StackPanel>

                                <StackPanel Orientation="Horizontal" Margin="5">
                                    <Button Content="Print Summary Report" Click="PrintSummaryReport_Click" Width="200" Margin="5"/>
                                </StackPanel>

                            </StackPanel>
                        </GroupBox>
                    </Grid>
                </TabItem>


            </TabControl>

            <!-- Status Bar -->
            <StatusBar Grid.Row="1" Height="25" Background="LightGray">
                <StatusBarItem Content="Ready" />
            </StatusBar>
        </Grid>
    </DockPanel>
</Window>


// File: ToolManagementAppV2\MainWindow.xaml.cs
// Lines: 737, Size: 27606 bytes
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Linq;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Services.Rentals;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Services.Tools;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Interfaces;
using ToolManagementAppV2.ViewModels;
using ToolManagementAppV2.Views;
using ToolManagementAppV2.Utilities.Helpers;

namespace ToolManagementAppV2
{
    public partial class MainWindow : Window
    {
        readonly DatabaseService _db;
        readonly IToolService _toolService;
        readonly ICustomerService _customerService;
        readonly IRentalService _rentalService;
        readonly IUserService _userService;
        readonly ISettingsService _settingsService;
        readonly ActivityLogService _activityLogService;
        readonly ReportService _reportService;
        readonly Printer _printer;

        public MainWindow()
        {
            InitializeComponent();

            _db = new DatabaseService(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "tool_inventory.db"));
            _toolService = new ToolService(_db);
            _customerService = new CustomerService(_db);
            _rentalService = new RentalService(_db);
            _userService = new UserService(_db);
            _settingsService = new SettingsService(_db);
            _activityLogService = new ActivityLogService(_db);
            _printer = new Printer(_settingsService);
            _reportService = new ReportService(_toolService, _rentalService, _activityLogService, _customerService, _userService);

            DataContext = new MainViewModel(_toolService, _userService, _customerService, _rentalService, _settingsService);

            try
            {
                ((MainViewModel)DataContext).LoadTools();
                RefreshUserList();
                RefreshCustomerList();
                RefreshRentalList();
                LoadSettings();
            }
            catch (Exception ex)
            {
                ShowError("Initialization Error", ex);
            }

            RestrictTabsForNonAdmin();
        }

        void RestrictTabsForNonAdmin()
        {
            if (App.Current.Properties["CurrentUser"] is User u && !u.IsAdmin)
            {
                var forbidden = new[] { "Tool Management", "Users", "Settings", "Import/Export" };
                foreach (TabItem tab in MyTabControl.Items.Cast<TabItem>().Where(t => forbidden.Contains(t.Header.ToString())).ToList())
                    MyTabControl.Items.Remove(tab);
            }
        }

        // ---------- Printing ----------
        void PrintInventoryReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateInventoryReport(), "Inventory Report");

        void PrintRentalReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateRentalReport(false), "Rental Report");

        void PrintActiveRentalsReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateRentalReport(true), "Active Rentals Report");

        void PrintActivityLogReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateActivityLogReport(), "Activity Log Report");

        void PrintCustomerReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateCustomerReport(), "Customer Report");

        void PrintUserReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateUserReport(), "User Report");

        void PrintSummaryReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateSummaryReport(), "Summary Report");

        void PrintFullRentalReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateRentalReport(false), "Full Rental History Report");

        void PrintReport(FlowDocument doc, string title)
        {
            var dlg = new PrintDialog();
            if (dlg.ShowDialog() == true)
                dlg.PrintDocument(((IDocumentPaginatorSource)doc).DocumentPaginator, title);
        }

        // ---------- Tool Management ----------
        void CheckOutButton_Click(object s, RoutedEventArgs e)
        {
            if (!(s is Button btn && btn.CommandParameter is string id)) return;
            if (!(App.Current.Properties["CurrentUser"] is User cu))
            {
                ShowMessage("Error", "No current user found. Please log in again.", MessageBoxImage.Error);
                return;
            }
            _toolService.ToggleToolCheckOutStatus(id, cu.UserName);
            _activityLogService.LogAction(cu.UserID, cu.UserName, $"Toggled checkout for Tool ID: {id}");
            RefreshToolList();
        }



        void ChangeToolImage_Click(object s, RoutedEventArgs e)
        {
            if (!(ToolsList.SelectedItem is Tool t))
            {
                ShowMessage("Error", "Please select a tool first.", MessageBoxImage.Warning);
                return;
            }
            var dlg = new Microsoft.Win32.OpenFileDialog { Filter = "Image Files (*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg" };
            if (dlg.ShowDialog() != true) return;
            var destDir = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Images");
            Directory.CreateDirectory(destDir);
            var dest = Path.Combine(destDir, Path.GetFileName(dlg.FileName));
            var selectedPath = Path.GetFullPath(dlg.FileName);
            var destPath = Path.GetFullPath(dest);
            if (!string.Equals(selectedPath, destPath, StringComparison.OrdinalIgnoreCase))
            {
                File.Copy(selectedPath, destPath, true);
            }
            var relative = "Images/" + Path.GetFileName(destPath);
            _toolService.UpdateToolImage(t.ToolID, relative);
            ShowMessage("Success", "Tool image updated.", MessageBoxImage.Information);
            RefreshToolList();
        }




        // ---------- Customer & Rental ----------

        void CustomerList_SelectionChanged(object s, SelectionChangedEventArgs e)
        {
            if (DataContext is MainViewModel vm && CustomerList.SelectedItem is Customer c)
            {
                vm.SelectedCustomer = c;
                vm.NewCustomerName = c.Company;
                vm.NewCustomerEmail = c.Email;
                vm.NewCustomerContact = c.Contact;
                vm.NewCustomerPhone = c.Phone;
                vm.NewCustomerMobile = c.Mobile;
                vm.NewCustomerAddress = c.Address;
            }
        }


        // ---------- User Management ----------
        void NewUserButton_Click(object s, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm)
            {
                var u = new User { UserName = "New User", Password = "newpassword", IsAdmin = false };
                _userService.AddUser(u);
                vm.LoadUsers();
                RefreshUserList();
                vm.SelectedUser = vm.Users.FirstOrDefault(x => x.UserID == u.UserID) ?? vm.Users.First();
            }
        }

        void SaveUserButton_Click(object s, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm && vm.SelectedUser != null)
            {
                var u = vm.SelectedUser;

                if (!u.IsAdmin && vm.Users.Count(x => x.IsAdmin && x != u) == 0)
                {
                    ShowMessage("Save Failed", "At least one admin user must remain.", MessageBoxImage.Warning);
                    u.IsAdmin = true;
                    return;
                }

                if (u.UserID > 0) _userService.UpdateUser(u);
                else _userService.AddUser(u);

                var id = u.UserID;
                vm.LoadUsers();
                vm.SelectedUser = vm.Users.FirstOrDefault(x => x.UserID == id) ?? vm.Users.First();
                if (App.Current.Properties["CurrentUser"] is User cu && cu.UserID == u.UserID)
                {
                    cu.UserName = u.UserName;
                    vm.CurrentUserName = u.UserName;
                    vm.CurrentUserPhoto = u.PhotoBitmap;
                    App.Current.Properties["CurrentUser"] = cu;
                }
                ShowMessage("Success", "User saved.", MessageBoxImage.Information);
            }
        }

        void DeleteUserButton_Click(object s, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm && vm.SelectedUser is User u)
            {
                if (App.Current.Properties["CurrentUser"] is User cu && cu.UserID == u.UserID)
                {
                    ShowMessage("Deletion Not Allowed", "You cannot delete your own account.", MessageBoxImage.Warning);
                    return;
                }

                if (!_userService.DeleteUser(u.UserID))
                {
                    ShowMessage("Deletion Not Allowed", "At least one admin user must remain.", MessageBoxImage.Warning);
                    return;
                }

                vm.LoadUsers();
                RefreshUserList();
                vm.SelectedUser = vm.Users.FirstOrDefault();
            }
        }



        void ApplyAvatar(User u, string path)
        {
            var baseDir = AppDomain.CurrentDomain.BaseDirectory;
            string finalPath;

            if (path.Contains("Resources\\Avatars") || path.Contains("Resources/Avatars"))
            {
                finalPath = $"Resources/Avatars/{Path.GetFileName(path)}";
            }
            else
            {
                var destDir = Path.Combine(baseDir, "UserPhotos");
                Directory.CreateDirectory(destDir);
                var destFile = Path.Combine(destDir, $"{Guid.NewGuid()}{Path.GetExtension(path)}");
                File.Copy(path, destFile, true);
                finalPath = $"UserPhotos/{Path.GetFileName(destFile)}";
            }

            var bmp = new BitmapImage();
            bmp.BeginInit();
            bmp.CacheOption = BitmapCacheOption.OnLoad;
            bmp.UriSource = new Uri($"file:///{Path.Combine(baseDir, finalPath).Replace("\\", "/")}");
            bmp.EndInit();

            u.UserPhotoPath = finalPath;
            u.PhotoBitmap = bmp;
            _userService.UpdateUser(u);

            if (App.Current.Properties["CurrentUser"] is User cu && cu.UserID == u.UserID)
                (DataContext as MainViewModel).CurrentUserPhoto = bmp;

            RefreshUserList();
        }


        void PasswordBox_PasswordChanged(object s, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm && vm.SelectedUser is User u)
            {
                var pwd = ((PasswordBox)s).Password;
                vm.UserPassword = pwd;
                u.Password = pwd;
            }
        }

        void RefreshUserList()
        {
            try
            {
                if (DataContext is MainViewModel vm)
                    vm.LoadUsers();
            }
            catch (Exception ex)
            {
                ShowError("Error loading users", ex);
            }
        }


        void LogoutButton_Click(object s, RoutedEventArgs e)
        {
            var current = _userService.GetCurrentUser();
            if (current == null)
            {
                ShowMessage("Logout", "No user logged in.", MessageBoxImage.Warning);
                RestartToLogin();
                return;
            }
            _activityLogService.LogAction(current.UserID, current.UserName, "User logged out");
            Application.Current.ShutdownMode = ShutdownMode.OnExplicitShutdown;
            Hide();
            if (new LoginWindow().ShowDialog() == true)
            {
                Application.Current.ShutdownMode = ShutdownMode.OnMainWindowClose;
                var mw = new MainWindow();
                Application.Current.MainWindow = mw;
                mw.Show();
            }
            else Application.Current.Shutdown();
            Close();
        }

        void RestartToLogin()
        {
            Application.Current.ShutdownMode = ShutdownMode.OnMainWindowClose;
            var login = new LoginWindow();
            if (login.ShowDialog() == true) new MainWindow().Show();
            else Application.Current.Shutdown();
            Close();
        }

        // ---------- Settings & Import/Export ----------
        void SaveSettingsButton_Click(object s, RoutedEventArgs e)
        {
            if (!int.TryParse(RentalDurationInput.Text, out var days))
            {
                ShowMessage("Error", "Invalid rental duration.", MessageBoxImage.Error);
                return;
            }
            _settingsService.SaveSetting("DefaultRentalDuration", days.ToString());

            var app = ApplicationNameInput.Text.Trim();
            if (!string.IsNullOrEmpty(app))
            {
                _settingsService.SaveSetting("ApplicationName", app);
                Title = app;
                HeaderTitle.Text = app;
            }
            ShowMessage("Success", "Settings saved.", MessageBoxImage.Information);
        }

        void UploadLogoButton_Click(object s, RoutedEventArgs e)
        {
            var dlg = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Image Files (*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg",
                Title = "Select Company Logo"
            };
            if (dlg.ShowDialog() != true) return;

            var destDir = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Images");
            Directory.CreateDirectory(destDir);
            var destFile = Path.Combine(destDir, "CompanyLogo" + Path.GetExtension(dlg.FileName));

            File.Copy(dlg.FileName, destFile, true);

            BitmapImage bmp = new BitmapImage();
            using (var stream = new FileStream(destFile, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                bmp.BeginInit();
                bmp.CacheOption = BitmapCacheOption.OnLoad;
                bmp.StreamSource = stream;
                bmp.EndInit();
                bmp.Freeze();
            }

            LogoPreview.Source = bmp;
            _settingsService.SaveSetting("CompanyLogoPath", "Images/" + Path.GetFileName(destFile));
            UpdateHeaderLogo();
        }

        void LoadAllSettingsButton_Click(object s, RoutedEventArgs e)
        {
            try
            {
                var dict = _settingsService.GetAllSettings();
                var list = dict.Select(kv => new SettingItem { Key = kv.Key, Value = kv.Value }).ToList();
                SettingsList.ItemsSource = list;
            }
            catch (Exception ex)
            {
                ShowError("Error loading settings", ex);
            }
        }

        void BulkUpdateSettingsButton_Click(object s, RoutedEventArgs e)
        {
            if (SettingsList.ItemsSource is IEnumerable<SettingItem> list)
            {
                try
                {
                    var dict = list.ToDictionary(i => i.Key, i => i.Value);
                    _settingsService.UpdateSettings(dict);
                    ShowMessage("Success", "Settings updated.", MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    ShowError("Error updating settings", ex);
                }
            }
        }

        void DeleteSettingButton_Click(object s, RoutedEventArgs e)
        {
            if (SettingsList.SelectedItem is SettingItem item)
            {
                try
                {
                    _settingsService.DeleteSetting(item.Key);
                    LoadAllSettingsButton_Click(s, e);
                }
                catch (Exception ex)
                {
                    ShowError("Error deleting setting", ex);
                }
            }
        }

        void RefreshToolList()
        {
            try
            {
                if (DataContext is MainViewModel vm)

                {
                    vm.LoadTools();
                    vm.SearchCommand.Execute(null);
                }

            }
            catch (Exception ex)
            {
                ShowError("Error loading tools", ex);
            }
        }


        void RefreshCustomerList()
        {
            try
            {
                if (DataContext is MainViewModel vm)
                    vm.LoadCustomers();
            }
            catch (Exception ex)
            {
                ShowError("Error loading customers", ex);
            }
        }

        void RefreshRentalList()
        {
            try
            {
                if (DataContext is MainViewModel vm)
                    vm.LoadActiveRentals();
            }
            catch (Exception ex)
            {
                ShowError("Error loading rentals", ex);
            }
        }

        void SearchInput_TextChanged(object s, TextChangedEventArgs e)
        {
            try
            {
                if (DataContext is MainViewModel vm)
                {
                    vm.SearchTerm = SearchInput.Text;
                    vm.SearchCommand.Execute(null);
                }
            }
            catch (Exception ex)
            {
                ShowError("Error performing search", ex);
            }
        }

        void CustomerSearchInput_TextChanged(object s, TextChangedEventArgs e)
        {
            try
            {
                var txt = CustomerSearchInput.Text;
                if (DataContext is MainViewModel vm)
                {
                    vm.CustomerSearchTerm = txt;
                    vm.SearchCustomersCommand.Execute(null);
                }
            }
            catch (Exception ex)
            {
                ShowError("Error performing customer search", ex);
            }
        }

        void UpdateHeaderLogo()
        {
            try
            {
                var logoPath = _settingsService.GetSetting("CompanyLogoPath");
                BitmapImage bmp = null;

                if (!string.IsNullOrWhiteSpace(logoPath))
                {
                    var fullPath = Utilities.Helpers.PathHelper.GetAbsolutePath(logoPath);
                    if (!string.IsNullOrEmpty(fullPath) && File.Exists(fullPath))
                    {
                        using (var stream = new FileStream(fullPath, FileMode.Open, FileAccess.Read, FileShare.Read))
                        {
                            bmp = new BitmapImage();
                            bmp.BeginInit();
                            bmp.CacheOption = BitmapCacheOption.OnLoad;
                            bmp.StreamSource = stream;
                            bmp.EndInit();
                            bmp.Freeze();
                        }
                    }
                }

                if (bmp == null)
                {
                    bmp = new BitmapImage(new Uri("pack://application:,,,/Resources/DefaultLogo.png"));
                }

                HeaderIcon.Source = bmp;
            }
            catch
            {
                HeaderIcon.Source = new BitmapImage(new Uri("pack://application:,,,/Resources/DefaultLogo.png"));
            }
        }



        void LoadSettings()
        {
            try
            {
                var logoPath = _settingsService.GetSetting("CompanyLogoPath");
                BitmapImage bmp = null;

                if (!string.IsNullOrWhiteSpace(logoPath))
                {
                    var fullPath = Utilities.Helpers.PathHelper.GetAbsolutePath(logoPath);
                    if (!string.IsNullOrEmpty(fullPath) && File.Exists(fullPath))
                    {
                        using (var stream = new FileStream(fullPath, FileMode.Open, FileAccess.Read, FileShare.Read))
                        {
                            bmp = new BitmapImage();
                            bmp.BeginInit();
                            bmp.CacheOption = BitmapCacheOption.OnLoad;
                            bmp.StreamSource = stream;
                            bmp.EndInit();
                            bmp.Freeze();
                        }
                    }
                }

                if (bmp == null)
                {
                    bmp = new BitmapImage(new Uri("pack://application:,,,/Resources/DefaultLogo.png"));
                }

                LogoPreview.Source = bmp;
                HeaderIcon.Source = bmp;

                var app = _settingsService.GetSetting("ApplicationName");
                if (!string.IsNullOrWhiteSpace(app))
                {
                    Title = app;
                    HeaderTitle.Text = app;
                    ApplicationNameInput.Text = app;
                }
            }
            catch (Exception ex)
            {
                ShowError("Settings Error", ex);
            }
        }



        void PrintRentalReceipt_Click(object s, RoutedEventArgs e)
        {
            if (!(RentalsList.SelectedItem is Rental r))
            {
                ShowMessage("Error", "No rental selected.", MessageBoxImage.Warning);
                return;
            }
            var doc = new FlowDocument { FontFamily = new FontFamily("Segoe UI"), FontSize = 12 };
            var header = new Paragraph(new Run("Rental Receipt"))
            {
                FontSize = 16,
                FontWeight = FontWeights.Bold,
                TextAlignment = TextAlignment.Center
            };
            doc.Blocks.Add(header);

            var details = new Paragraph();
            void AddLine(string text) => details.Inlines.Add(new Run(text + "\n"));
            AddLine($"Rental ID: {r.RentalID}");
            AddLine($"Tool ID: {r.ToolID}");
            AddLine($"Customer ID: {r.CustomerID}");
            AddLine($"Rental Date: {r.RentalDate:yyyy-MM-dd}");
            AddLine($"Due Date: {r.DueDate:yyyy-MM-dd}");
            if (r.ReturnDate.HasValue)
                AddLine($"Return Date: {r.ReturnDate:yyyy-MM-dd}");
            doc.Blocks.Add(details);

            var dlg = new PrintDialog();
            if (dlg.ShowDialog() == true)
                dlg.PrintDocument(((IDocumentPaginatorSource)doc).DocumentPaginator, "Rental Receipt");
        }

        void BackupDatabaseButton_Click(object s, RoutedEventArgs e)
        {
            var dlg = new Microsoft.Win32.SaveFileDialog
            {
                Filter = "SQLite Database (*.db)|*.db",
                Title = "Select Backup Location",
                FileName = "tool_inventory_backup.db"
            };
            if (dlg.ShowDialog() != true) return;
            try
            {
                _db.BackupDatabase(dlg.FileName);
                ShowMessage("Success", "Backup completed.", MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                ShowError("Error backing up database", ex);
            }
        }

        void RefreshLogsButton_Click(object s, RoutedEventArgs e)
        {
            try
            {
                ActivityLogsList.ItemsSource = _activityLogService.GetRecentLogs(100);
            }
            catch (Exception ex)
            {
                ShowError("Error retrieving logs", ex);
            }
        }

        void PurgeLogsButton_Click(object s, RoutedEventArgs e)
        {
            if (MessageBox.Show("Purge logs older than 30 days?", "Confirm", MessageBoxButton.YesNo, MessageBoxImage.Question) != MessageBoxResult.Yes)
                return;
            try
            {
                _activityLogService.PurgeOldLogs(DateTime.Now.AddDays(-30));
                ShowMessage("Success", "Old logs purged.", MessageBoxImage.Information);
                RefreshLogsButton_Click(s, e);
            }
            catch (Exception ex)
            {
                ShowError("Error purging logs", ex);
            }
        }

        void PrintSearchResults_Click(object s, RoutedEventArgs e)
        {
            var tools = (SearchResultsList.ItemsSource as IEnumerable<Tool>) ?? SearchResultsList.Items.OfType<Tool>();
            if (!tools.Any())
            {
                ShowMessage("Print Search Results", "No items to print.", MessageBoxImage.Information);
                return;
            }
            _printer.PrintTools(tools, "Search Results");
        }

        void PrintMyCheckedOutTools_Click(object s, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm)
                _printer.PrintTools(vm.CheckedOutTools, "My Checked-Out Tools", vm.CurrentUserName);
        }

        void MyTabControl_SelectionChanged(object s, SelectionChangedEventArgs e)
        {
            // Only respond when the tab selection actually changes.
            // The SelectionChanged event bubbles from child controls like
            // the ListView inside each tab which caused the tab refresh
            // logic to run whenever an item was selected. This cleared the
            // current selection such as user details.
            if (!ReferenceEquals(e.OriginalSource, MyTabControl))
                return;

            if (!(MyTabControl.SelectedItem is TabItem tab))
                return;

            switch (tab.Header)
            {
                case "Search Tools":
                case "Tool Management":
                    if (DataContext is MainViewModel vm)
                    {
                        vm.LoadTools();
                        vm.SearchCommand.Execute(null);
                    }
                    break;
                case "Customers":
                    RefreshCustomerList();
                    break;
                case "Rentals":
                    RefreshRentalList();
                    break;
                case "Users":
                    RefreshUserList();
                    break;
                case "Settings":
                    LoadSettings();
                    break;
                case "Activity Logs":
                    RefreshLogsButton_Click(s, e);
                    break;
            }
        }

        // ---------- Helpers ----------
        void ShowMessage(string title, string msg, MessageBoxImage icon)
            => MessageBox.Show(msg, title, MessageBoxButton.OK, icon);

        void ShowError(string title, Exception ex)
        {
            Console.WriteLine(ex);
            MessageBox.Show(ex.Message, title, MessageBoxButton.OK, MessageBoxImage.Error);
        }
    }
}


// File: ToolManagementAppV2\Models\Domain\ActivityLog.cs
// Lines: 43, Size: 1042 bytes
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.Models.Domain
{
    public class ActivityLog : ObservableObject
    {
        private int _logID;
        public int LogID
        {
            get => _logID;
            set => SetProperty(ref _logID, value);
        }

        private int _userID;
        public int UserID
        {
            get => _userID;
            set => SetProperty(ref _userID, value);
        }

        private string _userName = string.Empty;
        public string UserName
        {
            get => _userName;
            set => SetProperty(ref _userName, value);
        }

        private string _action = string.Empty;
        public string Action
        {
            get => _action;
            set => SetProperty(ref _action, value);
        }

        private DateTime _timestamp;
        public DateTime Timestamp
        {
            get => _timestamp;
            set => SetProperty(ref _timestamp, value);
        }
    }
}


// File: ToolManagementAppV2\Models\Domain\Customer.cs
// Lines: 57, Size: 1443 bytes
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.Models.Domain
{
    public class Customer : ObservableObject
    {
        private int _customerID;
        public int CustomerID
        {
            get => _customerID;
            set => SetProperty(ref _customerID, value);
        }

        private string _company = string.Empty;
        public string Company
        {
            get => _company;
            set => SetProperty(ref _company, value);
        }

        private string _contact = string.Empty;
        public string Contact
        {
            get => _contact;
            set => SetProperty(ref _contact, value);
        }

        private string _email = string.Empty;
        public string Email
        {
            get => _email;
            set => SetProperty(ref _email, value);
        }

        private string _phone = string.Empty;
        public string Phone
        {
            get => _phone;
            set => SetProperty(ref _phone, value);
        }

        private string _mobile = string.Empty;
        public string Mobile
        {
            get => _mobile;
            set => SetProperty(ref _mobile, value);
        }

        private string _address = string.Empty;
        public string Address
        {
            get => _address;
            set => SetProperty(ref _address, value);
        }
    }
}


// File: ToolManagementAppV2\Models\Domain\Rental.cs
// Lines: 57, Size: 1416 bytes
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.Models.Domain
{
    public class Rental : ObservableObject
    {
        private int _rentalID;
        public int RentalID
        {
            get => _rentalID;
            set => SetProperty(ref _rentalID, value);
        }

        private string _toolID = string.Empty;
        public string ToolID
        {
            get => _toolID;
            set => SetProperty(ref _toolID, value);
        }

        private int _customerID;
        public int CustomerID
        {
            get => _customerID;
            set => SetProperty(ref _customerID, value);
        }

        private DateTime _rentalDate;
        public DateTime RentalDate
        {
            get => _rentalDate;
            set => SetProperty(ref _rentalDate, value);
        }

        private DateTime _dueDate;
        public DateTime DueDate
        {
            get => _dueDate;
            set => SetProperty(ref _dueDate, value);
        }

        private DateTime? _returnDate;
        public DateTime? ReturnDate
        {
            get => _returnDate;
            set => SetProperty(ref _returnDate, value);
        }

        private string? _status;
        public string? Status
        {
            get => _status;
            set => SetProperty(ref _status, value);
        }
    }
}


// File: ToolManagementAppV2\Models\Domain\SettingItem.cs
// Lines: 14, Size: 393 bytes
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.Models.Domain
{
    public class SettingItem : ObservableObject
    {
        private string _key;
        public string Key { get => _key; set => SetProperty(ref _key, value); }

        private string _value;
        public string Value { get => _value; set => SetProperty(ref _value, value); }
    }
}


// File: ToolManagementAppV2\Models\Domain\Tool.cs
// Lines: 136, Size: 3729 bytes
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.Models.Domain
{
    public class Tool : ObservableObject
    {
        private string _toolID = string.Empty;
        public string ToolID
        {
            get => _toolID;
            set => SetProperty(ref _toolID, value);
        }

        private string _toolNumber = string.Empty;
        public string ToolNumber
        {
            get => _toolNumber;
            set => SetProperty(ref _toolNumber, value);
        }

        private string _partNumber = string.Empty;
        public string PartNumber
        {
            get => _partNumber;
            set => SetProperty(ref _partNumber, value);
        }

        private string _nameDescription = string.Empty;
        public string NameDescription
        {
            get => _nameDescription;
            set => SetProperty(ref _nameDescription, value);
        }

        private string _brand = string.Empty;
        public string Brand
        {
            get => _brand;
            set => SetProperty(ref _brand, value);
        }

        private string _location = string.Empty;
        public string Location
        {
            get => _location;
            set => SetProperty(ref _location, value);
        }

        private int _quantityOnHand;
        public int QuantityOnHand
        {
            get => _quantityOnHand;
            set
            {
                if (SetProperty(ref _quantityOnHand, value))
                {
                    OnPropertyChanged(nameof(OnHand));
                }
            }
        }

        private int _rentedQuantity;
        public int RentedQuantity
        {
            get => _rentedQuantity;
            set => SetProperty(ref _rentedQuantity, value);
        }

        private string _supplier = string.Empty;
        public string Supplier
        {
            get => _supplier;
            set => SetProperty(ref _supplier, value);
        }

        private DateTime? _purchasedDate;
        public DateTime? PurchasedDate
        {
            get => _purchasedDate;
            set
            {
                if (SetProperty(ref _purchasedDate, value))
                {
                    OnPropertyChanged(nameof(Purchased));
                }
            }
        }

        private string _notes = string.Empty;
        public string Notes
        {
            get => _notes;
            set => SetProperty(ref _notes, value);
        }

        private string _keywords = string.Empty;
        public string Keywords
        {
            get => _keywords;
            set => SetProperty(ref _keywords, value);
        }

        private bool _isCheckedOut;
        public bool IsCheckedOut
        {
            get => _isCheckedOut;
            set => SetProperty(ref _isCheckedOut, value);
        }

        private string _checkedOutBy = string.Empty;
        public string CheckedOutBy
        {
            get => _checkedOutBy;
            set => SetProperty(ref _checkedOutBy, value);
        }

        private DateTime? _checkedOutTime;
        public DateTime? CheckedOutTime
        {
            get => _checkedOutTime;
            set => SetProperty(ref _checkedOutTime, value);
        }

        private string _toolImagePath = string.Empty;
        public string ToolImagePath
        {
            get => _toolImagePath;
            set => SetProperty(ref _toolImagePath, value);
        }

        public int OnHand => QuantityOnHand;

        public string Purchased => PurchasedDate?.ToString("yyyy-MM-dd") ?? string.Empty;
    }
}


// File: ToolManagementAppV2\Models\Domain\User.cs
// Lines: 42, Size: 1623 bytes
using CommunityToolkit.Mvvm.ComponentModel;
using System.Windows.Media.Imaging;

namespace ToolManagementAppV2.Models.Domain
{
    public class User : ObservableObject
    {
        private int _userID;
        public int UserID { get => _userID; set => SetProperty(ref _userID, value); }

        private string _userName;
        public string UserName { get => _userName; set => SetProperty(ref _userName, value); }

        private string _password;
        public string Password { get => _password; set => SetProperty(ref _password, value); }

        private string _userPhotoPath;
        public string UserPhotoPath { get => _userPhotoPath; set => SetProperty(ref _userPhotoPath, value); }

        private bool _isAdmin;
        public bool IsAdmin { get => _isAdmin; set => SetProperty(ref _isAdmin, value); }

        private BitmapImage _photoBitmap;
        public BitmapImage PhotoBitmap { get => _photoBitmap; set => SetProperty(ref _photoBitmap, value); }

        private string _email;
        public string Email { get => _email; set => SetProperty(ref _email, value); }

        private string _phone;
        public string Phone { get => _phone; set => SetProperty(ref _phone, value); }

        private string _mobile;
        public string Mobile { get => _mobile; set => SetProperty(ref _mobile, value); }

        private string _address;
        public string Address { get => _address; set => SetProperty(ref _address, value); }

        private string _role;
        public string Role { get => _role; set => SetProperty(ref _role, value); }
    }
}


// File: ToolManagementAppV2\Models\DTOs\CustomerImportDto.cs
// Lines: 13, Size: 375 bytes
namespace ToolManagementAppV2.Models.ImportExport
{
    public class CustomerImportDto
    {
        public string Company { get; set; }
        public string Email { get; set; }
        public string Contact { get; set; }
        public string Phone { get; set; }
        public string Mobile { get; set; }
        public string Address { get; set; }
    }
}


// File: ToolManagementAppV2\Models\DTOs\ToolImportDto.cs
// Lines: 18, Size: 634 bytes
namespace ToolManagementAppV2.Models.ImportExport
{
    public class ToolImportDto
    {
        public string ToolNumber { get; set; }
        public string NameDescription { get; set; }
        public string Location { get; set; }
        public string Brand { get; set; }
        public string PartNumber { get; set; }
        public string Supplier { get; set; }
        public DateTime? PurchasedDate { get; set; }
        public string Notes { get; set; }
        public string Keywords { get; set; }
        public int AvailableQuantity { get; set; }
        public int RentedQuantity { get; set; }
    }
}


// File: ToolManagementAppV2\Models\ModelAliases.cs
// Lines: 5, Size: 279 bytes
global using ToolModel = ToolManagementAppV2.Models.Domain.Tool;
global using UserModel = ToolManagementAppV2.Models.Domain.User;
global using CustomerModel = ToolManagementAppV2.Models.Domain.Customer;
global using RentalModel = ToolManagementAppV2.Models.Domain.Rental;


// File: ToolManagementAppV2\Resources\Styles.xaml
// Lines: 11, Size: 427 bytes
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Style TargetType="Button">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Padding" Value="10,4"/>
    </Style>
    <Style TargetType="TextBox">
        <Setter Property="Margin" Value="5"/>
    </Style>
</ResourceDictionary>


// File: ToolManagementAppV2\Services\Core\CsvHelper.cs
// Lines: 142, Size: 5662 bytes
using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.VisualBasic.FileIO;
using System.Linq;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Models.ImportExport;

namespace ToolManagementAppV2.Utilities.IO
{
    public static class CsvHelperUtil
    {
        public static List<ToolModel> LoadToolsFromCsv(string filePath, IDictionary<string, string> map, out List<int> invalidRows)
        {
            var list = new List<ToolModel>();
            invalidRows = new List<int>();
            using var parser = new TextFieldParser(filePath);
            parser.SetDelimiters(",");
            parser.HasFieldsEnclosedInQuotes = true;

            if (parser.EndOfData) return list;
            var headers = parser.ReadFields();

            var row = 1; // header already read
            while (!parser.EndOfData)
            {
                row++;
                var cols = parser.ReadFields();
                var toolNumber = GetMapped(cols, headers, map, "ToolNumber");
                if (string.IsNullOrWhiteSpace(toolNumber))
                {
                    invalidRows.Add(row);
                    continue;
                }

                list.Add(new ToolModel
                {
                    ToolNumber = toolNumber,
                    NameDescription = GetMapped(cols, headers, map, "NameDescription"),
                    Location = GetMapped(cols, headers, map, "Location"),
                    Brand = GetMapped(cols, headers, map, "Brand"),
                    PartNumber = GetMapped(cols, headers, map, "PartNumber"),
                    Supplier = GetMapped(cols, headers, map, "Supplier"),
                    PurchasedDate = TryParseDate(GetMapped(cols, headers, map, "PurchasedDate")),
                    Notes = GetMapped(cols, headers, map, "Notes"),
                    QuantityOnHand = TryParseInt(GetMapped(cols, headers, map, "AvailableQuantity"))
                });
            }

            return list;
        }

        public static void ExportToolsToCsv(string filePath, List<ToolModel> tools)
        {
            var lines = new List<string>
            {
                "ToolNumber,NameDescription,Location,Brand,PartNumber,Supplier,PurchasedDate,Notes,AvailableQuantity"
            };
            lines.AddRange(tools.Select(t =>
                string.Join(",",
                    Quote(t.ToolNumber),
                    Quote(t.NameDescription),
                    Quote(t.Location),
                    Quote(t.Brand),
                    Quote(t.PartNumber),
                    Quote(t.Supplier),
                    Quote(t.PurchasedDate?.ToString("yyyy-MM-dd")),
                    Quote(t.Notes),
                    Quote(t.QuantityOnHand.ToString()))));
            File.WriteAllLines(filePath, lines);
        }

        public static List<CustomerModel> LoadCustomersFromCsv(string filePath, IDictionary<string, string> map)
        {
            var list = new List<CustomerModel>();
            using var parser = new TextFieldParser(filePath);
            parser.SetDelimiters(",");
            parser.HasFieldsEnclosedInQuotes = true;

            if (parser.EndOfData) return list;
            var headers = parser.ReadFields();

            while (!parser.EndOfData)
            {
                var cols = parser.ReadFields();
                list.Add(new CustomerModel
                {
                    Company = GetMapped(cols, headers, map, "Company"),
                    Email = GetMapped(cols, headers, map, "Email"),
                    Contact = GetMapped(cols, headers, map, "Contact"),
                    Phone = GetMapped(cols, headers, map, "Phone"),
                    Mobile = GetMapped(cols, headers, map, "Mobile"),
                    Address = GetMapped(cols, headers, map, "Address")
                });
            }

            return list;
        }


        public static void ExportCustomersToCsv(string filePath, List<CustomerModel> customers)
        {
            var lines = new List<string>
            {
                "Company,Email,Contact,Phone,Mobile,Address"
            };
            lines.AddRange(customers.Select(c =>
                string.Join(",",
                    Quote(c.Company),
                    Quote(c.Email),
                    Quote(c.Contact),
                    Quote(c.Phone),
                    Quote(c.Mobile),
                    Quote(c.Address))));
            File.WriteAllLines(filePath, lines);
        }

        private static string GetMapped(string[] row, string[] headers, IDictionary<string, string> map, string key)
        {
            if (!map.TryGetValue(key, out var column)) return null;
            var index = Array.FindIndex(headers,
                h => string.Equals(h, column, StringComparison.OrdinalIgnoreCase));
            return index >= 0 && index < row.Length ? row[index].Trim() : null;
        }

        private static int TryParseInt(string input) =>
            int.TryParse(input, out var result) ? result : 0;

        private static DateTime? TryParseDate(string input) =>
            DateTime.TryParse(input, out var result) ? result : null;
    

        private static string Quote(string value)
        {
            if (string.IsNullOrEmpty(value)) return string.Empty;
            if (value.Contains(",") || value.Contains("\"") || value.Contains("\n"))
                return $"\"{value.Replace("\"", "\"\"")}\"";
            return value;
        }
    }
}


// File: ToolManagementAppV2\Services\Core\DatabaseService.cs
// Lines: 137, Size: 5889 bytes
using System.Data.SQLite;
using System.IO;

namespace ToolManagementAppV2.Services.Core
{
    public class DatabaseService
    {
        public string ConnectionString { get; }

        public DatabaseService(string dbPath)
        {
            ConnectionString = $"Data Source={dbPath};Version=3;";
            InitializeDatabase();
            EnsureColumn("Tools", "ToolNumber", "TEXT");
            EnsureColumn("Tools", "NameDescription", "TEXT");
            EnsureColumn("Tools", "ToolImagePath", "TEXT");
            EnsureColumn("Tools", "CheckedOutBy", "TEXT");
            EnsureColumn("Tools", "CheckedOutTime", "DATETIME");
            EnsureColumn("Tools", "Keywords", "TEXT");
            EnsureColumn("Users", "Password", "TEXT");
            EnsureColumn("Users", "Email", "TEXT");
            EnsureColumn("Users", "Phone", "TEXT");
            EnsureColumn("Users", "Mobile", "TEXT");
            EnsureColumn("Users", "Address", "TEXT");
            EnsureColumn("Users", "Role", "TEXT");
        }

        void InitializeDatabase()
        {
            using var conn = new SQLiteConnection(ConnectionString);
            conn.Open();
            var sql = @"
                CREATE TABLE IF NOT EXISTS Tools (
                    ToolID INTEGER PRIMARY KEY AUTOINCREMENT,
                    ToolNumber TEXT NOT NULL,
                    NameDescription TEXT,
                    Location TEXT,
                    Brand TEXT,
                    PartNumber TEXT,
                    Supplier TEXT,
                    PurchasedDate DATETIME,
                    Notes TEXT,
                    AvailableQuantity INTEGER NOT NULL DEFAULT 0,
                    RentedQuantity INTEGER NOT NULL DEFAULT 0,
                    IsCheckedOut INTEGER NOT NULL DEFAULT 0,
                    CheckedOutBy TEXT,
                    CheckedOutTime DATETIME
                );
                CREATE TABLE IF NOT EXISTS Users (
                    UserID INTEGER PRIMARY KEY AUTOINCREMENT,
                    UserName TEXT NOT NULL,
                    UserPhotoPath TEXT,
                    IsAdmin INTEGER NOT NULL DEFAULT 0
                );
                CREATE TABLE IF NOT EXISTS Customers (
                    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,
                    Company TEXT NOT NULL,
                    Email TEXT,
                    Contact TEXT,
                    Phone TEXT,
                    Mobile TEXT,
                    Address TEXT
                );
                CREATE TABLE IF NOT EXISTS Rentals (
                    RentalID INTEGER PRIMARY KEY AUTOINCREMENT,
                    ToolID INTEGER NOT NULL,
                    CustomerID INTEGER NOT NULL,
                    RentalDate DATETIME NOT NULL,
                    DueDate DATETIME NOT NULL,
                    ReturnDate DATETIME,
                    Status TEXT NOT NULL DEFAULT 'Rented',
                    FOREIGN KEY (ToolID) REFERENCES Tools(ToolID),
                    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
                );
                CREATE TABLE IF NOT EXISTS ActivityLogs (
                    LogID INTEGER PRIMARY KEY AUTOINCREMENT,
                    UserID INTEGER,
                    UserName TEXT,
                    Action TEXT,
                    Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (UserID) REFERENCES Users(UserID)
                );
                CREATE TABLE IF NOT EXISTS Settings (
                    Key TEXT PRIMARY KEY,
                    Value TEXT
                );";
            using var cmd = new SQLiteCommand(sql, conn);
            cmd.ExecuteNonQuery();
        }

        void EnsureColumn(string table, string column, string type)
        {
            if (SqliteHelper.ColumnExists(ConnectionString, table, column)) return;
            using var conn = new SQLiteConnection(ConnectionString);
            conn.Open();
            using var alter = new SQLiteCommand($"ALTER TABLE {table} ADD COLUMN {column} {type}", conn);
            alter.ExecuteNonQuery();
        }

        /// <summary>
        /// Creates a backup of the current database using SQLite's backup API.
        /// </summary>
        /// <remarks>
        /// Ensure this method is called when no open transactions exist on the connection.
        /// </remarks>
        /// <param name="backupFilePath">Destination path for the backup file.</param>
        /// <exception cref="InvalidOperationException">Thrown when the database file path cannot be resolved.</exception>
        /// <exception cref="IOException">Thrown when the backup operation fails.</exception>
        public void BackupDatabase(string backupFilePath)
        {
            var dataSource = ConnectionString
                .Split(';')
                .FirstOrDefault(x => x.StartsWith("Data Source=", StringComparison.OrdinalIgnoreCase))
                ?.Substring("Data Source=".Length)
                .Trim();

            if (string.IsNullOrEmpty(dataSource) || !File.Exists(dataSource))
                throw new InvalidOperationException("Database file path could not be determined.");

            try
            {
                using var source = new SQLiteConnection(ConnectionString);
                using var destination = new SQLiteConnection($"Data Source={backupFilePath};Version=3;");
                source.Open();
                destination.Open();

                source.BackupDatabase(destination, "main", "main", -1, null, 0);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                throw new IOException("Failed to backup database.", ex);
            }
        }
    }
}


// File: ToolManagementAppV2\Services\Core\SqliteHelper.cs
// Lines: 61, Size: 2415 bytes
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;

namespace ToolManagementAppV2.Services.Core
{
    public static class SqliteHelper
    {
        public static int ExecuteNonQuery(string connStr, string sql, SQLiteParameter[] parameters = null)
        {
            using var conn = new SQLiteConnection(connStr);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);
            if (parameters != null) cmd.Parameters.AddRange(parameters);
            return cmd.ExecuteNonQuery();
        }

        public static int ExecuteNonQuery(SQLiteConnection conn, SQLiteTransaction tx, string sql, SQLiteParameter[] parameters)
        {
            using var cmd = new SQLiteCommand(sql, conn, tx);
            if (parameters != null) cmd.Parameters.AddRange(parameters);
            return cmd.ExecuteNonQuery();
        }

        public static object ExecuteScalar(string connStr, string sql, SQLiteParameter[] parameters = null)
        {
            using var conn = new SQLiteConnection(connStr);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);
            if (parameters != null) cmd.Parameters.AddRange(parameters);
            return cmd.ExecuteScalar();
        }

        public static List<T> ExecuteReader<T>(string connStr, string sql, SQLiteParameter[] parameters, Func<IDataRecord, T> map)
        {
            var list = new List<T>();
            using var conn = new SQLiteConnection(connStr);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);
            if (parameters != null) cmd.Parameters.AddRange(parameters);
            using var rdr = cmd.ExecuteReader();
            while (rdr.Read())
                list.Add(map(rdr));
            return list;
        }

        public static bool ColumnExists(string connStr, string table, string column)
        {
            using var conn = new SQLiteConnection(connStr);
            conn.Open();
            using var cmd = new SQLiteCommand($"PRAGMA table_info({table})", conn);
            using var rdr = cmd.ExecuteReader();
            while (rdr.Read())
                if (string.Equals(rdr["name"].ToString(), column, StringComparison.OrdinalIgnoreCase))
                    return true;
            return false;
        }
    }
}


// File: ToolManagementAppV2\Services\Customers\CustomerService.cs
// Lines: 138, Size: 5497 bytes
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.IO;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Utilities.IO;
using ToolManagementAppV2.Interfaces;

namespace ToolManagementAppV2.Services.Customers
{
    public class CustomerService : ICustomerService
    {
        readonly string _connString;

        public CustomerService(DatabaseService dbService)
        {
            _connString = dbService.ConnectionString;
        }

        public void ImportCustomersFromCsv(string filePath, IDictionary<string, string> map)
        {
            var customers = CsvHelperUtil.LoadCustomersFromCsv(filePath, map);
            foreach (var c in customers)
            {
                if (string.IsNullOrWhiteSpace(c.Company)) continue;
                if (string.IsNullOrWhiteSpace(c.Contact)) continue;
                if (string.IsNullOrWhiteSpace(c.Phone) && string.IsNullOrWhiteSpace(c.Mobile)) continue;

                if (!CustomerExists(c.Contact, c.Phone, c.Mobile))
                    AddCustomer(c);
            }
        }



        public void ExportCustomersToCsv(string filePath)
        {
            var all = GetAllCustomers();
            CsvHelperUtil.ExportCustomersToCsv(filePath, all);
        }

        public List<CustomerModel> GetAllCustomers()
        {
            const string sql = "SELECT * FROM Customers";
            return SqliteHelper.ExecuteReader(_connString, sql, null, MapCustomer);
        }

        public List<CustomerModel> SearchCustomers(string searchTerm)
        {
            const string sql = @"
                SELECT * FROM Customers
                WHERE Company LIKE @t OR Email LIKE @t OR Phone LIKE @t OR Mobile LIKE @t OR Address LIKE @t";
            var p = new[] { new SQLiteParameter("@t", $"%{searchTerm}%") };
            return SqliteHelper.ExecuteReader(_connString, sql, p, MapCustomer);
        }

        public CustomerModel GetCustomerByID(int customerID)
        {
            const string sql = "SELECT * FROM Customers WHERE CustomerID = @id";
            var p = new[] { new SQLiteParameter("@id", customerID) };
            return SqliteHelper.ExecuteReader(_connString, sql, p, MapCustomer).FirstOrDefault();
        }

        public void AddCustomer(CustomerModel customer)
        {
            const string sql = @"
        INSERT INTO Customers (Company, Email, Contact, Phone, Mobile, Address)
        VALUES (@Company, @Email, @Contact, @Phone, @Mobile, @Address)";
            var p = new[]
            {
                new SQLiteParameter("@Company", customer.Company ?? ""),
                new SQLiteParameter("@Email", customer.Email ?? ""),
                new SQLiteParameter("@Contact", customer.Contact ?? ""),
                new SQLiteParameter("@Phone", customer.Phone ?? ""),
                new SQLiteParameter("@Mobile", customer.Mobile ?? ""),
                new SQLiteParameter("@Address", customer.Address ?? "")
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }


        public void UpdateCustomer(CustomerModel customer)
        {
            const string sql = @"
                UPDATE Customers
                SET Company = @Company, Email = @Email, Contact = @Contact,
                    Phone = @Phone, Mobile = @Mobile, Address = @Address
                WHERE CustomerID = @CustomerID";
            var p = new[]
            {
                new SQLiteParameter("@Company", customer.Company),
                new SQLiteParameter("@Email", customer.Email),
                new SQLiteParameter("@Contact", customer.Contact),
                new SQLiteParameter("@Phone", customer.Phone),
                new SQLiteParameter("@Mobile", customer.Mobile),
                new SQLiteParameter("@Address", customer.Address),
                new SQLiteParameter("@CustomerID", customer.CustomerID)
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        public void DeleteCustomer(int customerID)
        {
            const string sql = "DELETE FROM Customers WHERE CustomerID = @CustomerID";
            var p = new[] { new SQLiteParameter("@CustomerID", customerID) };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        private bool CustomerExists(string contact, string phone, string mobile)
        {
            const string sql = @"
        SELECT COUNT(*) FROM Customers
         WHERE Contact = @Contact AND (Phone = @Phone OR Mobile = @Mobile)";
            var count = Convert.ToInt32(SqliteHelper.ExecuteScalar(_connString, sql, new[]
            {
            new SQLiteParameter("@Contact", contact),
            new SQLiteParameter("@Phone", phone ?? ""),
            new SQLiteParameter("@Mobile", mobile ?? "")
            }));
            return count > 0;
        }


        private CustomerModel MapCustomer(IDataRecord r) => new()
        {
            CustomerID = Convert.ToInt32(r["CustomerID"]),
            Company = r["Company"].ToString(),
            Email = r["Email"].ToString(),
            Contact = r["Contact"].ToString(),
            Phone = r["Phone"].ToString(),
            Mobile = r["Mobile"].ToString(),
            Address = r["Address"].ToString()
        };
    }
}


// File: ToolManagementAppV2\Services\Rentals\RentalService.cs
// Lines: 218, Size: 9342 bytes
using System.Data;
using System.Data.SQLite;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Interfaces;

namespace ToolManagementAppV2.Services.Rentals
{
    public class RentalService : IRentalService
    {
        readonly string _connString;

        public RentalService(DatabaseService dbService) =>
            _connString = dbService.ConnectionString;

        // toolID is passed as a string even though the underlying column is INTEGER
        // to keep consistency with ToolModel.ToolID
        public void RentTool(string toolID, int customerID, DateTime rentalDate, DateTime dueDate)
        {
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var tx = conn.BeginTransaction();

            try
            {
                var availCmd = new SQLiteCommand(
                    "SELECT AvailableQuantity FROM Tools WHERE ToolID=@ToolID",
                    conn, tx);
                availCmd.Parameters.AddWithValue("@ToolID", toolID);
                int avail = Convert.ToInt32(availCmd.ExecuteScalar() ?? 0);
                if (avail < 1)
                    throw new InvalidOperationException("Insufficient quantity.");

                SqliteHelper.ExecuteNonQuery(conn, tx,
                    "INSERT INTO Rentals (ToolID, CustomerID, RentalDate, DueDate, Status) " +
                    "VALUES (@ToolID, @CustomerID, @RentalDate, @DueDate, 'Rented')",
                    new[]
                    {
                        new SQLiteParameter("@ToolID", toolID),
                        new SQLiteParameter("@CustomerID", customerID),
                        new SQLiteParameter("@RentalDate", rentalDate),
                        new SQLiteParameter("@DueDate", dueDate)
                    });

                SqliteHelper.ExecuteNonQuery(conn, tx,
                    "UPDATE Tools SET AvailableQuantity = AvailableQuantity - 1, " +
                    "RentedQuantity = RentedQuantity + 1 WHERE ToolID = @ToolID",
                    new[] { new SQLiteParameter("@ToolID", toolID) });

                tx.Commit();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                tx.Rollback();
                return;
            }
        }

        public void RentToolWithTransaction(string toolID, int customerID, DateTime rentalDate, DateTime dueDate)
        {
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var tx = conn.BeginTransaction();
            try
            {
                var availCmd = new SQLiteCommand(
                    "SELECT AvailableQuantity FROM Tools WHERE ToolID=@ToolID", conn, tx);
                availCmd.Parameters.AddWithValue("@ToolID", toolID);
                int avail = Convert.ToInt32(availCmd.ExecuteScalar() ?? 0);
                if (avail < 1) throw new InvalidOperationException("Insufficient quantity.");

                SqliteHelper.ExecuteNonQuery(conn, tx,
                    "INSERT INTO Rentals (ToolID,CustomerID,RentalDate,DueDate,Status) VALUES(@ToolID,@CustomerID,@RentalDate,@DueDate,'Rented')",
                    new[]
                    {
                        new SQLiteParameter("@ToolID", toolID),
                        new SQLiteParameter("@CustomerID", customerID),
                        new SQLiteParameter("@RentalDate", rentalDate),
                        new SQLiteParameter("@DueDate", dueDate)
                    });

                SqliteHelper.ExecuteNonQuery(conn, tx,
                    "UPDATE Tools SET AvailableQuantity = AvailableQuantity - 1, RentedQuantity = RentedQuantity + 1 WHERE ToolID = @ToolID",
                    new[] { new SQLiteParameter("@ToolID", toolID) });

                tx.Commit();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                tx.Rollback();
                return;
            }
        }

        public void ReturnTool(int rentalID, DateTime returnDate)
        {
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var tx = conn.BeginTransaction();
            try
            {
                var rentalRows = SqliteHelper.ExecuteNonQuery(conn, tx,
                    "UPDATE Rentals SET ReturnDate=@ReturnDate, Status='Returned' WHERE RentalID=@RentalID",
                    new[]
                    {
                        new SQLiteParameter("@ReturnDate", returnDate),
                        new SQLiteParameter("@RentalID", rentalID)
                    });

                var toolRows = SqliteHelper.ExecuteNonQuery(conn, tx,
                    "UPDATE Tools SET AvailableQuantity=AvailableQuantity+1, RentedQuantity=RentedQuantity-1 WHERE ToolID=(SELECT ToolID FROM Rentals WHERE RentalID=@RentalID)",
                    new[] { new SQLiteParameter("@RentalID", rentalID) });

                if (rentalRows == 0 || toolRows == 0)
                    throw new InvalidOperationException("Return operation failed.");

                tx.Commit();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                tx.Rollback();
                return;
            }
        }

        public void ReturnToolWithTransaction(int rentalID, DateTime returnDate)
        {
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var tx = conn.BeginTransaction();
            try
            {
                var selCmd = new SQLiteCommand(
                    "SELECT ToolID FROM Rentals WHERE RentalID=@RentalID AND Status='Rented'", conn, tx);
                selCmd.Parameters.AddWithValue("@RentalID", rentalID);
                var result = selCmd.ExecuteScalar();
                if (result == null) throw new InvalidOperationException("Rental not found or already returned.");
                string toolID = result.ToString();

                SqliteHelper.ExecuteNonQuery(conn, tx,
                    "UPDATE Rentals SET ReturnDate=@ReturnDate,Status='Returned' WHERE RentalID=@RentalID",
                    new[]
                    {
                        new SQLiteParameter("@ReturnDate", returnDate),
                        new SQLiteParameter("@RentalID", rentalID)
                    });

                SqliteHelper.ExecuteNonQuery(conn, tx,
                    "UPDATE Tools SET AvailableQuantity=AvailableQuantity+1,RentedQuantity=RentedQuantity-1 WHERE ToolID=@ToolID",
                    new[] { new SQLiteParameter("@ToolID", toolID) });

                tx.Commit();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                tx.Rollback();
                return;
            }
        }

        public void ExtendRental(int rentalID, DateTime newDueDate)
        {
            const string sql = @"
                UPDATE Rentals
                   SET DueDate = @NewDueDate
                 WHERE RentalID = @RentalID AND Status = 'Rented'";
            var p = new[]
            {
                new SQLiteParameter("@NewDueDate", newDueDate),
                new SQLiteParameter("@RentalID", rentalID)
            };
            if (SqliteHelper.ExecuteNonQuery(_connString, sql, p) == 0)
                throw new InvalidOperationException("Unable to extend rental. Rental not found or already returned.");
        }

        public List<Rental> GetActiveRentals() =>
            SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Rentals WHERE Status='Rented'", null, MapRental);

        public List<Rental> GetOverdueRentals()
        {
            const string sql = @"
                SELECT * FROM Rentals
                 WHERE Status = 'Rented'
                   AND DueDate < @Today";
            var p = new[] { new SQLiteParameter("@Today", DateTime.Today) };
            return SqliteHelper.ExecuteReader(_connString, sql, p, MapRental);
        }

        public List<Rental> GetAllRentals() =>
            SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Rentals", null, MapRental);

        public List<Rental> GetRentalHistoryForTool(string toolID)
        {
            const string sql = @"
                SELECT * FROM Rentals
                 WHERE ToolID = @ToolID
              ORDER BY RentalDate DESC";
            var p = new[] { new SQLiteParameter("@ToolID", toolID) };
            return SqliteHelper.ExecuteReader(_connString, sql, p, MapRental);
        }

        Rental MapRental(IDataRecord r) => new()
        {
            RentalID = Convert.ToInt32(r["RentalID"]),
            ToolID = r["ToolID"].ToString(),
            CustomerID = Convert.ToInt32(r["CustomerID"]),
            RentalDate = Convert.ToDateTime(r["RentalDate"]),
            DueDate = Convert.ToDateTime(r["DueDate"]),
            ReturnDate = r["ReturnDate"] is DBNull ? null : Convert.ToDateTime(r["ReturnDate"]),
            Status = r["Status"].ToString()
        };
    }
}


// File: ToolManagementAppV2\Services\Settings\SettingsService.cs
// Lines: 86, Size: 2970 bytes
using System.Data.SQLite;
using System;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Interfaces;

namespace ToolManagementAppV2.Services.Settings
{
    public class SettingsService : ISettingsService
    {
        readonly string _connString;
        const string UpsertSql = @"
            INSERT INTO Settings (Key, Value) 
            VALUES (@Key, @Value)
            ON CONFLICT(Key) DO UPDATE SET Value = @Value";

        public SettingsService(DatabaseService dbService) =>
            _connString = dbService.ConnectionString;

        public void SaveSetting(string key, string value)
        {
            var p = new[]
            {
                new SQLiteParameter("@Key", key),
                new SQLiteParameter("@Value", value)
            };
            SqliteHelper.ExecuteNonQuery(_connString, UpsertSql, p);
        }

        public string GetSetting(string key)
        {
            const string sql = "SELECT Value FROM Settings WHERE Key = @Key";
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);
            cmd.Parameters.AddWithValue("@Key", key);
            return cmd.ExecuteScalar()?.ToString();
        }

        public Dictionary<string, string> GetAllSettings()
        {
            var dict = new Dictionary<string, string>();
            const string sql = "SELECT Key, Value FROM Settings";
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);
            using var rdr = cmd.ExecuteReader();
            while (rdr.Read())
                dict[rdr["Key"].ToString()] = rdr["Value"].ToString();
            return dict;
        }

        public void UpdateSettings(Dictionary<string, string> settings)
        {
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var tx = conn.BeginTransaction();
            try
            {
                foreach (var kv in settings)
                {
                    var p = new[]
                    {
                        new SQLiteParameter("@Key", kv.Key),
                        new SQLiteParameter("@Value", kv.Value)
                    };
                    SqliteHelper.ExecuteNonQuery(conn, tx, UpsertSql, p);
                }
                tx.Commit();
            }
            catch (Exception ex)
            {
                tx.Rollback();
                Console.WriteLine(ex);
                return;
            }
        }

        public void DeleteSetting(string key)
        {
            const string sql = "DELETE FROM Settings WHERE Key = @Key";
            var p = new[] { new SQLiteParameter("@Key", key) };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }
    }
}


// File: ToolManagementAppV2\Services\Tools\Printer.cs
// Lines: 290, Size: 10752 bytes
// Services/Printer.cs
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Interfaces;
using ToolManagementAppV2.Utilities.Helpers;
using ToolManagementAppV2.Views;

namespace ToolManagementAppV2.Services.Tools
{
    public class Printer
    {
        private readonly ISettingsService _settingsService;

        public Printer(ISettingsService settingsService)
        {
            _settingsService = settingsService;
        }

        /// <summary>
        /// Prints a sorted list of tools with the given title.
        /// If currentUserName is non‐null, only prints tools checked out by that user.
        /// </summary>
        public void PrintTools(IEnumerable<ToolModel> tools, string title, string currentUserName = null)
        {
            // 1) sort by Location
            var list = tools.OrderBy(t => t.Location).ToList();

            // 2) filter if needed
            if (!string.IsNullOrEmpty(currentUserName))
                list = list.Where(t => t.CheckedOutBy == currentUserName).ToList();

            // 3) build the document
            var logoPath = LoadCompanyLogoPath();
            var doc = BuildDocument(list, title, logoPath);

            // 4) show preview window instead of calling PrintDialog directly
            var preview = new PrintPreviewWindow();
            preview.ShowPreview(doc, title, logoPath);
            // printing now happens from inside the preview window
        }

        private string? LoadCompanyLogoPath()
        {
            var path = _settingsService.GetSetting("CompanyLogoPath");
            if (string.IsNullOrEmpty(path))
                return null;

            var full = Utilities.Helpers.PathHelper.GetAbsolutePath(path);
            return !string.IsNullOrEmpty(full) && File.Exists(full) ? full : null;
        }

        private FlowDocument BuildDocument(List<ToolModel> tools, string title, string logoPath)
        {
            var doc = new FlowDocument
            {
                PagePadding = new Thickness(50),
                PageWidth = 8.27 * 96,
                PageHeight = 11.69 * 96,
                FontFamily = new FontFamily("Calibri"),
                FontSize = 18
            };

            // Header: logo + title
            var headerContainer = new BlockUIContainer();
            var headerStack = new StackPanel { Orientation = Orientation.Vertical };
            AddCompanyLogo(headerStack, logoPath);
            AddTitle(headerStack, title);
            headerContainer.Child = headerStack;
            doc.Blocks.Add(headerContainer);

            // Each tool
            foreach (var t in tools)
            {
                var row = CreateToolRow(t);
                var block = new BlockUIContainer(row)
                {
                    Margin = new Thickness(0, 20, 0, 20)
                };
                doc.Blocks.Add(block);
            }

            return doc;
        }

        private StackPanel CreateToolRow(ToolModel tool)
        {
            var panel = new StackPanel { Orientation = Orientation.Vertical };
            var grid = new Grid();
            // columns: image | details left | details right
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(150) });
            grid.ColumnDefinitions.Add(new ColumnDefinition());
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });

            // image or placeholder
            string imgPath = null;
            if (!string.IsNullOrEmpty(tool.ToolImagePath))
            {
                imgPath = Utilities.Helpers.PathHelper.GetAbsolutePath(tool.ToolImagePath);
            }

            if (!string.IsNullOrEmpty(imgPath) && File.Exists(imgPath))
            {
                var imgBorder = CreateOptimizedImage(imgPath);
                Grid.SetColumn(imgBorder, 0);
                grid.Children.Add(imgBorder);
            }
            else
            {
                var ph = new Border
                {
                    Width = 120,
                    Height = 120,
                    Background = Brushes.LightGray,
                    CornerRadius = new CornerRadius(10)
                };
                Grid.SetColumn(ph, 0);
                grid.Children.Add(ph);
            }

            // left: ID + description
            var left = new TextBlock
            {
                FontSize = 14,
                TextWrapping = TextWrapping.Wrap,
                Margin = new Thickness(10, 0, 0, 0)
            };
            left.Inlines.Add(new Run("\n"));
            left.Inlines.Add(new Bold(new Run("Tool ID: ")));
            left.Inlines.Add(new Run(tool.ToolID + "\n"));
            left.Inlines.Add(new Bold(new Run("NameDescription: ")));
            left.Inlines.Add(new Run(tool.NameDescription + "\n"));
            Grid.SetColumn(left, 1);
            grid.Children.Add(left);

            // right: location, who, when
            var right = new TextBlock
            {
                FontSize = 14,
                TextWrapping = TextWrapping.Wrap,
                HorizontalAlignment = HorizontalAlignment.Right,
                TextAlignment = TextAlignment.Right,
                Margin = new Thickness(0, 0, 20, 0)
            };

            right.Inlines.Add(new LineBreak());
            right.Inlines.Add(new Bold(new Run("Location: ")));
            right.Inlines.Add(new Run(tool.Location));
            right.Inlines.Add(new LineBreak());
            right.Inlines.Add(new LineBreak());
            right.Inlines.Add(new Bold(new Run("Checked Out By: ")));
            right.Inlines.Add(new Run(tool.CheckedOutBy));
            right.Inlines.Add(new LineBreak());
            right.Inlines.Add(new Bold(new Run("Checked Out Time: ")));
            if (tool.CheckedOutTime.HasValue)
                right.Inlines.Add(new Run(tool.CheckedOutTime.Value.ToString("yyyy-MM-dd HH:mm:ss")));
            else
                right.Inlines.Add(new Run("N/A"));
            right.Inlines.Add(new LineBreak());

            Grid.SetColumn(right, 2);
            grid.Children.Add(right);

            panel.Children.Add(grid);
            panel.Children.Add(new System.Windows.Shapes.Rectangle
            {
                Height = 1,
                Fill = Brushes.LightGray
            });

            return panel;
        }

        private Border CreateOptimizedImage(string path)
        {
            var full = Utilities.Helpers.PathHelper.GetAbsolutePath(path);
            if (string.IsNullOrEmpty(full))
                return new Border { Width = 120, Height = 120, CornerRadius = new CornerRadius(10) };

            var bmp = new BitmapImage();
            bmp.BeginInit();
            bmp.CacheOption = BitmapCacheOption.OnLoad;
            bmp.DecodePixelWidth = 720;
            bmp.UriSource = new Uri(full, UriKind.Absolute);
            bmp.EndInit();
            bmp.Freeze();

            return new Border
            {
                Width = 120,
                Height = 120,
                CornerRadius = new CornerRadius(10),
                Background = new ImageBrush(bmp) { Stretch = Stretch.UniformToFill },
                ClipToBounds = true
            };
        }

        private void AddCompanyLogo(StackPanel host, string logoPath)
        {
            if (string.IsNullOrEmpty(logoPath))
                return;

            var full = Utilities.Helpers.PathHelper.GetAbsolutePath(logoPath);
            if (string.IsNullOrEmpty(full) || !File.Exists(full))
                return;
            var bmp = new BitmapImage();
            bmp.BeginInit();
            bmp.CacheOption = BitmapCacheOption.OnLoad;
            bmp.UriSource = new Uri(full, UriKind.Absolute);
            bmp.EndInit();
            bmp.Freeze();

            host.Children.Add(new Image
            {
                Source = bmp,
                Width = 50,
                Height = 50,
                Stretch = Stretch.Uniform
            });
        }

        private void AddTitle(StackPanel host, string title)
        {
            host.Children.Add(new TextBlock(new Bold(new Run(title)))
            {
                FontSize = 20,
                TextAlignment = TextAlignment.Center,
                Margin = new Thickness(0, 5, 0, 0)
            });
        }

        private class CustomDocumentPaginator : DocumentPaginator
        {
            private readonly DocumentPaginator _inner;
            private readonly Typeface _tf;
            private readonly double _fs;

            public CustomDocumentPaginator(DocumentPaginator inner, Typeface tf, double fs)
            {
                _inner = inner;
                _tf = tf;
                _fs = fs;
            }

            [Obsolete]
            public override DocumentPage GetPage(int pageNumber)
            {
                var page = _inner.GetPage(pageNumber);
                var dv = new DrawingVisual();
                using (var dc = dv.RenderOpen())
                {
                    var text = $"Page {pageNumber + 1}";
                    var ft = new FormattedText(
                        text,
                        CultureInfo.CurrentCulture,
                        FlowDirection.LeftToRight,
                        _tf,
                        _fs,
                        Brushes.Black);

                    var x = (page.Size.Width - ft.Width) / 2;
                    var y = page.Size.Height - ft.Height - 50;
                    dc.DrawText(ft, new Point(x, y));
                }
                var cv = new ContainerVisual();
                cv.Children.Add(page.Visual);
                cv.Children.Add(dv);
                return new DocumentPage(cv, page.Size, page.BleedBox, page.ContentBox);
            }

            public override bool IsPageCountValid => _inner.IsPageCountValid;
            public override int PageCount => _inner.PageCount;
            public override Size PageSize
            {
                get => _inner.PageSize;
                set => _inner.PageSize = value;
            }
            public override IDocumentPaginatorSource Source => _inner.Source;
        }
    }
}


// File: ToolManagementAppV2\Services\Tools\ReportService.cs
// Lines: 135, Size: 5172 bytes
using System.Windows;
using System.Windows.Documents;
using System.Windows.Media;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Services.Rentals;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Interfaces;

namespace ToolManagementAppV2.Services.Tools
{
    public class ReportService
    {
        readonly IToolService _toolService;
        readonly IRentalService _rentalService;
        readonly ActivityLogService _activityLogService;
        readonly ICustomerService _customerService;
        readonly IUserService _userService;

        public ReportService(
            IToolService toolService,
            IRentalService rentalService,
            ActivityLogService activityLogService,
            ICustomerService customerService,
            IUserService userService)
        {
            _toolService = toolService;
            _rentalService = rentalService;
            _activityLogService = activityLogService;
            _customerService = customerService;
            _userService = userService;
        }

        public FlowDocument GenerateInventoryReport()
        {
            var lines = _toolService.GetAllTools()
                .Select(t =>
                    $"Tool ID: {t.ToolID} | ToolNumber: {t.ToolNumber} | Qty: {t.QuantityOnHand} | " +
                    $"Location: {t.Location} | Supplier: {t.Supplier}");
            return BuildReport("Tool Inventory Report", lines);
        }

        public FlowDocument GenerateRentalReport(bool activeOnly = true)
        {
            var rentals = activeOnly
                ? _rentalService.GetActiveRentals()
                : _rentalService.GetAllRentals();

            var title = activeOnly
                ? "Active Rental Report"
                : "Full Rental History Report";

            var lines = rentals.Select(r =>
                $"Rental ID: {r.RentalID} | Tool ID: {r.ToolID} | Customer ID: {r.CustomerID} | " +
                $"Rental Date: {r.RentalDate:yyyy-MM-dd} | Due Date: {r.DueDate:yyyy-MM-dd} | " +
                $"Return Date: {(r.ReturnDate.HasValue ? r.ReturnDate.Value.ToString("yyyy-MM-dd") : "N/A")} | " +
                $"Status: {r.Status}");

            return BuildReport(title, lines);
        }

        public FlowDocument GenerateActivityLogReport()
        {
            var lines = _activityLogService.GetRecentLogs(100)
                .Select(l =>
                    $"LogID: {l.LogID} | UserID: {l.UserID} | User: {l.UserName} | " +
                    $"Action: {l.Action} | Timestamp: {l.Timestamp:yyyy-MM-dd HH:mm:ss}");
            return BuildReport("Activity Log Report", lines);
        }

        public FlowDocument GenerateCustomerReport()
        {
            var lines = _customerService.GetAllCustomers()
                .Select(c =>
                    $"CustomerID: {c.CustomerID} | Company: {c.Company} | Email: {c.Email} | " +
                    $"Contact: {c.Contact} | Phone: {c.Phone} | Mobile: {c.Mobile} | Address: {c.Address}");
            return BuildReport("Customer Report", lines);
        }

        public FlowDocument GenerateUserReport()
        {
            var lines = _userService.GetAllUsers()
                .Select(u =>
                    $"UserID: {u.UserID} | UserName: {u.UserName} | IsAdmin: {u.IsAdmin}");
            return BuildReport("User Report", lines);
        }

        public FlowDocument GenerateSummaryReport()
        {
            var totalTools = _toolService.GetAllTools().Count;
            var totalRentals = _rentalService.GetAllRentals().Count;
            var totalActiveRentals = _rentalService.GetActiveRentals().Count;
            var totalCustomers = _customerService.GetAllCustomers().Count;
            var totalUsers = _userService.GetAllUsers().Count;

            var lines = new[]
            {
                $"Total Tools: {totalTools}",
                $"Total Rentals (History): {totalRentals}",
                $"Active Rentals: {totalActiveRentals}",
                $"Total Customers: {totalCustomers}",
                $"Total Users: {totalUsers}"
            };

            return BuildReport("Application Summary Report", lines);
        }

        FlowDocument BuildReport(string title, IEnumerable<string> lines)
        {
            var doc = new FlowDocument
            {
                FontFamily = new FontFamily("Segoe UI"),
                FontSize = 12,
                PageWidth = 800
            };

            var header = new Paragraph(new Run(title))
            {
                FontSize = 18,
                FontWeight = FontWeights.Bold,
                TextAlignment = TextAlignment.Center,
                Margin = new Thickness(0, 0, 0, 20)
            };
            doc.Blocks.Add(header);

            foreach (var line in lines)
            {
                var p = new Paragraph(new Run(line)) { Margin = new Thickness(0, 0, 0, 10) };
                doc.Blocks.Add(p);
            }

            return doc;
        }
    }
}


// File: ToolManagementAppV2\Services\Tools\ToolService.cs
// Lines: 222, Size: 10669 bytes
using System.Data.SQLite;
using System.Data;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Utilities.IO;
using ToolManagementAppV2.Models.ImportExport;
using ToolManagementAppV2.Interfaces;
using System.Text;

namespace ToolManagementAppV2.Services.Tools
{
    public class ToolService : IToolService
    {
        readonly string _connString;
        const string AllToolsSql = "SELECT * FROM Tools";
        const string UpsertToolCsv = @"
            INSERT INTO Tools 
              (ToolNumber, NameDescription, Location, Brand, PartNumber, Supplier, PurchasedDate, Notes, Keywords, AvailableQuantity, RentedQuantity, IsCheckedOut)
            VALUES (@ToolNumber,@Desc,@Loc,@Brand,@PN,@Sup,@PD,@Notes,@Keywords,@Avail,@Rent,0)";
    
        public ToolService(DatabaseService dbService) => _connString = dbService.ConnectionString;
    
        public List<ToolModel> GetAllTools() =>
            SqliteHelper.ExecuteReader(_connString, AllToolsSql, null, MapTool);
    
        public ToolModel GetToolByID(string toolID) =>
            SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Tools WHERE ToolID=@ToolID",
                new[] { new SQLiteParameter("@ToolID", toolID) }, MapTool).FirstOrDefault();
    
        public List<ToolModel> SearchTools(string? searchText)
        {
            if (string.IsNullOrWhiteSpace(searchText))
                return GetAllTools();
    
            var terms = searchText.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            var sb = new StringBuilder("SELECT * FROM Tools");
            if (terms.Any())
            {
                sb.Append(" WHERE ")
                  .Append(string.Join(" AND ", terms.Select((t, i) =>
                    "(ToolID LIKE @p" + i +
                    " OR ToolNumber LIKE @p" + i +
                    " OR NameDescription LIKE @p" + i +
                    " OR Brand LIKE @p" + i +
                    " OR PartNumber LIKE @p" + i +
                    " OR Supplier LIKE @p" + i +
                    " OR Location LIKE @p" + i +
                    " OR Notes LIKE @p" + i +
                    " OR Keywords LIKE @p" + i + ")")));
            }
            var parameters = terms
                .Select((t, i) => new SQLiteParameter("@p" + i, $"%{t}%"))
                .ToArray();
            return SqliteHelper.ExecuteReader(_connString, sb.ToString(), parameters, MapTool);
        }
    
        public void AddTool(ToolModel tool)
        {
            var p = new[]
            {
                new SQLiteParameter("@ToolNumber", tool.ToolNumber),
                new SQLiteParameter("@Desc", (object)tool.NameDescription ?? DBNull.Value),
                new SQLiteParameter("@Loc", tool.Location),
                new SQLiteParameter("@Brand", tool.Brand),
                new SQLiteParameter("@PN", tool.PartNumber),
                new SQLiteParameter("@Sup", (object)tool.Supplier ?? DBNull.Value),
                new SQLiteParameter("@PD", (object)tool.PurchasedDate ?? DBNull.Value),
                new SQLiteParameter("@Notes", (object)tool.Notes ?? DBNull.Value),
                new SQLiteParameter("@Keywords", (object)tool.Keywords ?? DBNull.Value),
                new SQLiteParameter("@Avail", tool.QuantityOnHand),
                new SQLiteParameter("@Rent", tool.RentedQuantity)
            };
            SqliteHelper.ExecuteNonQuery(_connString, UpsertToolCsv, p);
        }
    
        public void UpdateTool(ToolModel tool)
        {
            const string sql = @"
                UPDATE Tools SET
                  ToolNumber = @ToolNumber,
                  NameDescription = @Desc,
                  Location = @Loc,
                  Brand = @Brand,
                  PartNumber = @PN,
                  Supplier = @Sup,
                  PurchasedDate = @PD,
                  Notes = @Notes,
                  Keywords = @Keywords,
                  AvailableQuantity = @Avail,
                  RentedQuantity = @Rent,
                  IsCheckedOut = @Out,
                  CheckedOutBy = @By,
                  CheckedOutTime = @Time,
                  ToolImagePath = @Img
                WHERE ToolID = @ID";
            var p = new[]
            {
                new SQLiteParameter("@ID", tool.ToolID),
                new SQLiteParameter("@ToolNumber", tool.ToolNumber),
                new SQLiteParameter("@Desc", (object)tool.NameDescription ?? DBNull.Value),
                new SQLiteParameter("@Loc", tool.Location),
                new SQLiteParameter("@Brand", tool.Brand),
                new SQLiteParameter("@PN", tool.PartNumber),
                new SQLiteParameter("@Sup", (object)tool.Supplier ?? DBNull.Value),
                new SQLiteParameter("@PD", (object)tool.PurchasedDate ?? DBNull.Value),
                new SQLiteParameter("@Notes", (object)tool.Notes ?? DBNull.Value),
                new SQLiteParameter("@Keywords", (object)tool.Keywords ?? DBNull.Value),
                new SQLiteParameter("@Avail", tool.QuantityOnHand),
                new SQLiteParameter("@Rent", tool.RentedQuantity),
                new SQLiteParameter("@Out", tool.IsCheckedOut ? 1 : 0),
                new SQLiteParameter("@By", (object)tool.CheckedOutBy ?? DBNull.Value),
                new SQLiteParameter("@Time", (object)tool.CheckedOutTime ?? DBNull.Value),
                new SQLiteParameter("@Img", (object)tool.ToolImagePath ?? DBNull.Value)
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }
    
        public void UpdateToolQuantities(string toolID, int qtyChange, bool isRental)
        {
            if (qtyChange <= 0) throw new ArgumentException("Quantity change must be positive.", nameof(qtyChange));
            var sql = isRental
                ? @"UPDATE Tools SET AvailableQuantity = AvailableQuantity - @Q, RentedQuantity = RentedQuantity + @Q WHERE ToolID = @ID AND AvailableQuantity >= @Q"
                : @"UPDATE Tools SET AvailableQuantity = AvailableQuantity + @Q, RentedQuantity = RentedQuantity - @Q WHERE ToolID = @ID AND RentedQuantity >= @Q";
            var p = new[]
            {
                new SQLiteParameter("@ID", toolID),
                new SQLiteParameter("@Q", qtyChange)
            };
            if (SqliteHelper.ExecuteNonQuery(_connString, sql, p) == 0)
                throw new InvalidOperationException("Quantity update failed.");
        }
    
        public void DeleteTool(string toolID) =>
            SqliteHelper.ExecuteNonQuery(_connString, "DELETE FROM Tools WHERE ToolID=@ID",
                new[] { new SQLiteParameter("@ID", toolID) });
    
        public void ToggleToolCheckOutStatus(string toolID, string currentUser)
        {
            var result = SqliteHelper.ExecuteScalar(_connString,
                "SELECT IsCheckedOut FROM Tools WHERE ToolID=@ID",
                   new[] { new SQLiteParameter("@ID", toolID) });
    
            if (result == null)
                throw new InvalidOperationException($"Tool {toolID} not found.");
    
            var isOut = Convert.ToInt32(result) == 1;
            var newStatus = isOut ? 0 : 1;
            var time = isOut ? (object)DBNull.Value : DateTime.Now;
            var by = isOut ? (object)DBNull.Value : currentUser;
            SqliteHelper.ExecuteNonQuery(_connString, @"
                UPDATE Tools SET
                  IsCheckedOut = @Out,
                  CheckedOutBy = @By,
                  CheckedOutTime = @Time
                WHERE ToolID = @ID", new[]
            {
                new SQLiteParameter("@Out", newStatus),
                new SQLiteParameter("@By", by),
                new SQLiteParameter("@Time", time),
                new SQLiteParameter("@ID", toolID)
            });
        }
    
        public List<ToolModel> GetToolsCheckedOutBy(string userName) =>
            SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Tools WHERE CheckedOutBy=@User AND IsCheckedOut=1",
                new[] { new SQLiteParameter("@User", userName) }, MapTool);
    
        public void UpdateToolImage(string toolID, string imagePath) =>
            SqliteHelper.ExecuteNonQuery(_connString, "UPDATE Tools SET ToolImagePath=@Img WHERE ToolID=@ID",
                new[]
                {
                    new SQLiteParameter("@Img", imagePath),
                    new SQLiteParameter("@ID", toolID)
                });
    
        public List<int> ImportToolsFromCsv(string filePath, IDictionary<string, string> map)
        {
            var tools = CsvHelperUtil.LoadToolsFromCsv(filePath, map, out var invalidRows);
            foreach (var tool in tools)
            {
                if (!ToolExists(tool.ToolNumber))
                    AddTool(tool);
            }
            return invalidRows;
        }
    
        public void ExportToolsToCsv(string filePath)
        {
            var tools = GetAllTools();
            CsvHelperUtil.ExportToolsToCsv(filePath, tools);
        }
    
        private bool ToolExists(string toolNumber)
        {
            const string sql = "SELECT COUNT(*) FROM Tools WHERE ToolNumber = @TN";
            var count = Convert.ToInt32(SqliteHelper.ExecuteScalar(_connString, sql, new[] {
                new SQLiteParameter("@TN", toolNumber)
            }));
            return count > 0;
        }
    
        ToolModel MapTool(IDataRecord r) => new()
        {
            ToolID = r["ToolID"].ToString(),
            ToolNumber = r["ToolNumber"].ToString(),
            PartNumber = r["PartNumber"].ToString(),
            NameDescription = r["NameDescription"].ToString(),
            Brand = r["Brand"].ToString(),
            Location = r["Location"].ToString(),
            QuantityOnHand = Convert.ToInt32(r["AvailableQuantity"]),
            RentedQuantity = Convert.ToInt32(r["RentedQuantity"]),
            Supplier = r["Supplier"].ToString(),
            PurchasedDate = r["PurchasedDate"] is DBNull ? (DateTime?)null : Convert.ToDateTime(r["PurchasedDate"]),
            Notes = r["Notes"].ToString(),
            IsCheckedOut = Convert.ToInt32(r["IsCheckedOut"]) == 1,
            CheckedOutBy = r["CheckedOutBy"].ToString(),
            CheckedOutTime = r["CheckedOutTime"] is DBNull ? (DateTime?)null : Convert.ToDateTime(r["CheckedOutTime"]),
            ToolImagePath = r["ToolImagePath"]?.ToString(),
            Keywords = r["Keywords"]?.ToString()
        };
    }
}


// File: ToolManagementAppV2\Services\Users\ActivityLogService.cs
// Lines: 68, Size: 2253 bytes
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;

namespace ToolManagementAppV2.Services.Users
{
    public class ActivityLogService
    {
        readonly string _connString;

        public ActivityLogService(DatabaseService dbService) =>
            _connString = dbService.ConnectionString;

        public void LogAction(int userID, string userName, string action)
        {
            const string sql = @"
                INSERT INTO ActivityLogs (UserID, UserName, Action)
                VALUES (@UserID, @UserName, @Action)";
            var p = new[]
            {
                new SQLiteParameter("@UserID",   userID),
                new SQLiteParameter("@UserName", userName),
                new SQLiteParameter("@Action",   action)
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        public List<ActivityLog> GetRecentLogs(int count = 50)
        {
            const string sql = @"
                SELECT * FROM ActivityLogs
                 ORDER BY Timestamp DESC
                 LIMIT @Count";
            var p = new[] { new SQLiteParameter("@Count", count) };
            return SqliteHelper.ExecuteReader(_connString, sql, p, MapLog);
        }

        public void PurgeOldLogs(DateTime threshold)
        {
            const string sql = @"
                DELETE FROM ActivityLogs
                 WHERE Timestamp < @Threshold";
            var p = new[] { new SQLiteParameter("@Threshold", threshold) };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        ActivityLog MapLog(IDataRecord r)
        {
            var log = new ActivityLog
            {
                LogID = Convert.ToInt32(r["LogID"]),
                UserName = r["UserName"].ToString(),
                Action = r["Action"].ToString(),
                Timestamp = Convert.ToDateTime(r["Timestamp"])
            };

            log.UserID = r["UserID"] == DBNull.Value
                ? 0
                : Convert.ToInt32(r["UserID"]);

            return log;
        }
    }
}


// File: ToolManagementAppV2\Services\Users\UserService.cs
// Lines: 207, Size: 8300 bytes
using System;
using System.Data.SQLite;
using System.IO;
using System.Windows.Media.Imaging;
using System.Data;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Utilities.Helpers;
using ToolManagementAppV2.Interfaces;

namespace ToolManagementAppV2.Services.Users
{
    public class UserService : IUserService
    {
        readonly string _connString;

        public UserService(DatabaseService dbService) =>
            _connString = dbService.ConnectionString;

        public List<User> GetAllUsers() =>
            SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Users", null, MapUser);

        public User GetUserByID(int userID) =>
            SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Users WHERE UserID=@ID",
                new[] { new SQLiteParameter("@ID", userID) }, MapUser).FirstOrDefault();

        public User AuthenticateUser(string userName, string password)
        {
            var users = SqliteHelper.ExecuteReader(_connString,
                "SELECT * FROM Users WHERE UserName=@UserName",
                new[] { new SQLiteParameter("@UserName", userName) }, MapUser);
            var u = users.FirstOrDefault();
            if (u == null) return null;
            var hashed = SecurityHelper.ComputeSha256Hash(password ?? string.Empty);
            return u.Password == hashed ? u : null;
        }

        public User GetCurrentUser()
        {
            if (System.Windows.Application.Current.Properties["CurrentUser"] is User u)
                return GetUserByID(u.UserID);
            return null;
        }

        public void AddUser(User user)
        {
            const string sql = @"
                INSERT INTO Users
                  (UserName, Password, UserPhotoPath, IsAdmin, Email, Phone, Address, Role)
                VALUES
                  (@UserName,@Password,@Photo,@Admin,@Email,@Phone,@Address,@Role);
                SELECT last_insert_rowid();";

            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);

            var hashed = string.IsNullOrWhiteSpace(user.Password)
                ? string.Empty
                : SecurityHelper.IsSha256Hash(user.Password)
                    ? user.Password
                    : SecurityHelper.ComputeSha256Hash(user.Password);

            cmd.Parameters.AddRange(new[]
            {
                new SQLiteParameter("@UserName", user.UserName),
                new SQLiteParameter("@Password", hashed),
                new SQLiteParameter("@Photo",    (object)user.UserPhotoPath ?? DBNull.Value),
                new SQLiteParameter("@Admin",    user.IsAdmin ? 1 : 0),
                new SQLiteParameter("@Email",    (object)user.Email ?? DBNull.Value),
                new SQLiteParameter("@Phone",    (object)user.Phone ?? DBNull.Value),
                new SQLiteParameter("@Address",  (object)user.Address ?? DBNull.Value),
                new SQLiteParameter("@Role",     (object)user.Role ?? DBNull.Value)
            });
            user.UserID = Convert.ToInt32(cmd.ExecuteScalar());
            user.Password = hashed;
        }

        public void UpdateUser(User user)
        {
            const string sql = @"
                UPDATE Users SET
                  UserName      = @UserName,
                  Password      = @Password,
                  UserPhotoPath = @Photo,
                  IsAdmin       = @Admin,
                  Email         = @Email,
                  Phone         = @Phone,
                  Address       = @Address,
                  Role          = @Role
                WHERE UserID = @UserID";

            var hashed = string.IsNullOrWhiteSpace(user.Password)
                ? string.Empty
                : SecurityHelper.IsSha256Hash(user.Password)
                    ? user.Password
                    : SecurityHelper.ComputeSha256Hash(user.Password);

            var p = new[]
            {
                new SQLiteParameter("@UserID",   user.UserID),
                new SQLiteParameter("@UserName", user.UserName),
                new SQLiteParameter("@Password", hashed),
                new SQLiteParameter("@Photo",    (object)user.UserPhotoPath ?? DBNull.Value),
                new SQLiteParameter("@Admin",    user.IsAdmin ? 1 : 0),
                new SQLiteParameter("@Email",    (object)user.Email ?? DBNull.Value),
                new SQLiteParameter("@Phone",    (object)user.Phone ?? DBNull.Value),
                new SQLiteParameter("@Address",  (object)user.Address ?? DBNull.Value),
                new SQLiteParameter("@Role",     (object)user.Role ?? DBNull.Value)
            };

            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
            user.Password = hashed;
        }

        public void ChangeUserPassword(int userID, string newPassword)
        {
            var sql = "UPDATE Users SET Password=@Pwd WHERE UserID=@ID";
            var hashed = string.IsNullOrWhiteSpace(newPassword)
                ? string.Empty
                : SecurityHelper.IsSha256Hash(newPassword)
                    ? newPassword
                    : SecurityHelper.ComputeSha256Hash(newPassword);

            var p = new[]
            {
                new SQLiteParameter("@Pwd", hashed),
                new SQLiteParameter("@ID",  userID)
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        public bool TryDeleteUser(int userID)
        {
            var user = GetUserByID(userID);
            if (user == null) return false;
            if (user.IsAdmin)
            {
                var adminCount = GetAllUsers().Count(u => u.IsAdmin);
                if (adminCount <= 1) return false;
            }
            DeleteUserInternal(userID);
            return true;
        }

        public bool DeleteUser(int userID) => TryDeleteUser(userID);

        void DeleteUserInternal(int userID)
        {
            var sql = "DELETE FROM Users WHERE UserID=@ID";
            var p = new[] { new SQLiteParameter("@ID", userID) };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        User MapUser(IDataRecord rdr)
        {
            var u = new User
            {
                UserID = Convert.ToInt32(rdr["UserID"]),
                UserName = rdr["UserName"].ToString(),
                Password = rdr["Password"].ToString(),
                UserPhotoPath = rdr["UserPhotoPath"]?.ToString(),
                IsAdmin = Convert.ToInt32(rdr["IsAdmin"]) == 1,
                Email = rdr["Email"]?.ToString(),
                Phone = rdr["Phone"]?.ToString(),
                Address = rdr["Address"]?.ToString(),
                Role = rdr["Role"]?.ToString()
            };

            try
            {
                if (!string.IsNullOrWhiteSpace(u.UserPhotoPath))
                {
                    Uri uri;
                    if (u.UserPhotoPath.StartsWith("pack://"))
                        uri = new Uri(u.UserPhotoPath, UriKind.Absolute);
                    else
                    {
                        var full = PathHelper.GetAbsolutePath(u.UserPhotoPath);
                        if (string.IsNullOrEmpty(full) || !File.Exists(full))
                        {
                            u.PhotoBitmap = null;
                            return u;
                        }
                        uri = new Uri(full, UriKind.Absolute);
                    }

                    var bmp = new BitmapImage();
                    bmp.BeginInit();
                    bmp.UriSource = uri;
                    bmp.CacheOption = BitmapCacheOption.OnLoad;
                    bmp.CreateOptions = BitmapCreateOptions.IgnoreImageCache;
                    bmp.EndInit();
                    u.PhotoBitmap = bmp;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                u.PhotoBitmap = null;
            }

            return u;
        }
    }
}


// File: ToolManagementAppV2\Utilities\Converters\BooleanToAdminConverter.cs
// Lines: 42, Size: 1230 bytes
// File: Utilities/BooleanToAdminConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities.Converters
{
    public class BooleanToAdminConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            try
            {
                if (value is bool isAdmin)
                    return isAdmin ? "Admin" : string.Empty;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
            return Binding.DoNothing;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            try
            {
                if (value is bool b)
                    return b;

                if (value is string s)
                    return string.Equals(s, "Admin", StringComparison.OrdinalIgnoreCase);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
            return value is string or bool ? false : Binding.DoNothing;
        }
    }
}


// File: ToolManagementAppV2\Utilities\Converters\CheckOutStatusConverter.cs
// Lines: 34, Size: 1042 bytes
// File: Utilities/CheckOutStatusConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities.Converters
{
    public class CheckOutStatusConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value is bool isCheckedOut && isCheckedOut ? "Check In" : "Check Out";
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            try
            {
                if (value is string status)
                {
                    if (status == "Check In")
                        return true;
                    if (status == "Check Out")
                        return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
            return Binding.DoNothing;
        }
    }
}


// File: ToolManagementAppV2\Utilities\Converters\InverseBooleanConverter.cs
// Lines: 23, Size: 637 bytes
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities.Converters
{
    public class InverseBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool b)
                return !b;
            return value;
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool b)
                return !b;
            return value;
        }
    }
}


// File: ToolManagementAppV2\Utilities\Converters\NonEmptyStringToBoolConverter.cs
// Lines: 31, Size: 892 bytes
// NonEmptyStringToBoolConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities.Converters
{
    public class NonEmptyStringToBoolConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture) =>
            !string.IsNullOrEmpty(value as string);

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            try
            {
                if (value is bool b)
                    return b ? string.Empty : null;

                if (value is string s)
                    return s;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
            return Binding.DoNothing;
        }
    }
}


// File: ToolManagementAppV2\Utilities\Converters\NullToDefaultImageConverter.cs
// Lines: 102, Size: 3510 bytes
// Revised NullToDefaultImageConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media.Imaging;
using System.IO;

namespace ToolManagementAppV2.Utilities.Converters
{
    public class NullToDefaultImageConverter : IValueConverter
    {
        private static BitmapImage _defaultUser;
        private static BitmapImage _defaultTool;
        private static BitmapImage _defaultLogo;

        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // If we've already got an actual BitmapImage, just return it
            if (value is BitmapImage bmp) return bmp;

            // If it's a path, try loading it
            if (value is string path && !string.IsNullOrEmpty(path))
            {
                try
                {
                    var absPath = Uri.IsWellFormedUriString(path, UriKind.Absolute)
                        ? path
                        : Helpers.PathHelper.GetAbsolutePath(path);

                    if (!string.IsNullOrEmpty(absPath))
                    {
                        var image = new BitmapImage();
                        image.BeginInit();
                        image.CacheOption = BitmapCacheOption.OnLoad;
                        image.UriSource = new Uri(absPath, UriKind.Absolute);
                        image.EndInit();
                        image.Freeze();
                        return image;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                    // fall-through to default
                }
            }

                // Figure out which default we need
                string type = (parameter as string)?.ToLowerInvariant() ?? "user";
            switch (type)
            {
                case "tool":
                    if (_defaultTool == null)
                        _defaultTool = LoadFromResource("DefaultToolImage.png");
                    return _defaultTool;

                case "logo":
                    if (_defaultLogo == null)
                        _defaultLogo = LoadFromResource("DefaultLogo.png");
                    return _defaultLogo;

                default: // user
                    if (_defaultUser == null)
                        _defaultUser = LoadFromResource("DefaultUserPhoto.png");
                    return _defaultUser;
            }
        }

        private BitmapImage LoadFromResource(string fileName)
        {
            try
            {
                var uri = new Uri($"pack://application:,,,/Resources/{fileName}", UriKind.Absolute);
                return new BitmapImage(uri);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                return new BitmapImage(); // empty fallback
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            try
            {
                if (value is BitmapImage bmp)
                    return bmp.UriSource?.OriginalString;

                if (value is string path)
                    return path;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }

            return Binding.DoNothing;
        }
    }
}


// File: ToolManagementAppV2\Utilities\Extensions\ObservableCollectionExtensions.cs
// Lines: 21, Size: 611 bytes
using System.Collections.ObjectModel;

namespace ToolManagementAppV2.Utilities.Extensions
{
    internal static class ObservableCollectionExtensions
    {
        public static void ReplaceRange<T>(this ObservableCollection<T> collection, IEnumerable<T> items)
        {
            collection.Clear();
            foreach (var i in items)
                collection.Add(i);
        }

        public static void AddRange<T>(this ObservableCollection<T> collection, IEnumerable<T> items)
        {
            foreach (var i in items)
                collection.Add(i);
        }
    }
}


// File: ToolManagementAppV2\Utilities\Helpers\PathHelper.cs
// Lines: 41, Size: 1315 bytes
using System;
using System.IO;

namespace ToolManagementAppV2.Utilities.Helpers
{
    public static class PathHelper
    {
        /// <summary>
        /// Resolves <paramref name="path"/> against the application's base directory
        /// and ensures the resulting absolute path stays within that directory.
        /// </summary>
        /// <param name="path">Relative or absolute path.</param>
        /// <returns>The validated absolute path, or <c>null</c> if validation fails.</returns>
        public static string? GetAbsolutePath(string? path)
        {
            if (string.IsNullOrWhiteSpace(path))
                return null;

            try
            {
                var baseDir = Path.GetFullPath(AppDomain.CurrentDomain.BaseDirectory);
                var combined = Path.IsPathRooted(path)
                    ? path
                    : Path.Combine(baseDir, path);

                var fullPath = Path.GetFullPath(combined);

                if (!fullPath.StartsWith(baseDir, StringComparison.OrdinalIgnoreCase))
                    return null;

                return fullPath;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                return null;
            }
        }
    }
}


// File: ToolManagementAppV2\Utilities\Helpers\SecurityHelper.cs
// Lines: 36, Size: 1047 bytes
using System.Security.Cryptography;
using System.Text;

namespace ToolManagementAppV2.Utilities.Helpers
{
    public static class SecurityHelper
    {
        public static bool IsSha256Hash(string input)
        {
            if (string.IsNullOrWhiteSpace(input) || input.Length != 64)
                return false;

            foreach (var c in input)
            {
                if (!Uri.IsHexDigit(c))
                    return false;
            }
            return true;
        }

        public static string ComputeSha256Hash(string rawData)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));
                StringBuilder builder = new StringBuilder();
                foreach (byte b in bytes)
                {
                    builder.Append(b.ToString("x2")); // lowercase hex
                }
                return builder.ToString();
            }
        }
    }
}


// File: ToolManagementAppV2\ViewModels\CustomerViewModel.cs
// Lines: 22, Size: 559 bytes
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.ViewModels
{
    internal class CustomerViewModel : ObservableObject
    {
        private CustomerModel _customer;
        public CustomerModel Customer
        {
            get => _customer;
            set => SetProperty(ref _customer, value);
        }

        public CustomerViewModel(CustomerModel customer)
        {
            _customer = customer;
        }

        public string DisplayName => $"{_customer.Company} - {_customer.Email}";
    }
}


// File: ToolManagementAppV2\ViewModels\ImportMappingViewModel.cs
// Lines: 43, Size: 1570 bytes
using CommunityToolkit.Mvvm.ComponentModel;
using System.Collections.ObjectModel;

namespace ToolManagementAppV2.ViewModels
{
    public class FieldMapping : ObservableObject
    {
        public string PropertyName { get; }
        public IReadOnlyList<string> AvailableColumns { get; }

        private string _selectedColumn;
        public string SelectedColumn
        {
            get => _selectedColumn;
            set => SetProperty(ref _selectedColumn, value);
        }

        public FieldMapping(string propertyName, IReadOnlyList<string> availableColumns)
        {
            PropertyName = propertyName ?? throw new ArgumentNullException(nameof(propertyName));
            AvailableColumns = availableColumns ?? throw new ArgumentNullException(nameof(availableColumns));
            _selectedColumn = AvailableColumns.FirstOrDefault();
        }
    }

    public class ImportMappingViewModel : ObservableObject
    {
        public IReadOnlyList<string> ColumnHeaders { get; }
        public ObservableCollection<FieldMapping> Mappings { get; }

        public ImportMappingViewModel(IEnumerable<string> headers, IEnumerable<string> properties)
        {
            var headerList = (headers ?? Enumerable.Empty<string>()).ToList();
            ColumnHeaders = headerList;

            Mappings = new ObservableCollection<FieldMapping>(
                (properties ?? Enumerable.Empty<string>())
                    .Select(prop => new FieldMapping(prop, ColumnHeaders))
            );
        }
    }
}


// File: ToolManagementAppV2\ViewModels\MainViewModel.cs
// Lines: 659, Size: 26186 bytes
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Win32;
using System.Collections.ObjectModel;
using System.IO;
using System.Windows;
using System.Windows.Media.Imaging;
using System.Windows.Threading;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Services.Rentals;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Interfaces;
using ToolManagementAppV2.Utilities.Extensions;
using ToolManagementAppV2.Utilities.Helpers;
using ToolManagementAppV2.ViewModels.Rental;
using ToolManagementAppV2.Views;
using System.Windows.Controls;

namespace ToolManagementAppV2.ViewModels
{
    public class MainViewModel : ObservableObject
    {
        readonly DispatcherTimer _refreshTimer;
        readonly IToolService _toolService;
        readonly IUserService _userService;
        readonly ICustomerService _customerService;
        readonly IRentalService _rentalService;
        readonly ISettingsService _settingsService;

        public ObservableCollection<ToolModel> Tools { get; } = new();
        public ObservableCollection<ToolModel> SearchResults { get; } = new();
        public ObservableCollection<ToolModel> CheckedOutTools { get; } = new();
        ToolModel _selectedTool;
        public ToolModel SelectedTool
        {
            get => _selectedTool;
            set
            {
                ToolModel updated = value;
                if (value != null)
                    updated = _toolService.GetToolByID(value.ToolID);

                if (SetProperty(ref _selectedTool, updated))
                {
                    ((RelayCommand)RentToolCommand).NotifyCanExecuteChanged();
                    ((RelayCommand)ViewRentalHistoryCommand).NotifyCanExecuteChanged();
                    NewTool = updated ?? new ToolModel();
                }
            }
        }

        ToolModel _newTool = new();
        public ToolModel NewTool
        {
            get => _newTool;
            set => SetProperty(ref _newTool, value);
        }


        public ObservableCollection<UserModel> Users { get; } = new();
        UserModel _selectedUser;
        public UserModel SelectedUser
        {
            get => _selectedUser;
            set
            {
                SetProperty(ref _selectedUser, value);
                OnPropertyChanged(nameof(IsLastAdmin));
            }
        }

        public ObservableCollection<CustomerModel> Customers { get; } = new();
        CustomerModel _selectedCustomer;
        public CustomerModel SelectedCustomer
        {
            get => _selectedCustomer;
            set => SetProperty(ref _selectedCustomer, value);
        }

        string _newCustomerName, _newCustomerEmail, _newCustomerContact, _newCustomerPhone, _newCustomerMobile, _newCustomerAddress;
        public string NewCustomerName { get => _newCustomerName; set => SetProperty(ref _newCustomerName, value); }
        public string NewCustomerEmail { get => _newCustomerEmail; set => SetProperty(ref _newCustomerEmail, value); }
        public string NewCustomerContact { get => _newCustomerContact; set => SetProperty(ref _newCustomerContact, value); }
        public string NewCustomerPhone { get => _newCustomerPhone; set => SetProperty(ref _newCustomerPhone, value); }
        public string NewCustomerMobile { get => _newCustomerMobile; set => SetProperty(ref _newCustomerMobile, value); }
        public string NewCustomerAddress { get => _newCustomerAddress; set => SetProperty(ref _newCustomerAddress, value); }

        public ObservableCollection<RentalModel> ActiveRentals { get; } = new();
        public ObservableCollection<RentalModel> OverdueRentals { get; } = new();
        RentalModel _selectedRental;
        public RentalModel SelectedRental
        {
            get => _selectedRental;
            set => SetProperty(ref _selectedRental, value);
        }

        public DateTime NewDueDate { get; set; } = DateTime.Today.AddDays(7);

        string _currentUserName;
        public string CurrentUserName
        {
            get => _currentUserName;
            set => SetProperty(ref _currentUserName, value);
        }

        BitmapImage _currentUserPhoto;
        public BitmapImage CurrentUserPhoto
        {
            get => _currentUserPhoto;
            set => SetProperty(ref _currentUserPhoto, value);
        }

        BitmapImage _headerLogo;
        public BitmapImage HeaderLogo
        {
            get
            {
                if (_headerLogo == null)
                {
                    var path = _settingsService.GetSetting("CompanyLogoPath");
                    Uri uri;
                    if (!string.IsNullOrEmpty(path))
                    {
                        var full = Utilities.Helpers.PathHelper.GetAbsolutePath(path);
                        uri = !string.IsNullOrEmpty(full) && File.Exists(full)
                            ? new Uri(full, UriKind.Absolute)
                            : new Uri("pack://application:,,,/Resources/DefaultLogo.png", UriKind.Absolute);
                    }
                    else
                    {
                        uri = new Uri("pack://application:,,,/Resources/DefaultLogo.png", UriKind.Absolute);
                    }
                    var bmp = new BitmapImage();
                    bmp.BeginInit();
                    bmp.UriSource = uri;
                    bmp.CacheOption = BitmapCacheOption.OnLoad;
                    bmp.EndInit();
                    bmp.Freeze();
                    _headerLogo = bmp;
                }
                return _headerLogo;
            }
        }

        public string SearchTerm { get; set; }
        public string CustomerSearchTerm { get; set; }
        public bool IsLastAdmin =>
            SelectedUser != null &&
            SelectedUser.IsAdmin &&
            Users.Count(u => u.IsAdmin) == 1;

        public string UserPassword { get; set; }
        public string NewPassword { get; set; }
        public string ConfirmPassword { get; set; }

        public IRelayCommand SearchCommand { get; }
        public IRelayCommand SearchCustomersCommand { get; }
        public IRelayCommand AddToolCommand { get; }
        public IRelayCommand UpdateToolCommand { get; }
        public IRelayCommand ImportToolsCommand { get; }
        public IRelayCommand ExportToolsCommand { get; }
        public IRelayCommand DeleteToolCommand { get; }
        public IRelayCommand LoadUsersCommand { get; }
        public IRelayCommand ChooseProfilePicCommand { get; }
        public IRelayCommand UploadUserPhotoCommand { get; }

        public IRelayCommand LoadCustomersCommand { get; }
        public IRelayCommand AddCustomerCommand { get; }
        public IRelayCommand UpdateCustomerCommand { get; }
        public IRelayCommand ImportCustomersCommand { get; }
        public IRelayCommand ExportCustomersCommand { get; }
        public IRelayCommand DeleteCustomerCommand { get; }

        public IRelayCommand RentToolCommand { get; }
        public IRelayCommand LoadActiveRentalsCommand { get; }
        public IRelayCommand LoadOverdueRentalsCommand { get; }
        public IRelayCommand ReturnToolCommand { get; }
        public IRelayCommand ExtendRentalCommand { get; }
        public IRelayCommand ViewRentalHistoryCommand { get; }

        public IRelayCommand OpenSearchToolsCommand { get; }
        public IRelayCommand OpenManageToolsCommand { get; }
        public IRelayCommand OpenRentalsCommand { get; }
        public IRelayCommand OpenCustomersCommand { get; }
        public IRelayCommand OpenReportsCommand { get; }
        public IRelayCommand OpenSettingsCommand { get; }


        public MainViewModel(
            IToolService toolService,
            IUserService userService,
            ICustomerService customerService,
            IRentalService rentalService,
            ISettingsService settingsService)
        {
            Directory.CreateDirectory(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Images"));
            Directory.CreateDirectory(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "UserPhotos"));

            _toolService = toolService;
            _userService = userService;
            _customerService = customerService;
            _rentalService = rentalService;
           _settingsService = settingsService;

           SearchCommand = new RelayCommand(SearchTools);
            SearchCustomersCommand = new RelayCommand(SearchCustomers);
            AddToolCommand = new RelayCommand(AddTool);
            UpdateToolCommand = new RelayCommand(UpdateTool, () => SelectedTool != null);
            ImportToolsCommand = new RelayCommand(ImportTools);
            ExportToolsCommand = new RelayCommand(ExportTools);
            DeleteToolCommand = new RelayCommand(DeleteTool, () => SelectedTool != null);

            LoadUsersCommand = new RelayCommand(LoadUsers);
            ChooseProfilePicCommand = new RelayCommand(ChooseProfilePic, () => Application.Current.Properties["CurrentUser"] is UserModel);
            UploadUserPhotoCommand = new RelayCommand(() => UploadPhotoForUser(SelectedUser), () => SelectedUser != null);

            LoadCustomersCommand = new RelayCommand(LoadCustomers);
            AddCustomerCommand = new RelayCommand(AddCustomer);
            UpdateCustomerCommand = new RelayCommand(UpdateCustomer, () => SelectedCustomer != null);
            ImportCustomersCommand = new RelayCommand(ImportCustomers);
            ExportCustomersCommand = new RelayCommand(ExportCustomers);
            DeleteCustomerCommand = new RelayCommand(DeleteCustomer, () => SelectedCustomer != null);

            RentToolCommand = new RelayCommand(RentSelectedTool, () => SelectedTool != null);
            LoadActiveRentalsCommand = new RelayCommand(LoadActiveRentals);
            LoadOverdueRentalsCommand = new RelayCommand(LoadOverdueRentals);
            ReturnToolCommand = new RelayCommand(ReturnSelectedRental, () => SelectedRental != null);
            ExtendRentalCommand = new RelayCommand(ExtendSelectedRental, () => SelectedRental != null);
            ViewRentalHistoryCommand = new RelayCommand(ShowRentalHistoryForSelectedTool, () => SelectedTool != null);

            OpenSearchToolsCommand = new RelayCommand(() => SetTab("Tool Search"));
            OpenManageToolsCommand = new RelayCommand(() => SetTab("Tool Management"));
            OpenRentalsCommand = new RelayCommand(() => SetTab("Rentals"));
            OpenCustomersCommand = new RelayCommand(() => SetTab("Customers"));
            OpenReportsCommand = new RelayCommand(() => SetTab("Reports"));
            OpenSettingsCommand = new RelayCommand(() => SetTab("Settings"));


            InitializeData();
            _refreshTimer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(2) };
            _refreshTimer.Tick += (_, __) => { LoadTools(); LoadCheckedOutTools(); };
            _refreshTimer.Start();
        }

        void InitializeData()
        {
            LoadTools();
            LoadCheckedOutTools();
            LoadUsers();
            LoadCurrentUser();
            LoadCustomers();
            LoadActiveRentals();
            LoadOverdueRentals();
        }

        public void LoadTools()
        {
            Tools.ReplaceRange(_toolService.GetAllTools());
        }

        void LoadCheckedOutTools()
        {
            if (!string.IsNullOrWhiteSpace(CurrentUserName))
                CheckedOutTools.ReplaceRange(_toolService.GetToolsCheckedOutBy(CurrentUserName));
            else
                CheckedOutTools.ReplaceRange(_toolService.GetAllTools().Where(t => t.IsCheckedOut));
        }

        void SearchTools()
        {
            var results = string.IsNullOrWhiteSpace(SearchTerm)
                ? _toolService.GetAllTools()
                : _toolService.SearchTools(SearchTerm);
            SearchResults.ReplaceRange(results);
        }

        void AddTool()
        {
            _toolService.AddTool(NewTool);
            LoadTools();
            NewTool = new ToolModel();
        }

        void UpdateTool()
        {
            _toolService.UpdateTool(SelectedTool);
            LoadTools();
        }

        void ImportTools()
        {
            if (!ShowFileDialog("CSV Files|*.csv", out var path)) return;
            var lines = File.ReadAllLines(path);
            if (lines.Length < 2) { ShowWarning("CSV has no data rows."); return; }
            var headers = lines[0].Split(',').Select(h => h.Trim());
            var fields = new[] { "ToolNumber", "NameDescription", "Location", "Brand", "PartNumber", "Supplier", "PurchasedDate", "Notes", "AvailableQuantity" };
            if (!ShowMappingWindow(headers, fields, out var map)) return;
            var invalid = _toolService.ImportToolsFromCsv(path, map);
            LoadTools();
            var importedCount = (lines.Length - 1) - invalid.Count;
            var msg = $"{importedCount} tools imported successfully.";
            if (invalid.Count > 0)
                msg += $" {invalid.Count} rows skipped.";
            ShowInfo(msg);

            LoadTools();
            LoadCheckedOutTools();
            LoadCustomers();
        }

        void ExportTools()
        {
            if (!ShowSaveDialog("tools_export.csv", out var path)) return;
            _toolService.ExportToolsToCsv(path);
            ShowInfo("Tools exported successfully.");
        }

        void DeleteTool()
        {
            _toolService.DeleteTool(SelectedTool.ToolID);
            LoadTools();
        }

        public void LoadUsers()
        {
            Users.ReplaceRange(_userService.GetAllUsers());
            SelectedUser = Users.FirstOrDefault();
            OnPropertyChanged(nameof(IsLastAdmin));
        }

        void LoadCurrentUser()
        {
            if (Application.Current.Properties["CurrentUser"] is UserModel cu)
            {
                CurrentUserName = cu.UserName;

                try
                {
                    Uri uri;
                    BitmapImage bmp = new BitmapImage();

                    if (string.IsNullOrWhiteSpace(cu.UserPhotoPath))
                    {
                        bmp.BeginInit();
                        bmp.UriSource = new Uri("pack://application:,,,/Resources/DefaultUserPhoto.png");
                        bmp.CacheOption = BitmapCacheOption.OnLoad;
                        bmp.EndInit();
                        bmp.Freeze();
                        CurrentUserPhoto = bmp;
                        return;
                    }

                    if (cu.UserPhotoPath.StartsWith("pack://"))
                    {
                        uri = new Uri(cu.UserPhotoPath, UriKind.Absolute);
                    }
                    else
                    {
                        var fullPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, cu.UserPhotoPath);
                        if (!File.Exists(fullPath))
                        {
                            bmp = new BitmapImage();
                            bmp.BeginInit();
                            bmp.UriSource = new Uri("pack://application:,,,/Resources/DefaultUserPhoto.png");
                            bmp.CacheOption = BitmapCacheOption.OnLoad;
                            bmp.EndInit();
                            bmp.Freeze();
                            CurrentUserPhoto = bmp;
                            return;
                        }

                        uri = new Uri($"file:///{fullPath.Replace("\\", "/")}", UriKind.Absolute);
                    }

                    bmp = new BitmapImage();
                    bmp.BeginInit();
                    bmp.CacheOption = BitmapCacheOption.OnLoad;
                    bmp.CreateOptions = BitmapCreateOptions.IgnoreImageCache;
                    bmp.UriSource = uri;
                    bmp.EndInit();
                    bmp.Freeze();
                    CurrentUserPhoto = bmp;
                }
                catch
                {
                    BitmapImage bmp = new BitmapImage();
                    bmp.BeginInit();
                    bmp.UriSource = new Uri("pack://application:,,,/Resources/DefaultUserPhoto.png");
                    bmp.CacheOption = BitmapCacheOption.OnLoad;
                    bmp.EndInit();
                    bmp.Freeze();
                    CurrentUserPhoto = bmp;
                }
            }

            LoadCheckedOutTools();
        }

        void ChooseProfilePic() => UploadPhotoForUser((UserModel)Application.Current.Properties["CurrentUser"]);

        void UploadPhotoForUser(UserModel u)
        {
            var win = new AvatarSelectionWindow();
            if (win.ShowDialog() == true && !string.IsNullOrWhiteSpace(win.SelectedAvatarPath))
            {
                ApplyAvatar(u, win.SelectedAvatarPath);
            }
        }

        internal void ApplyAvatar(UserModel u, string avatarPath)
        {
            if (u == null || string.IsNullOrWhiteSpace(avatarPath)) return;

            var baseDir = AppDomain.CurrentDomain.BaseDirectory;
            var relative = Path.Combine("Resources", "Avatars", Path.GetFileName(avatarPath));
            var full = Path.Combine(baseDir, relative);

            var bmp = new BitmapImage();
            bmp.BeginInit();
            bmp.UriSource = new Uri(full, UriKind.Absolute);
            bmp.CacheOption = BitmapCacheOption.OnLoad;
            bmp.CreateOptions = BitmapCreateOptions.IgnoreImageCache;
            bmp.EndInit();
            bmp.Freeze();

            u.UserPhotoPath = relative;
            u.PhotoBitmap = bmp;
            _userService.UpdateUser(u);

            if (Application.Current.Properties["CurrentUser"] is UserModel cu && cu.UserID == u.UserID)
            {
                cu.UserPhotoPath = relative;
                cu.PhotoBitmap = bmp;
                CurrentUserPhoto = bmp;
                CurrentUserName = cu.UserName;
            }

            LoadUsers();
        }



        public void LoadCustomers()
        {
            Customers.ReplaceRange(_customerService.GetAllCustomers());
        }

        void AddCustomer()
        {
            _customerService.AddCustomer(new CustomerModel
            {
                Company = NewCustomerName,
                Email = NewCustomerEmail,
                Contact = NewCustomerContact,
                Phone = NewCustomerPhone,
                Mobile = NewCustomerMobile,
                Address = NewCustomerAddress
            });
            LoadCustomers();

            NewCustomerName = string.Empty;
            NewCustomerEmail = string.Empty;
            NewCustomerContact = string.Empty;
            NewCustomerPhone = string.Empty;
            NewCustomerMobile = string.Empty;
            NewCustomerAddress = string.Empty;
        }

        void UpdateCustomer()
        {
            if (SelectedCustomer == null) return;

            SelectedCustomer.Company = NewCustomerName;
            SelectedCustomer.Email = NewCustomerEmail;
            SelectedCustomer.Contact = NewCustomerContact;
            SelectedCustomer.Phone = NewCustomerPhone;
            SelectedCustomer.Mobile = NewCustomerMobile;
            SelectedCustomer.Address = NewCustomerAddress;

            _customerService.UpdateCustomer(SelectedCustomer);
            LoadCustomers();
        }

        void ImportCustomers()
        {
            if (!ShowFileDialog("CSV Files|*.csv", out var path)) return;
            var lines = File.ReadAllLines(path);
            if (lines.Length < 2) { ShowWarning("CSV has no data rows."); return; }
            var headers = lines[0].Split(',').Select(h => h.Trim());
            var fields = new[] { "Company", "Email", "Contact", "Phone", "Mobile", "Address" };
            if (!ShowMappingWindow(headers, fields, out var map)) return;
            _customerService.ImportCustomersFromCsv(path, map);
            LoadCustomers();
            ShowInfo($"{lines.Length - 1} customers imported successfully.");

        }

        void ExportCustomers()
        {
            if (!ShowSaveDialog("customers_export.csv", out var path)) return;
            _customerService.ExportCustomersToCsv(path);
            ShowInfo("Customers exported successfully.");
        }

        void DeleteCustomer()
        {
            _customerService.DeleteCustomer(SelectedCustomer.CustomerID);
            LoadCustomers();
        }

        public CustomerModel GetCustomerByID(int customerID)
            => _customerService.GetCustomerByID(customerID);

        public List<CustomerModel> SearchCustomers(string searchTerm)
            => _customerService.SearchCustomers(searchTerm);

        void SearchCustomers()
        {
            var results = string.IsNullOrWhiteSpace(CustomerSearchTerm)
                ? _customerService.GetAllCustomers()
                : _customerService.SearchCustomers(CustomerSearchTerm);
            Customers.ReplaceRange(results);
        }

        void RentSelectedTool()
        {
            if (SelectedTool == null || SelectedTool.QuantityOnHand <= 0)
            {
                ShowWarning("Tool not selected or no available quantity.");
                return;
            }

            LoadCustomers();
            if (Customers.Count == 0)
            {
                ShowWarning("No customers available. Please add a customer first.");
                return;
            }

            var vm = new RentToolPopupViewModel(SelectedTool, Customers);
            var popup = new RentToolPopupWindow { DataContext = vm };
            vm.RequestClose += (_, __) => popup.Close();
            popup.ShowDialog();

            if (vm.SelectedCustomerResult == null) return;

            try
            {
                _rentalService.RentTool(
                    SelectedTool.ToolID,
                    vm.SelectedCustomerResult.CustomerID,
                    DateTime.Now,
                    vm.SelectedDueDateResult);
            }
            catch (InvalidOperationException ex)
            {
                ShowWarning(ex.Message);
                return;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                ShowWarning($"Rental failed: {ex.Message}");
                return;
            }

            LoadTools();
            LoadCheckedOutTools();
            LoadActiveRentals();
            LoadOverdueRentals();
        }

        void SetTab(string tabHeader)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                if (Application.Current.MainWindow is MainWindow mw)
                {
                    foreach (TabItem tab in mw.MyTabControl.Items)
                    {
                        if (tab.Header.ToString() == tabHeader)
                        {
                            mw.MyTabControl.SelectedItem = tab;
                            break;
                        }
                    }
                }
            });
        }


        public void LoadActiveRentals()
        {
            ActiveRentals.ReplaceRange(_rentalService.GetActiveRentals());
            SelectedRental = null;
        }

        void LoadOverdueRentals()
        {
            OverdueRentals.ReplaceRange(_rentalService.GetOverdueRentals());
        }

        void ReturnSelectedRental()
        {
            _rentalService.ReturnTool(SelectedRental.RentalID, DateTime.Now);
            LoadActiveRentals();
            LoadOverdueRentals();
        }

        void ExtendSelectedRental()
        {
            _rentalService.ExtendRental(SelectedRental.RentalID, NewDueDate);
            LoadActiveRentals();
            LoadOverdueRentals();
        }

        void ShowRentalHistoryForSelectedTool()
        {
            if (SelectedTool == null) return;

            var history = _rentalService.GetRentalHistoryForTool(SelectedTool.ToolID);
            var vm = new RentalHistoryViewModel(SelectedTool, history);
            var win = new RentalHistoryWindow { DataContext = vm };
            win.ShowDialog();
        }

        bool ShowFileDialog(string filter, out string path)
        {
            var dlg = new OpenFileDialog { Filter = filter };
            if (dlg.ShowDialog() == true) { path = dlg.FileName; return true; }
            path = null; return false;
        }

        bool ShowSaveDialog(string defaultName, out string path)
        {
            var dlg = new SaveFileDialog { Filter = "CSV Files|*.csv", FileName = defaultName };
            if (dlg.ShowDialog() == true) { path = dlg.FileName; return true; }
            path = null; return false;
        }

        bool ShowMappingWindow(IEnumerable<string> headers, IEnumerable<string> fields, out Dictionary<string, string> map)
        {
            var win = new ImportMappingWindow(headers, fields);
            if (win.ShowDialog() == true)
            {
                map = win.VM.Mappings.ToDictionary(m => m.PropertyName, m => m.SelectedColumn);
                return true;
            }
            map = null;
            return false;
        }

        void ShowInfo(string msg) => MessageBox.Show(msg, "Info", MessageBoxButton.OK, MessageBoxImage.Information);
        void ShowWarning(string msg) => MessageBox.Show(msg, "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
    }
}


// File: ToolManagementAppV2\ViewModels\RentalHistoryViewModel.cs
// Lines: 20, Size: 669 bytes
using CommunityToolkit.Mvvm.ComponentModel;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using ToolManagementAppV2.Models.Domain;

namespace ToolManagementAppV2.ViewModels.Rental
{
    public class RentalHistoryViewModel : ObservableObject
    {
        public ObservableCollection<RentalModel> History { get; }
        public string ToolDisplayName { get; }

        public RentalHistoryViewModel(ToolModel tool, IEnumerable<RentalModel> history)
        {
            ToolDisplayName = $"{tool.ToolNumber} - {tool.NameDescription}";
            History = new ObservableCollection<RentalModel>(history);
        }
    }
}


// File: ToolManagementAppV2\ViewModels\RentalViewModel.cs
// Lines: 22, Size: 550 bytes
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.ViewModels
{
    internal class RentalViewModel : ObservableObject
    {
        private RentalModel _rental;
        public RentalModel Rental
        {
            get => _rental;
            set => SetProperty(ref _rental, value);
        }

        public RentalViewModel(RentalModel rental)
        {
            _rental = rental;
        }

        public string StatusSummary => $"{_rental.Status} (Due: {_rental.DueDate:yyyy-MM-dd})";
    }
}


// File: ToolManagementAppV2\ViewModels\RentToolPopupViewModel.cs
// Lines: 31, Size: 1103 bytes
using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.ObjectModel;
using ToolManagementAppV2.Models.Domain;

namespace ToolManagementAppV2.ViewModels.Rental
{
    public class RentToolPopupViewModel : ObservableObject
    {
        public ObservableCollection<CustomerModel> Customers { get; }
        public CustomerModel SelectedCustomer { get; set; }
        public DateTime SelectedDueDate { get; set; } = DateTime.Today.AddDays(7);
        public event EventHandler RequestClose;

        public CustomerModel SelectedCustomerResult { get; private set; }
        public DateTime SelectedDueDateResult { get; private set; }

        public RentToolPopupViewModel(ToolModel tool, IEnumerable<CustomerModel> customers)
        {
            Customers = new ObservableCollection<CustomerModel>(customers);
        }

        public void Confirm()
        {
            SelectedCustomerResult = SelectedCustomer;
            SelectedDueDateResult = SelectedDueDate;
            RequestClose?.Invoke(this, EventArgs.Empty);
        }
    }
}


// File: ToolManagementAppV2\ViewModels\SettingsViewModel.cs
// Lines: 29, Size: 800 bytes
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.ViewModels
{
    internal class SettingsViewModel : ObservableObject
    {
        private string _applicationName;
        public string ApplicationName
        {
            get => _applicationName;
            set => SetProperty(ref _applicationName, value);
        }

        private string _companyLogoPath;
        public string CompanyLogoPath
        {
            get => _companyLogoPath;
            set => SetProperty(ref _companyLogoPath, value);
        }

        private int _defaultRentalDuration;
        public int DefaultRentalDuration
        {
            get => _defaultRentalDuration;
            set => SetProperty(ref _defaultRentalDuration, value);
        }
    }
}


// File: ToolManagementAppV2\ViewModels\ToolViewModel.cs
// Lines: 22, Size: 516 bytes
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.ViewModels
{
    internal class ToolViewModel : ObservableObject
    {
        private ToolModel _tool;
        public ToolModel Tool
        {
            get => _tool;
            set => SetProperty(ref _tool, value);
        }

        public ToolViewModel(ToolModel tool)
        {
            _tool = tool;
        }

        public string DisplayName => $"{_tool.ToolNumber} - {_tool.NameDescription}";
    }
}


// File: ToolManagementAppV2\ViewModels\UserViewModel.cs
// Lines: 22, Size: 527 bytes
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.ViewModels
{
    internal class UserViewModel : ObservableObject
    {
        private UserModel _user;
        public UserModel User
        {
            get => _user;
            set => SetProperty(ref _user, value);
        }

        public UserViewModel(UserModel user)
        {
            _user = user;
        }

        public string DisplayName => $"{_user.UserName} ({(_user.IsAdmin ? "Admin" : "User")})";
    }
}


// File: ToolManagementAppV2\Views\AvatarSelectionWindow.xaml
// Lines: 47, Size: 1963 bytes
<Window x:Class="ToolManagementAppV2.Views.AvatarSelectionWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Tool Inventory Management – Select Avatar"
        Height="650" Width="1600"
        WindowStartupLocation="CenterScreen">
    <DockPanel Margin="10">

        <!-- HEADER -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <TextBlock Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                       FontWeight="Bold" FontSize="20" Margin="10" />
        </Border>

        <!-- AVATAR GRID -->
        <ListBox x:Name="AvatarListBox"
                 DockPanel.Dock="Top"
                 Margin="0,4,0,0"
                 ItemsSource="{Binding Avatars}">
            <ListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <UniformGrid Columns="6" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Button Click="AvatarButton_Click"
                            Tag="{Binding}"
                            Background="Transparent"
                            BorderThickness="0"
                            Margin="5">
                        <Border Background="#dadada" CornerRadius="5" Padding="10">
                            <Image Source="{Binding}" Width="100" Height="100"/>
                        </Border>
                    </Button>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!-- STATUS BAR -->
        <StatusBar DockPanel.Dock="Bottom" Background="LightGray" Height="25">
            <StatusBarItem Content="Ready" />
        </StatusBar>

    </DockPanel>
</Window>


// File: ToolManagementAppV2\Views\AvatarSelectionWindow.xaml.cs
// Lines: 46, Size: 1614 bytes
using System.IO;
using System.Windows;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Interfaces;


namespace ToolManagementAppV2.Views
{
    public partial class AvatarSelectionWindow : Window
    {
        public string SelectedAvatarPath { get; private set; }
        public Uri[] Avatars { get; private set; } = Array.Empty<Uri>();

        public AvatarSelectionWindow()
        {
            InitializeComponent();

            var dbPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "tool_inventory.db");
            var dbService = new DatabaseService(dbPath);
            var settingsService = new SettingsService(dbService);
            var appName = settingsService.GetSetting("ApplicationName");
            if (!string.IsNullOrWhiteSpace(appName))
                Title = $"{appName} – Select Avatar";

            var avatarDir = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Resources", "Avatars");
            if (Directory.Exists(avatarDir))
                Avatars = Directory
                    .EnumerateFiles(avatarDir, "*.png")
                    .Select(path => new Uri(path, UriKind.Absolute))
                    .ToArray();

            DataContext = this;
        }

        private void AvatarButton_Click(object sender, RoutedEventArgs e)
        {
            if (sender is FrameworkElement fe && fe.Tag is Uri uri)
            {
                SelectedAvatarPath = uri.LocalPath;
                DialogResult = true;
            }
        }
    }
}


// File: ToolManagementAppV2\Views\ImportMappingWindow.xaml
// Lines: 47, Size: 2354 bytes
<Window x:Class="ToolManagementAppV2.Views.ImportMappingWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Tool Inventory Management – Map CSV Columns"
        Height="350" Width="450"
        WindowStartupLocation="CenterScreen">
    <DockPanel Margin="10">
        <!-- HEADER -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <TextBlock Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                       FontWeight="Bold" FontSize="20" Margin="10"/>
        </Border>

        <!-- MAPPING GRID -->
        <DataGrid ItemsSource="{Binding Mappings}"
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  Margin="0,0,0,40">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Property"
                                    Binding="{Binding PropertyName}"
                                    IsReadOnly="True"/>
                <DataGridTemplateColumn Header="CSV Column">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding SelectedColumn}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                    <DataGridTemplateColumn.CellEditingTemplate>
                        <DataTemplate>
                            <ComboBox ItemsSource="{Binding DataContext.ColumnHeaders,
                                      RelativeSource={RelativeSource AncestorType=Window}}"
                                      SelectedItem="{Binding SelectedColumn,Mode=TwoWay}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellEditingTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- OK / Cancel -->
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" DockPanel.Dock="Bottom">
            <Button Content="OK"   Width="75" Margin="5" Click="Ok_Click"/>
            <Button Content="Cancel" Width="75" Margin="5" Click="Cancel_Click"/>
        </StackPanel>
    </DockPanel>
</Window>


// File: ToolManagementAppV2\Views\ImportMappingWindow.xaml.cs
// Lines: 35, Size: 1013 bytes
// File: Views/ImportMappingWindow.xaml.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using ToolManagementAppV2.ViewModels;

namespace ToolManagementAppV2.Views
{
    public partial class ImportMappingWindow : Window
    {
        public ImportMappingWindow(IEnumerable<string> headers, IEnumerable<string> propertyNames)
        {
            InitializeComponent();
            DataContext = new ImportMappingViewModel(headers, propertyNames);
        }

        public ImportMappingViewModel VM => (ImportMappingViewModel)DataContext;

        private void Ok_Click(object sender, RoutedEventArgs e)
        {
            if (VM.Mappings.Any(m => string.IsNullOrEmpty(m.SelectedColumn)))
                return;
            DialogResult = true;
            Close();
        }

        private void Cancel_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
    }
}


// File: ToolManagementAppV2\Views\LoginWindow.xaml
// Lines: 102, Size: 4976 bytes
<Window x:Class="ToolManagementAppV2.LoginWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:ToolManagementAppV2.Utilities.Converters"
        Title="Tool Inventory Management – Login"
        Height="650" Width="1600"
        WindowStartupLocation="CenterScreen"
        Background="White">
    <Window.Resources>
        <local:NullToDefaultImageConverter x:Key="NullToDefaultImageConverter"/>
        <local:BooleanToAdminConverter    x:Key="BooleanToAdminConverter"/>
    </Window.Resources>

    <DockPanel>

        <!-- HEADER -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <DockPanel>
                <Image x:Name="LoginLogo" Width="50" Height="50" Margin="10"/>
                <TextBlock x:Name="HeaderTitle"
                           Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                           FontWeight="Bold"
                           FontSize="20"
                           VerticalAlignment="Center"
                           Margin="10,0,0,0"/>
            </DockPanel>
        </Border>

        <!-- CONTENT -->
        <Grid Margin="10">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <TextBlock Text="Select User to Login:"
                       FontSize="16"
                       FontWeight="SemiBold"
                       Margin="0,0,0,10"
                       HorizontalAlignment="Center"
                       Grid.Row="0"/>

            <ListBox x:Name="UsersListBox"
                     Grid.Row="1"
                     HorizontalAlignment="Center"
                     BorderThickness="0"
                     Background="Transparent"
                     HorizontalContentAlignment="Center"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     ScrollViewer.VerticalScrollBarVisibility="Auto"
                     MaxHeight="350">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListBoxItem">
                                    <ContentPresenter/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Width="120" Margin="5">
                            <Button Click="UserButton_Click"
                                    Tag="{Binding}"
                                    Background="Transparent"
                                    BorderThickness="0">
                                <StackPanel>
                                    <Image Source="{Binding PhotoBitmap,
                                                   Converter={StaticResource NullToDefaultImageConverter},
                                                   ConverterParameter=User}"
                                           Width="80" Height="80" Stretch="Uniform"/>
                                    <TextBlock Text="{Binding UserName}"
                                               TextAlignment="Center"
                                               Margin="0,5,0,0"
                                               FontWeight="SemiBold"/>
                                    <TextBlock Text="{Binding IsAdmin,
                                                   Converter={StaticResource BooleanToAdminConverter}}"
                                               FontSize="10"
                                               Foreground="Red"
                                               TextAlignment="Center"/>
                                </StackPanel>
                            </Button>
                        </StackPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </Grid>
    </DockPanel>
</Window>


// File: ToolManagementAppV2\Views\LoginWindow.xaml.cs
// Lines: 123, Size: 4719 bytes
using System.IO;
using System.Windows;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Utilities.Helpers;
using ToolManagementAppV2.Interfaces;

namespace ToolManagementAppV2
{
    public partial class LoginWindow : Window
    {
        readonly IUserService _userService;

        public LoginWindow()
        {
            InitializeComponent();

            var dbPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "tool_inventory.db");
            var dbService = new DatabaseService(dbPath);
            var settings = new SettingsService(dbService);

            var logoPath = settings.GetSetting("CompanyLogoPath");
            Uri logoUri;
            if (!string.IsNullOrWhiteSpace(logoPath))
            {
                var full = Utilities.Helpers.PathHelper.GetAbsolutePath(logoPath);
                logoUri = !string.IsNullOrEmpty(full) && File.Exists(full)
                    ? new Uri(full)
                    : new Uri("pack://application:,,,/Resources/DefaultLogo.png");
            }
            else
            {
                logoUri = new Uri("pack://application:,,,/Resources/DefaultLogo.png");
            }
            var bitmap = new BitmapImage();
            bitmap.BeginInit();
            bitmap.UriSource = logoUri;
            bitmap.CacheOption = BitmapCacheOption.OnLoad;
            bitmap.EndInit();
            bitmap.Freeze();
            LoginLogo.Source = bitmap;

            var appName = settings.GetSetting("ApplicationName");
            Title = !string.IsNullOrWhiteSpace(appName)
                    ? $"{appName} – Login"
                    : Title;

            _userService = new UserService(dbService);
            LoadUsers();
        }

        void LoadUsers()
        {
            var users = _userService.GetAllUsers();
            if (users.Count == 0)
            {
                MessageBox.Show(
                    "No users exist. A default admin account will be created (username: admin, password: admin).",
                    "Setup", MessageBoxButton.OK, MessageBoxImage.Information);

                var admin = new User { UserName = "admin", Password = "admin", IsAdmin = true };
                _userService.AddUser(admin);
                users = _userService.GetAllUsers();
            }

            UsersListBox.ItemsSource = users;
        }

        void UserButton_Click(object sender, RoutedEventArgs e)
        {
            if (!(sender is FrameworkElement fe && fe.Tag is User user)) return;

            if (user.IsAdmin && string.IsNullOrWhiteSpace(user.Password))
            {
                _userService.ChangeUserPassword(user.UserID, "admin");
                user.Password = SecurityHelper.ComputeSha256Hash("admin");
            }

            var defaultHash = SecurityHelper.ComputeSha256Hash("newpassword");
            if (!user.IsAdmin &&
                (string.IsNullOrWhiteSpace(user.Password) ||
                 user.Password.Equals(defaultHash, StringComparison.OrdinalIgnoreCase)))
            {
                App.Current.Properties["CurrentUser"] = user;
                DialogResult = true;
                return;
            }

            var passwordValidated = false;
            while (!passwordValidated)
            {
                var prompt = new PasswordPromptWindow
                {
                    SelectedUser = user,
                    ValidatePassword = pwd => _userService.AuthenticateUser(user.UserName, pwd) != null
                };

                if (prompt.ShowDialog() != true) return;

                if (prompt.IsPasswordResetRequested)
                {
                    _userService.ChangeUserPassword(user.UserID, "admin");
                    user.Password = SecurityHelper.ComputeSha256Hash("admin");
                    LoadUsers();
                    MessageBox.Show("Password has been reset to default. Please enter the new password to login.", "Password Reset", MessageBoxButton.OK, MessageBoxImage.Information);
                    continue;
                }

                var credential = _userService.AuthenticateUser(user.UserName, prompt.EnteredPassword);
                if (credential != null)
                {
                    App.Current.Properties["CurrentUser"] = credential;
                    DialogResult = true;
                    passwordValidated = true;
                }
            }
        }
    }
}


// File: ToolManagementAppV2\Views\PasswordPromptWindow.xaml
// Lines: 71, Size: 2621 bytes
<Window x:Class="ToolManagementAppV2.PasswordPromptWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Enter Password"
        Height="250" Width="350"
        WindowStartupLocation="CenterScreen"
        Background="White"
        WindowStyle="ToolWindow"
        ResizeMode="NoResize">

    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Updated: Named so we can set it in code -->
        <TextBlock x:Name="PromptTextBlock"
                   Text="Enter your password:"
                   FontSize="14"
                   FontWeight="Bold"
                   Grid.Row="0"
                   Margin="0,0,0,10"/>

        <PasswordBox x:Name="PasswordBox"
                     Grid.Row="1"
                     Height="30"
                     FontSize="14"
                     FocusManager.FocusedElement="{Binding RelativeSource={RelativeSource Self}}"/>

        <TextBlock x:Name="ErrorTextBlock"
                   Grid.Row="2"
                   Foreground="Red"
                   FontSize="12"
                   Visibility="Collapsed"
                   Margin="0,5,0,5"/>

        <StackPanel Grid.Row="3"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right">
            <!-- Enter = OK_Click -->
            <Button Content="OK"
                    Width="75"
                    Margin="5"
                    IsDefault="True"
                    Click="OK_Click"/>
            <!-- Esc = Cancel_Click -->
            <Button Content="Cancel"
                    Width="75"
                    Margin="5"
                    IsCancel="True"
                    Click="Cancel_Click"/>
        </StackPanel>

        <TextBlock x:Name="ForgotPasswordTextBlock"
                   Text="Forgot your password?"
                   Foreground="Blue"
                   TextDecorations="Underline"
                   FontSize="12"
                   Visibility="Collapsed"
                   Cursor="Hand"
                   Grid.Row="4"
                   HorizontalAlignment="Center"
                   Margin="0,10,0,0"
                   MouseLeftButtonUp="ForgotPasswordTextBlock_MouseLeftButtonUp"/>
    </Grid>
</Window>


// File: ToolManagementAppV2\Views\PasswordPromptWindow.xaml.cs
// Lines: 89, Size: 2741 bytes
using System.Windows;
using System.Windows.Input;
using ToolManagementAppV2.Models.Domain;

namespace ToolManagementAppV2
{
    public partial class PasswordPromptWindow : Window
    {
        const int MaxAttempts = 2;
        int _attemptCount;

        public string EnteredPassword { get; private set; }
        public bool IsPasswordResetRequested { get; private set; }
        public Func<string, bool> ValidatePassword { get; set; }
        public User SelectedUser { get; set; }

        public PasswordPromptWindow()
        {
            InitializeComponent();
            Loaded += OnLoaded;
        }

        void OnLoaded(object sender, RoutedEventArgs e)
        {
            if (SelectedUser != null)
                PromptTextBlock.Text = $"{SelectedUser.UserName}, please enter your password:";
            PasswordBox.Focus();
        }

        void OK_Click(object sender, RoutedEventArgs e)
        {
            var pwd = PasswordBox.Password;
            if (ValidatePassword?.Invoke(pwd) == true)
            {
                EnteredPassword = pwd;
                DialogResult = true;
                return;
            }

            ShowError("Incorrect password. Please try again.");
        }

        void Cancel_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
        }

        void ShowError(string message)
        {
            _attemptCount++;
            ErrorTextBlock.Text = message;
            ErrorTextBlock.Visibility = Visibility.Visible;

            ForgotPasswordTextBlock.Visibility = _attemptCount >= MaxAttempts
                ? Visibility.Visible
                : Visibility.Collapsed;

            PasswordBox.Clear();
            PasswordBox.Focus();
        }

        void ForgotPasswordTextBlock_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (SelectedUser?.IsAdmin != true)
            {
                MessageBox.Show(
                    "Password recovery is only available for admin users.",
                    "Not Allowed",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning
                );
                return;
            }

            var result = MessageBox.Show(
                "You have entered the wrong password multiple times. Reset to default and change it after login?",
                "Reset Password",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question
            );

            if (result != MessageBoxResult.Yes) return;

            IsPasswordResetRequested = true;
            DialogResult = true;
        }
    }
}


// File: ToolManagementAppV2\Views\PrintPreviewWindow.xaml
// Lines: 83, Size: 3405 bytes
<Window x:Class="ToolManagementAppV2.Views.PrintPreviewWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Print Preview"
        Height="800" Width="1000"
        WindowStartupLocation="CenterOwner"
        Background="White">
    <DockPanel Margin="10">

        <!-- HEADER -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Image x:Name="PreviewLogo"
                       Width="40" Height="40"
                       VerticalAlignment="Center"
                       Grid.Column="0"/>

                <TextBlock x:Name="PreviewTitle"
                           Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                           FontWeight="Bold"
                           FontSize="20"
                           VerticalAlignment="Center"
                           Margin="10,0"
                           Grid.Column="1"/>

                <StackPanel Orientation="Horizontal"
                            VerticalAlignment="Center"
                            Grid.Column="2">
                    <Button Content="Print"
                            Margin="0,0,5,0"
                            Padding="8,4"
                            MinWidth="80"
                            Background="#FF2D89EF"
                            Foreground="White"
                            FontWeight="SemiBold"
                            BorderBrush="#FF1E5FAF"
                            BorderThickness="1"
                            Cursor="Hand"
                            Click="Print_Click"/>
                    <Button Content="Close"
                            Padding="8,4"
                            MinWidth="80"
                            Background="#FFCD3C3C"
                            Foreground="White"
                            FontWeight="SemiBold"
                            BorderBrush="#FF912528"
                            BorderThickness="1"
                            Cursor="Hand"
                            Click="Close_Click"/>
                </StackPanel>
            </Grid>
        </Border>

        <!-- PREVIEW AREA -->
        <Border DockPanel.Dock="Top"
                Margin="0,4,0,0"
                BorderBrush="#DDD"
                BorderThickness="1"
                CornerRadius="4"
                Background="White">
            <FlowDocumentReader x:Name="DocViewer"
                                IsPrintEnabled="False"
                                IsFindEnabled="True"/>
        </Border>

        <!-- STATUS BAR -->
        <StatusBar DockPanel.Dock="Bottom"
                   Background="LightGray"
                   Height="25">
            <StatusBarItem Content="Ready to print" />
            <StatusBarItem HorizontalAlignment="Right"
                           Content="{Binding ElementName=DocViewer, Path=ViewingMode, StringFormat='Mode: {0}'}"/>
        </StatusBar>

    </DockPanel>
</Window>


// File: ToolManagementAppV2\Views\PrintPreviewWindow.xaml.cs
// Lines: 71, Size: 2260 bytes
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Utilities.Helpers;

namespace ToolManagementAppV2.Views
{
    public partial class PrintPreviewWindow : Window
    {
        FlowDocument _document;
        string _title;
        string _logoPath;

        public PrintPreviewWindow()
        {
            InitializeComponent();
        }

        public void ShowPreview(FlowDocument document, string title, string logoPath)
        {
            _document = document ?? throw new ArgumentNullException(nameof(document));
            _title = title ?? throw new ArgumentNullException(nameof(title));
            _logoPath = logoPath;

            Title = $"Print Preview – {_title}";
            PreviewTitle.Text = _title;

            Uri logoUri;
            if (!string.IsNullOrWhiteSpace(_logoPath))
            {
                var full = Utilities.Helpers.PathHelper.GetAbsolutePath(_logoPath);
                logoUri = !string.IsNullOrEmpty(full) && File.Exists(full)
                    ? new Uri(full, UriKind.Absolute)
                    : new Uri("pack://application:,,,/Resources/DefaultLogo.png");
            }
            else
            {
                logoUri = new Uri("pack://application:,,,/Resources/DefaultLogo.png");
            }
            var bmp = new BitmapImage();
            bmp.BeginInit();
            bmp.CacheOption = BitmapCacheOption.OnLoad;
            bmp.UriSource = logoUri;
            bmp.EndInit();
            bmp.Freeze();
            PreviewLogo.Source = bmp;

            DocViewer.Document = _document;
            Owner = Application.Current.MainWindow;
            ShowDialog();
        }

        void Print_Click(object sender, RoutedEventArgs e)
        {
            if (_document == null) return;

            var dlg = new PrintDialog();
            if (dlg.ShowDialog() != true) return;

            dlg.PrintDocument(((IDocumentPaginatorSource)_document).DocumentPaginator, _title);
        }

        void Close_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
    }
}


// File: ToolManagementAppV2\Views\RentalHistoryWindow.xaml
// Lines: 23, Size: 1458 bytes
<Window x:Class="ToolManagementAppV2.Views.RentalHistoryWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Rental History" Height="350" Width="650" WindowStartupLocation="CenterOwner">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <TextBlock Text="{Binding ToolDisplayName}" FontWeight="Bold" FontSize="16" Margin="0,0,0,10"/>
        <DataGrid ItemsSource="{Binding History}" AutoGenerateColumns="False" Grid.Row="1">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Rental ID" Binding="{Binding RentalID}" Width="*"/>
                <DataGridTextColumn Header="Customer ID" Binding="{Binding CustomerID}" Width="*"/>
                <DataGridTextColumn Header="Rental Date" Binding="{Binding RentalDate, StringFormat={}{0:yyyy-MM-dd}}" Width="*"/>
                <DataGridTextColumn Header="Due Date" Binding="{Binding DueDate, StringFormat={}{0:yyyy-MM-dd}}" Width="*"/>
                <DataGridTextColumn Header="Return Date" Binding="{Binding ReturnDate, StringFormat={}{0:yyyy-MM-dd}}" Width="*"/>
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="*"/>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>


// File: ToolManagementAppV2\Views\RentalHistoryWindow.xaml.cs
// Lines: 13, Size: 233 bytes
using System.Windows;

namespace ToolManagementAppV2.Views
{
    public partial class RentalHistoryWindow : Window
    {
        public RentalHistoryWindow()
        {
            InitializeComponent();
        }
    }
}


// File: ToolManagementAppV2\Views\RentToolPopup.xaml
// Lines: 31, Size: 1567 bytes
<Window x:Class="ToolManagementAppV2.Views.RentToolPopupWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Rent Tool" Height="200" Width="400" WindowStartupLocation="CenterScreen">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <TextBlock Text="Customer:" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center" Margin="0,0,5,5"/>
        <ComboBox ItemsSource="{Binding Customers}" 
                  SelectedItem="{Binding SelectedCustomer}" 
                  DisplayMemberPath="Company"
                  Grid.Row="0" Grid.Column="1" Margin="0,0,0,5"/>

        <TextBlock Text="Due Date:" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" Margin="0,0,5,5"/>
        <DatePicker SelectedDate="{Binding SelectedDueDate}" Grid.Row="1" Grid.Column="1" Margin="0,0,0,5"/>

        <StackPanel Grid.Row="2" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button Content="Cancel" Click="Cancel_Click" Width="75" Margin="5"/>
            <Button Content="Confirm" Click="Confirm_Click" Width="75" Margin="5"/>
        </StackPanel>
    </Grid>
</Window>


// File: ToolManagementAppV2\Views\RentToolPopup.xaml.cs
// Lines: 24, Size: 553 bytes
using System.Windows;

namespace ToolManagementAppV2.Views
{
    public partial class RentToolPopupWindow : Window
    {
        public RentToolPopupWindow()
        {
            InitializeComponent();
        }

        private void Confirm_Click(object sender, RoutedEventArgs e)
        {
            if (DataContext is ViewModels.Rental.RentToolPopupViewModel vm)
                vm.Confirm();
        }

        private void Cancel_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
    }
}



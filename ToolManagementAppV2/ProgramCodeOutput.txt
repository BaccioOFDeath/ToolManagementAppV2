Program Code Dump
==============================
File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\App.xaml.cs
--------------------------------------------------
// App.xaml.cs – Use OnExplicitShutdown while showing the login window, then switch after login
using System.Windows;

namespace ToolManagementAppV2
{
    public partial class App : Application
    {
        protected override void OnStartup(StartupEventArgs e)
        {
            // Prevent shutdown when the login window closes
            ShutdownMode = ShutdownMode.OnExplicitShutdown;
            base.OnStartup(e);

            LoginWindow login = new LoginWindow();
            bool? loginResult = login.ShowDialog();

            if (loginResult == true)
            {
                // Switch shutdown mode now that we are creating the main window
                ShutdownMode = ShutdownMode.OnMainWindowClose;
                MainWindow mainWindow = new MainWindow();
                Current.MainWindow = mainWindow;
                mainWindow.Show();
            }
            else
            {
                Shutdown();
            }
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\AssemblyInfo.cs
--------------------------------------------------
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\MainWindow.xaml.cs
--------------------------------------------------
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Services.Rentals;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Services.Tools;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.ViewModels.Main;
using ToolManagementAppV2.Views;

namespace ToolManagementAppV2
{
    public partial class MainWindow : Window
    {
        readonly DatabaseService _db;
        readonly ToolService _toolService;
        readonly CustomerService _customerService;
        readonly RentalService _rentalService;
        readonly UserService _userService;
        readonly SettingsService _settingsService;
        readonly ActivityLogService _activityLogService;
        readonly ReportService _reportService;
        readonly Printer _printer;

        public MainWindow()
        {
            InitializeComponent();

            _db = new DatabaseService(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "tool_inventory.db"));
            _toolService = new ToolService(_db);
            _customerService = new CustomerService(_db);
            _rentalService = new RentalService(_db);
            _userService = new UserService(_db);
            _settingsService = new SettingsService(_db);
            _activityLogService = new ActivityLogService(_db);
            _printer = new Printer(_settingsService);
            _reportService = new ReportService(_toolService, _rentalService, _activityLogService, _customerService, _userService);

            try
            {
                RefreshToolList();
                RefreshUserList();
                RefreshCustomerList();
                RefreshRentalList();
                LoadSettings();
            }
            catch (Exception ex)
            {
                ShowError("Initialization Error", ex);
            }

            DataContext = new MainViewModel(_toolService, _userService, _customerService, _rentalService, _settingsService);
            RestrictTabsForNonAdmin();
        }

        void RestrictTabsForNonAdmin()
        {
            if (App.Current.Properties["CurrentUser"] is User u && !u.IsAdmin)
            {
                var forbidden = new[] { "Tool Management", "Users", "Settings", "Import/Export" };
                foreach (TabItem tab in MyTabControl.Items.Cast<TabItem>().Where(t => forbidden.Contains(t.Header.ToString())).ToList())
                    MyTabControl.Items.Remove(tab);
            }
        }

        // ---------- Printing ----------
        void PrintInventoryReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateInventoryReport(), "Inventory Report");

        void PrintRentalReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateRentalReport(false), "Rental Report");

        void PrintActiveRentalsReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateRentalReport(true), "Active Rentals Report");

        void PrintActivityLogReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateActivityLogReport(), "Activity Log Report");

        void PrintCustomerReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateCustomerReport(), "Customer Report");

        void PrintUserReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateUserReport(), "User Report");

        void PrintSummaryReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateSummaryReport(), "Summary Report");

        void PrintFullRentalReport_Click(object s, RoutedEventArgs e)
            => PrintReport(_reportService.GenerateRentalReport(false), "Full Rental History Report");

        void PrintReport(FlowDocument doc, string title)
        {
            var dlg = new PrintDialog();
            if (dlg.ShowDialog() == true)
                dlg.PrintDocument(((IDocumentPaginatorSource)doc).DocumentPaginator, title);
        }

        // ---------- Tool Management ----------
        void CheckOutButton_Click(object s, RoutedEventArgs e)
        {
            if (!(s is Button btn && btn.CommandParameter is string id)) return;
            if (!(App.Current.Properties["CurrentUser"] is User cu))
            {
                ShowMessage("Error", "No current user found. Please log in again.", MessageBoxImage.Error);
                return;
            }
            _toolService.ToggleToolCheckOutStatus(id, cu.UserName);
            _activityLogService.LogAction(cu.UserID, cu.UserName, $"Toggled checkout for Tool ID: {id}");
            RefreshToolList();
        }

        void AddButton_Click(object s, RoutedEventArgs e)
        {
            var toolNumber = ToolNumberInput.Text.Trim();
            if (string.IsNullOrEmpty(toolNumber))
            {
                ShowMessage("Validation Error", "Tool Number is required.", MessageBoxImage.Warning);
                return;
            }

            if (_toolService.GetAllTools().Any(x => x.ToolNumber.Equals(toolNumber, StringComparison.OrdinalIgnoreCase)))
            {
                ShowMessage("Duplicate Tool Number", "A tool with this Tool Number already exists.", MessageBoxImage.Warning);
                return;
            }

            var tool = new Tool
            {
                ToolNumber = toolNumber,
                NameDescription = ToolNameInput.Text.Trim(),
                PartNumber = PartNumberInput.Text.Trim(),
                Brand = BrandInput.Text.Trim(),
                Location = LocationInput.Text.Trim(),
                QuantityOnHand = int.TryParse(QuantityInput.Text, out var q) ? q : 0,
                Supplier = SupplierInput.Text.Trim(),
                PurchasedDate = DateTime.TryParse(PurchasedInput.Text, out var d) ? d : (DateTime?)null,
                Notes = NotesInput.Text.Trim()
            };

            _toolService.AddTool(tool);
            RefreshToolList();
            ClearToolInputs();
        }


        void UpdateButton_Click(object s, RoutedEventArgs e)
        {
            if (!(ToolsList.SelectedItem is Tool t)) return;
            t.ToolNumber = ToolNumberInput.Text.Trim();
            t.NameDescription = ToolNameInput.Text.Trim();
            t.PartNumber = PartNumberInput.Text.Trim();
            t.Brand = BrandInput.Text.Trim();
            t.Location = LocationInput.Text.Trim();
            t.QuantityOnHand = int.TryParse(QuantityInput.Text, out var q) ? q : t.QuantityOnHand;
            t.Supplier = SupplierInput.Text.Trim();
            t.PurchasedDate = DateTime.TryParse(PurchasedInput.Text, out var d) ? d : t.PurchasedDate;
            t.Notes = NotesInput.Text.Trim();
            _toolService.UpdateTool(t);
            RefreshToolList();
            ClearToolInputs();
        }

        void ClearToolInputs()
        {
            ToolNumberInput.Text = "";
            ToolNameInput.Text = "";
            PartNumberInput.Text = "";
            BrandInput.Text = "";
            LocationInput.Text = "";
            QuantityInput.Text = "";
            SupplierInput.Text = "";
            PurchasedInput.Text = "";
            NotesInput.Text = "";
        }

        void DeleteButton_Click(object s, RoutedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool t)
            {
                _toolService.DeleteTool(t.ToolID);
                RefreshToolList();
            }
        }

        void ChangeToolImage_Click(object s, RoutedEventArgs e)
        {
            if (!(ToolsList.SelectedItem is Tool t))
            {
                ShowMessage("Error", "Please select a tool first.", MessageBoxImage.Warning);
                return;
            }
            var dlg = new Microsoft.Win32.OpenFileDialog { Filter = "Image Files (*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg" };
            if (dlg.ShowDialog() != true) return;
            var destDir = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Images");
            Directory.CreateDirectory(destDir);
            var dest = Path.Combine(destDir, Path.GetFileName(dlg.FileName));
            File.Copy(dlg.FileName, dest, true);
            _toolService.UpdateToolImage(t.ToolID, dest);
            ShowMessage("Success", "Tool image updated.", MessageBoxImage.Information);
            RefreshToolList();
        }

        void ToolsList_SelectionChanged(object s, SelectionChangedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool t)
            {
                ToolNumberInput.Text = t.ToolNumber;
                ToolNameInput.Text = t.NameDescription;
                PartNumberInput.Text = t.PartNumber;
                BrandInput.Text = t.Brand;
                LocationInput.Text = t.Location;
                QuantityInput.Text = t.QuantityOnHand.ToString();
                SupplierInput.Text = t.Supplier;
                PurchasedInput.Text = t.PurchasedDate?.ToString("yyyy-MM-dd");
                NotesInput.Text = t.Notes;
            }
        }


        // ---------- Customer & Rental ----------
        void AddCustomerButton_Click(object s, RoutedEventArgs e)
        {
            var c = new Customer
            {
                Name = CustomerNameInput.Text.Trim(),
                Email = CustomerEmailInput.Text.Trim(),
                Contact = CustomerContactInput.Text.Trim(),
                Phone = CustomerPhoneInput.Text.Trim(),
                Address = CustomerAddressInput.Text.Trim()
            };
            _customerService.AddCustomer(c);
            RefreshCustomerList();
        }

        void UpdateCustomerButton_Click(object s, RoutedEventArgs e)
        {
            if (!(CustomerList.SelectedItem is Customer c)) return;
            c.Name = CustomerNameInput.Text.Trim();
            c.Email = CustomerEmailInput.Text.Trim();
            c.Contact = CustomerContactInput.Text.Trim();
            c.Phone = CustomerPhoneInput.Text.Trim();
            c.Address = CustomerAddressInput.Text.Trim();
            _customerService.UpdateCustomer(c);
            RefreshCustomerList();
        }

        void DeleteCustomerButton_Click(object s, RoutedEventArgs e)
        {
            if (CustomerList.SelectedItem is Customer c)
            {
                _customerService.DeleteCustomer(c.CustomerID);
                RefreshCustomerList();
            }
        }

        void CustomerList_SelectionChanged(object s, SelectionChangedEventArgs e)
        {
            if (CustomerList.SelectedItem is Customer c)
            {
                CustomerNameInput.Text = c.Name;
                CustomerEmailInput.Text = c.Email;
                CustomerContactInput.Text = c.Contact;
                CustomerPhoneInput.Text = c.Phone;
                CustomerAddressInput.Text = c.Address;
            }
        }

        void RentToolButton_Click(object s, RoutedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool t && CustomerList.SelectedItem is Customer c)
            {
                try
                {
                    var now = DateTime.Now;
                    _rentalService.RentTool(t.ToolID, c.CustomerID, now, now.AddDays(7));
                    var user = _userService.GetCurrentUser();
                    _activityLogService.LogAction(user.UserID, user.UserName, $"Rented tool {t.ToolID} to customer {c.CustomerID}");
                    RefreshRentalList();
                    RefreshToolList();
                }
                catch (Exception ex)
                {
                    ShowError("Error renting tool", ex);
                }
            }
        }

        void ReturnToolButton_Click(object s, RoutedEventArgs e)
        {
            if (RentalsList.SelectedItem is Rental r)
            {
                try
                {
                    _rentalService.ReturnTool(r.RentalID, DateTime.Now);
                    var user = _userService.GetCurrentUser();
                    _activityLogService.LogAction(user.UserID, user.UserName, $"Returned rental {r.RentalID}");
                    RefreshRentalList();
                    RefreshToolList();
                }
                catch (Exception ex)
                {
                    ShowError("Error returning tool", ex);
                }
            }
        }

        // ---------- User Management ----------
        void NewUserButton_Click(object s, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm)
            {
                var u = new User { UserName = "New User", Password = "newpassword", IsAdmin = false };
                _userService.AddUser(u);
                vm.LoadUsers();
                RefreshUserList();
                vm.SelectedUser = vm.Users.FirstOrDefault(x => x.UserID == u.UserID) ?? vm.Users.First();
            }
        }

        void SaveUserButton_Click(object s, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm && vm.SelectedUser != null)
            {
                var u = vm.SelectedUser;
                if (u.UserID > 0) _userService.UpdateUser(u);
                else _userService.AddUser(u);

                var id = u.UserID;
                vm.LoadUsers();
                vm.SelectedUser = vm.Users.FirstOrDefault(x => x.UserID == id) ?? vm.Users.First();
                if (App.Current.Properties["CurrentUser"] is User cu && cu.UserID == u.UserID)
                {
                    cu.UserName = u.UserName;
                    vm.CurrentUserName = u.UserName;
                    vm.CurrentUserPhoto = u.PhotoBitmap;
                    App.Current.Properties["CurrentUser"] = cu;
                }
                ShowMessage("Success", "User saved.", MessageBoxImage.Information);
            }
        }

        void DeleteUserButton_Click(object s, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm && vm.SelectedUser is User u)
            {
                if (App.Current.Properties["CurrentUser"] is User cu && cu.UserID == u.UserID)
                {
                    ShowMessage("Deletion Not Allowed", "You cannot delete your own account.", MessageBoxImage.Warning);
                    return;
                }
                _userService.DeleteUser(u.UserID);
                vm.LoadUsers();
                RefreshUserList();
                vm.SelectedUser = vm.Users.FirstOrDefault();
            }
        }

        void UploadUserPhotoButton_Click(object s, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm && vm.SelectedUser is User u)
            {
                var dlg = new AvatarSelectionWindow();
                if (dlg.ShowDialog() == true) ApplyAvatar(u, dlg.SelectedAvatarPath);
            }
        }

        void ChooseUserProfilePicButton_Click(object s, RoutedEventArgs e)
        {
            if (App.Current.Properties["CurrentUser"] is User u)
            {
                var dlg = new AvatarSelectionWindow();
                if (dlg.ShowDialog() == true) ApplyAvatar(u, dlg.SelectedAvatarPath);
            }
        }

        void ApplyAvatar(User u, string path)
        {
            var bmp = new BitmapImage(new Uri(path)) { CacheOption = BitmapCacheOption.OnLoad };
            u.UserPhotoPath = path;
            u.PhotoBitmap = bmp;
            _userService.UpdateUser(u);
            if (App.Current.Properties["CurrentUser"] is User cu && cu.UserID == u.UserID)
                (DataContext as MainViewModel).CurrentUserPhoto = bmp;
            RefreshUserList();
        }

        void PasswordBox_PasswordChanged(object s, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm && vm.SelectedUser is User u)
            {
                var pwd = ((PasswordBox)s).Password;
                vm.UserPassword = pwd;
                u.Password = pwd;
            }
        }

        void RefreshUserList()
        {
            try
            {
                var users = _userService.GetAllUsers();
                foreach (var u in users)
                {
                    if (!string.IsNullOrEmpty(u.UserPhotoPath) && File.Exists(u.UserPhotoPath))
                        u.PhotoBitmap = new BitmapImage(new Uri(u.UserPhotoPath)) { CacheOption = BitmapCacheOption.OnLoad };
                }
                UserList.ItemsSource = users;
                UserList.Items.Refresh();
            }
            catch (Exception ex)
            {
                ShowError("Error loading users", ex);
            }
        }

        void LogoutButton_Click(object s, RoutedEventArgs e)
        {
            var current = _userService.GetCurrentUser();
            if (current == null)
            {
                ShowMessage("Logout", "No user logged in.", MessageBoxImage.Warning);
                RestartToLogin();
                return;
            }
            _activityLogService.LogAction(current.UserID, current.UserName, "User logged out");
            Application.Current.ShutdownMode = ShutdownMode.OnExplicitShutdown;
            Hide();
            if (new LoginWindow().ShowDialog() == true)
            {
                Application.Current.ShutdownMode = ShutdownMode.OnMainWindowClose;
                var mw = new MainWindow();
                Application.Current.MainWindow = mw;
                mw.Show();
            }
            else Application.Current.Shutdown();
            Close();
        }

        void RestartToLogin()
        {
            Application.Current.ShutdownMode = ShutdownMode.OnMainWindowClose;
            var login = new LoginWindow();
            if (login.ShowDialog() == true) new MainWindow().Show();
            else Application.Current.Shutdown();
            Close();
        }

        // ---------- Settings & Import/Export ----------
        void SaveSettingsButton_Click(object s, RoutedEventArgs e)
        {
            if (!int.TryParse(RentalDurationInput.Text, out var days))
            {
                ShowMessage("Error", "Invalid rental duration.", MessageBoxImage.Error);
                return;
            }
            _settingsService.SaveSetting("DefaultRentalDuration", days.ToString());

            var app = ApplicationNameInput.Text.Trim();
            if (!string.IsNullOrEmpty(app))
            {
                _settingsService.SaveSetting("ApplicationName", app);
                Title = app;
                HeaderTitle.Text = app;
            }
            ShowMessage("Success", "Settings saved.", MessageBoxImage.Information);
        }

        void UploadLogoButton_Click(object s, RoutedEventArgs e)
        {
            var dlg = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Image Files (*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg",
                Title = "Select Company Logo"
            };
            if (dlg.ShowDialog() != true) return;
            LogoPreview.Source = new BitmapImage(new Uri(dlg.FileName));
            _settingsService.SaveSetting("CompanyLogoPath", dlg.FileName);
            UpdateHeaderLogo();
        }

        void RefreshToolList()
        {
            try
            {
                var tools = _toolService.GetAllTools();
                ToolsList.ItemsSource = tools;
                SearchResultsList.ItemsSource = tools;
            }
            catch (Exception ex)
            {
                ShowError("Error loading tools", ex);
            }
        }


        void RefreshCustomerList()
        {
            try
            {
                CustomerList.ItemsSource = _customerService.GetAllCustomers();
            }
            catch (Exception ex)
            {
                ShowError("Error loading customers", ex);
            }
        }

        void RefreshRentalList()
        {
            try
            {
                RentalsList.ItemsSource = _rentalService.GetActiveRentals();
            }
            catch (Exception ex)
            {
                ShowError("Error loading rentals", ex);
            }
        }

        void SearchInput_TextChanged(object s, TextChangedEventArgs e)
        {
            try
            {
                var txt = SearchInput.Text;
                SearchResultsList.ItemsSource = string.IsNullOrWhiteSpace(txt)
                    ? _toolService.GetAllTools()
                    : _toolService.SearchTools(txt);
            }
            catch (Exception ex)
            {
                ShowError("Error performing search", ex);
            }
        }

        void UpdateHeaderLogo()
        {
            try
            {
                var logoPath = _settingsService.GetSetting("CompanyLogoPath");
                HeaderIcon.Source = (!string.IsNullOrWhiteSpace(logoPath) && File.Exists(logoPath))
                    ? new BitmapImage(new Uri(logoPath))
                    : new BitmapImage(new Uri("pack://application:,,,/Resources/DefaultLogo.png"));
            }
            catch (Exception ex)
            {
                ShowError("Failed to load header logo", ex);
            }
        }

        void LoadSettings()
        {
            try
            {
                var logoPath = _settingsService.GetSetting("CompanyLogoPath");
                if (!string.IsNullOrWhiteSpace(logoPath) && File.Exists(logoPath))
                {
                    var bmp = new BitmapImage(new Uri(logoPath)) { CacheOption = BitmapCacheOption.OnLoad };
                    LogoPreview.Source = bmp;
                    HeaderIcon.Source = bmp;
                }

                var app = _settingsService.GetSetting("ApplicationName");
                if (!string.IsNullOrWhiteSpace(app))
                {
                    Title = app;
                    HeaderTitle.Text = app;
                    ApplicationNameInput.Text = app;
                }
            }
            catch (Exception ex)
            {
                ShowError("Settings Error", ex);
            }
        }

        void LoadOverdueRentals_Click(object s, RoutedEventArgs e)
        {
            try
            {
                var overdue = _rentalService.GetOverdueRentals();
                var msg = string.Join(Environment.NewLine, overdue.Select(r =>
                    $"RentalID: {r.RentalID}, ToolID: {r.ToolID}, Due: {r.DueDate:yyyy-MM-dd}"));
                ShowMessage("Overdue Rentals", msg, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                ShowError("Error loading overdue rentals", ex);
            }
        }

        void ExtendRentalButton_Click(object s, RoutedEventArgs e)
        {
            try
            {
                if (int.TryParse(RentalIDInput.Text, out var id) && DateTime.TryParse(NewDueDateInput.Text, out var due))
                {
                    _rentalService.ExtendRental(id, due);
                    ShowMessage("Success", "Rental extended.", MessageBoxImage.Information);
                    RefreshRentalList();
                }
                else ShowMessage("Error", "Invalid input.", MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                ShowError("Error extending rental", ex);
            }
        }

        void PrintRentalReceipt_Click(object s, RoutedEventArgs e)
        {
            if (!(RentalsList.SelectedItem is Rental r))
            {
                ShowMessage("Error", "No rental selected.", MessageBoxImage.Warning);
                return;
            }
            var doc = new FlowDocument { FontFamily = new FontFamily("Segoe UI"), FontSize = 12 };
            var header = new Paragraph(new Run("Rental Receipt"))
            {
                FontSize = 16,
                FontWeight = FontWeights.Bold,
                TextAlignment = TextAlignment.Center
            };
            doc.Blocks.Add(header);

            var details = new Paragraph();
            void AddLine(string text) => details.Inlines.Add(new Run(text + "\n"));
            AddLine($"Rental ID: {r.RentalID}");
            AddLine($"Tool ID: {r.ToolID}");
            AddLine($"Customer ID: {r.CustomerID}");
            AddLine($"Rental Date: {r.RentalDate:yyyy-MM-dd}");
            AddLine($"Due Date: {r.DueDate:yyyy-MM-dd}");
            if (r.ReturnDate.HasValue)
                AddLine($"Return Date: {r.ReturnDate:yyyy-MM-dd}");
            doc.Blocks.Add(details);

            var dlg = new PrintDialog();
            if (dlg.ShowDialog() == true)
                dlg.PrintDocument(((IDocumentPaginatorSource)doc).DocumentPaginator, "Rental Receipt");
        }

        void BackupDatabaseButton_Click(object s, RoutedEventArgs e)
        {
            var dlg = new Microsoft.Win32.SaveFileDialog
            {
                Filter = "SQLite Database (*.db)|*.db",
                Title = "Select Backup Location",
                FileName = "tool_inventory_backup.db"
            };
            if (dlg.ShowDialog() != true) return;
            try
            {
                _db.BackupDatabase(dlg.FileName);
                ShowMessage("Success", "Backup completed.", MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                ShowError("Error backing up database", ex);
            }
        }

        void RefreshLogsButton_Click(object s, RoutedEventArgs e)
        {
            try
            {
                ActivityLogsList.ItemsSource = _activityLogService.GetRecentLogs(100);
            }
            catch (Exception ex)
            {
                ShowError("Error retrieving logs", ex);
            }
        }

        void PurgeLogsButton_Click(object s, RoutedEventArgs e)
        {
            if (MessageBox.Show("Purge logs older than 30 days?", "Confirm", MessageBoxButton.YesNo, MessageBoxImage.Question) != MessageBoxResult.Yes)
                return;
            try
            {
                _activityLogService.PurgeOldLogs(DateTime.Now.AddDays(-30));
                ShowMessage("Success", "Old logs purged.", MessageBoxImage.Information);
                RefreshLogsButton_Click(s, e);
            }
            catch (Exception ex)
            {
                ShowError("Error purging logs", ex);
            }
        }

        void PrintSearchResults_Click(object s, RoutedEventArgs e)
        {
            var tools = (SearchResultsList.ItemsSource as IEnumerable<Tool>) ?? SearchResultsList.Items.OfType<Tool>();
            if (!tools.Any())
            {
                ShowMessage("Print Search Results", "No items to print.", MessageBoxImage.Information);
                return;
            }
            _printer.PrintTools(tools, "Search Results");
        }

        void PrintMyCheckedOutTools_Click(object s, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm)
                _printer.PrintTools(vm.CheckedOutTools, "My Checked-Out Tools", vm.CurrentUserName);
        }

        // ---------- Helpers ----------
        void ShowMessage(string title, string msg, MessageBoxImage icon)
            => MessageBox.Show(msg, title, MessageBoxButton.OK, icon);

        void ShowError(string title, Exception ex)
            => MessageBox.Show(ex.Message, title, MessageBoxButton.OK, MessageBoxImage.Error);
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Interfaces\IActivityLogService.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Models.Domain;

namespace ToolManagementAppV2.Interfaces
{
    internal interface IActivityLogService
    {
        void LogAction(int userID, string userName, string action);
        List<ActivityLog> GetRecentLogs(int count = 50);
        void PurgeOldLogs(DateTime threshold);
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Interfaces\ICustomerService.cs
--------------------------------------------------
using System.Collections.Generic;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Models.Domain;

namespace ToolManagementAppV2.Interfaces
{
    internal interface ICustomerService
    {
        void AddCustomer(Customer customer);
        void UpdateCustomer(Customer customer);
        void DeleteCustomer(int customerID);
        Customer GetCustomerByID(int customerID);
        List<Customer> GetAllCustomers();
        List<Customer> SearchCustomers(string searchTerm);
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Interfaces\IRentalService.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Models.Domain;

namespace ToolManagementAppV2.Interfaces
{
    internal interface IRentalService
    {
        void RentTool(string toolID, int customerID, DateTime rentalDate, DateTime dueDate);
        void ReturnTool(int rentalID, DateTime returnDate);
        void ExtendRental(int rentalID, DateTime newDueDate);
        List<Rental> GetActiveRentals();
        List<Rental> GetOverdueRentals();
        List<Rental> GetAllRentals();
        List<Rental> GetRentalHistoryForTool(int toolID);
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Interfaces\ISettingsService.cs
--------------------------------------------------
using System.Collections.Generic;

namespace ToolManagementAppV2.Interfaces
{
    internal interface ISettingsService
    {
        void SaveSetting(string key, string value);
        string GetSetting(string key);
        Dictionary<string, string> GetAllSettings();
        void UpdateSettings(Dictionary<string, string> settings);
        void DeleteSetting(string key);
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Interfaces\IToolService.cs
--------------------------------------------------
using System.Collections.Generic;
using ToolManagementAppV2.Models;


namespace ToolManagementAppV2.Interfaces
{
    internal interface IToolService
    {
        void AddTool(ToolModel tool);
        void UpdateTool(ToolModel tool);
        void DeleteTool(string toolID);
        ToolModel GetToolByID(string toolID);
        List<ToolModel> GetAllTools();
        List<ToolModel> SearchTools(string searchText);
        void ToggleToolCheckOutStatus(string toolID, string currentUser);
        List<ToolModel> GetToolsCheckedOutBy(string userName);
        void UpdateToolImage(string toolID, string imagePath);
        void ImportToolsFromCsv(string filePath, IDictionary<string, string> map);
        void ExportToolsToCsv(string filePath);
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Interfaces\IUserService.cs
--------------------------------------------------
using System.Collections.Generic;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Models.Domain;

namespace ToolManagementAppV2.Interfaces
{
    internal interface IUserService
    {
        List<User> GetAllUsers();
        User GetUserByID(int userID);
        User AuthenticateUser(string userName, string password);
        User GetCurrentUser();
        void AddUser(User user);
        void UpdateUser(User user);
        void DeleteUser(int userID);
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\ModelAliases.cs
--------------------------------------------------
global using ToolModel = ToolManagementAppV2.Models.Domain.Tool;
global using UserModel = ToolManagementAppV2.Models.Domain.User;
global using CustomerModel = ToolManagementAppV2.Models.Domain.Customer;
global using RentalModel = ToolManagementAppV2.Models.Domain.Rental;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\PathHelper.cs
--------------------------------------------------
using System;
using System.IO;

namespace ToolManagementAppV2.Utilities
{
    public static class PathHelper
    {
        public static string GetAbsolutePath(string relativePath)
        {
            return Path.Combine(AppDomain.CurrentDomain.BaseDirectory, relativePath);
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\SecurityHelper.cs
--------------------------------------------------
using System.Security.Cryptography;
using System.Text;

namespace ToolManagementAppV2.Utilities
{
    public static class SecurityHelper
    {
        public static string ComputeSha256Hash(string rawData)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));
                StringBuilder builder = new StringBuilder();
                foreach (byte b in bytes)
                {
                    builder.Append(b.ToString("x2")); // lowercase hex
                }
                return builder.ToString();
            }
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Views\AvatarSelectionWindow.xaml.cs
--------------------------------------------------
using System.IO;
using System.Windows;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Services.Settings;


namespace ToolManagementAppV2.Views
{
    public partial class AvatarSelectionWindow : Window
    {
        public string SelectedAvatarPath { get; private set; }
        public Uri[] Avatars { get; private set; } = Array.Empty<Uri>();

        public AvatarSelectionWindow()
        {
            InitializeComponent();

            var dbService = new DatabaseService("tool_inventory.db");
            var settingsService = new SettingsService(dbService);
            var appName = settingsService.GetSetting("ApplicationName");
            if (!string.IsNullOrWhiteSpace(appName))
                Title = $"{appName} – Select Avatar";

            var avatarDir = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Resources", "Avatars");
            if (Directory.Exists(avatarDir))
                Avatars = Directory
                    .EnumerateFiles(avatarDir, "*.png")
                    .Select(path => new Uri(path, UriKind.Absolute))
                    .ToArray();

            DataContext = this;
        }

        private void AvatarButton_Click(object sender, RoutedEventArgs e)
        {
            if (sender is FrameworkElement fe && fe.Tag is Uri uri)
            {
                SelectedAvatarPath = uri.LocalPath;
                DialogResult = true;
            }
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Views\ImportMappingWindow.xaml.cs
--------------------------------------------------
// File: Views/ImportMappingWindow.xaml.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using ToolManagementAppV2.ViewModels.ImportExport;

namespace ToolManagementAppV2.Views
{
    public partial class ImportMappingWindow : Window
    {
        public ImportMappingWindow(IEnumerable<string> headers, IEnumerable<string> propertyNames)
        {
            InitializeComponent();
            DataContext = new ImportMappingViewModel(headers, propertyNames);
        }

        public ImportMappingViewModel VM => (ImportMappingViewModel)DataContext;

        private void Ok_Click(object sender, RoutedEventArgs e)
        {
            if (VM.Mappings.Any(m => string.IsNullOrEmpty(m.SelectedColumn)))
                return;
            DialogResult = true;
            Close();
        }

        private void Cancel_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Views\LoginWindow.xaml.cs
--------------------------------------------------
using System.IO;
using System.Windows;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Services.Core;

namespace ToolManagementAppV2
{
    public partial class LoginWindow : Window
    {
        readonly UserService _userService;

        public LoginWindow()
        {
            InitializeComponent();

            var dbService = new DatabaseService("tool_inventory.db");
            var settings = new SettingsService(dbService);

            // Load logo
            var logoPath = settings.GetSetting("CompanyLogoPath");
            var logoUri = !string.IsNullOrWhiteSpace(logoPath) && File.Exists(logoPath)
                           ? new Uri(logoPath)
                           : new Uri("pack://application:,,,/Resources/DefaultLogo.png");
            LoginLogo.Source = new BitmapImage(logoUri);

            // Set window title
            var appName = settings.GetSetting("ApplicationName");
            Title = !string.IsNullOrWhiteSpace(appName)
                    ? $"{appName} – Login"
                    : Title;

            _userService = new UserService(dbService);
            LoadUsers();
        }

        void LoadUsers()
        {
            var users = _userService.GetAllUsers();
            if (users.Count == 0)
            {
                MessageBox.Show(
                    "No users exist. A default admin account will be created (username: admin, password: admin).",
                    "Setup", MessageBoxButton.OK, MessageBoxImage.Information);

                var admin = new User { UserName = "admin", Password = "admin", IsAdmin = true };
                _userService.AddUser(admin);
                users = _userService.GetAllUsers();
            }

            UsersListBox.ItemsSource = users;
        }

        void UserButton_Click(object sender, RoutedEventArgs e)
        {
            if (!(sender is FrameworkElement fe && fe.Tag is User user)) return;

            // Admin empty-password fallback
            if (user.IsAdmin && string.IsNullOrWhiteSpace(user.Password))
            {
                _userService.ChangeUserPassword(user.UserID, "admin");
                user.Password = "admin";
            }

            // Non-admin default-password skip
            if (!user.IsAdmin &&
                (string.IsNullOrWhiteSpace(user.Password) ||
                 user.Password.Equals("newpassword", StringComparison.OrdinalIgnoreCase)))
            {
                App.Current.Properties["CurrentUser"] = user;
                DialogResult = true;
                return;
            }

            var prompt = new PasswordPromptWindow
            {
                SelectedUser = user,
                ValidatePassword = pwd => _userService.AuthenticateUser(user.UserName, pwd) != null
            };

            if (prompt.ShowDialog() != true) return;

            var credential = prompt.IsPasswordResetRequested
                ? _userService.AuthenticateUser(user.UserName, "admin")
                : _userService.AuthenticateUser(user.UserName, prompt.EnteredPassword);

            if (credential != null)
            {
                App.Current.Properties["CurrentUser"] = credential;
                DialogResult = true;
            }
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Views\PasswordPromptWindow.xaml.cs
--------------------------------------------------
using System.Windows;
using System.Windows.Input;
using ToolManagementAppV2.Models.Domain;

namespace ToolManagementAppV2
{
    public partial class PasswordPromptWindow : Window
    {
        const int MaxAttempts = 2;
        int _attemptCount;

        public string EnteredPassword { get; private set; }
        public bool IsPasswordResetRequested { get; private set; }
        public Func<string, bool> ValidatePassword { get; set; }
        public User SelectedUser { get; set; }

        public PasswordPromptWindow()
        {
            InitializeComponent();
            Loaded += OnLoaded;
        }

        void OnLoaded(object sender, RoutedEventArgs e)
        {
            if (SelectedUser != null)
                PromptTextBlock.Text = $"{SelectedUser.UserName}, please enter your password:";
            PasswordBox.Focus();
        }

        void OK_Click(object sender, RoutedEventArgs e)
        {
            var pwd = PasswordBox.Password;
            if (ValidatePassword?.Invoke(pwd) == true)
            {
                EnteredPassword = pwd;
                DialogResult = true;
                return;
            }

            ShowError("Incorrect password. Please try again.");
        }

        void Cancel_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
        }

        void ShowError(string message)
        {
            _attemptCount++;
            ErrorTextBlock.Text = message;
            ErrorTextBlock.Visibility = Visibility.Visible;

            ForgotPasswordTextBlock.Visibility = _attemptCount >= MaxAttempts
                ? Visibility.Visible
                : Visibility.Collapsed;

            PasswordBox.Clear();
            PasswordBox.Focus();
        }

        void ForgotPasswordTextBlock_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (SelectedUser?.IsAdmin != true)
            {
                MessageBox.Show(
                    "Password recovery is only available for admin users.",
                    "Not Allowed",
                    MessageBoxButton.OK,
                    MessageBoxImage.Warning
                );
                return;
            }

            var result = MessageBox.Show(
                "You have entered the wrong password multiple times. Reset to default and change it after login?",
                "Reset Password",
                MessageBoxButton.YesNo,
                MessageBoxImage.Question
            );

            if (result != MessageBoxResult.Yes) return;

            IsPasswordResetRequested = true;
            _attemptCount = 0;
            ErrorTextBlock.Visibility = Visibility.Collapsed;
            ForgotPasswordTextBlock.Visibility = Visibility.Collapsed;
            PasswordBox.Clear();
            PasswordBox.Focus();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Views\PrintPreviewWindow.xaml.cs
--------------------------------------------------
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media.Imaging;

namespace ToolManagementAppV2.Views
{
    public partial class PrintPreviewWindow : Window
    {
        FlowDocument _document;
        string _title;
        string _logoPath;

        public PrintPreviewWindow()
        {
            InitializeComponent();
        }

        public void ShowPreview(FlowDocument document, string title, string logoPath)
        {
            _document = document ?? throw new ArgumentNullException(nameof(document));
            _title = title ?? throw new ArgumentNullException(nameof(title));
            _logoPath = logoPath;

            Title = $"Print Preview – {_title}";
            PreviewTitle.Text = _title;

            var logoUri = !string.IsNullOrWhiteSpace(_logoPath) && File.Exists(_logoPath)
                ? new Uri(_logoPath, UriKind.Absolute)
                : new Uri("pack://application:,,,/Resources/DefaultLogo.png");
            PreviewLogo.Source = new BitmapImage(logoUri);

            DocViewer.Document = _document;
            Owner = Application.Current.MainWindow;
            ShowDialog();
        }

        void Print_Click(object sender, RoutedEventArgs e)
        {
            if (_document == null) return;

            var dlg = new PrintDialog();
            if (dlg.ShowDialog() != true) return;

            dlg.PrintDocument(((IDocumentPaginatorSource)_document).DocumentPaginator, _title);
        }

        void Close_Click(object sender, RoutedEventArgs e)
        {
            Close();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\Domain\ActivityLog.cs
--------------------------------------------------
namespace ToolManagementAppV2.Models.Domain
{
    public class ActivityLog
    {
        public int LogID { get; set; }
        public int UserID { get; set; }
        public string UserName { get; set; }
        public string Action { get; set; }
        public DateTime Timestamp { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\Domain\Customer.cs
--------------------------------------------------
namespace ToolManagementAppV2.Models.Domain
{
    public class Customer
    {
        public int CustomerID { get; set; }
        public string Name { get; set; }
        public string Contact { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public string Address { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\Domain\Rental.cs
--------------------------------------------------
namespace ToolManagementAppV2.Models.Domain
{
    public class Rental
    {
        public int RentalID { get; set; }
        public int ToolID { get; set; }
        public int CustomerID { get; set; }
        public DateTime RentalDate { get; set; }
        public DateTime DueDate { get; set; }
        public DateTime? ReturnDate { get; set; } // Nullable to indicate if returned or not
        public string? Status { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\Domain\Tool.cs
--------------------------------------------------
namespace ToolManagementAppV2.Models.Domain
{
    public class Tool
    {
        public string ToolID { get; set; } // keep for DB use, but hide in UI
        public string ToolNumber { get; set; }
        public string PartNumber { get; set; }
        public string NameDescription { get; set; }
        public string Brand { get; set; }
        public string Location { get; set; }
        public int QuantityOnHand { get; set; }
        public int RentedQuantity { get; set; }
        public string Supplier { get; set; }
        public DateTime? PurchasedDate { get; set; }
        public string Notes { get; set; }
        public string Keywords { get; set; }
        public bool IsCheckedOut { get; set; }
        public string CheckedOutBy { get; set; }
        public DateTime? CheckedOutTime { get; set; }
        public string ToolImagePath { get; set; }

        public int OnHand => QuantityOnHand;
        public string Purchased => PurchasedDate?.ToString("yyyy-MM-dd") ?? "";
    }
}

File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\Domain\User.cs
--------------------------------------------------
using CommunityToolkit.Mvvm.ComponentModel;
using System.Windows.Media.Imaging;

namespace ToolManagementAppV2.Models.Domain
{
    public class User : ObservableObject
    {
        private int _userID;
        public int UserID { get => _userID; set => SetProperty(ref _userID, value); }

        private string _userName;
        public string UserName { get => _userName; set => SetProperty(ref _userName, value); }

        private string _password;
        public string Password { get => _password; set => SetProperty(ref _password, value); }

        private string _userPhotoPath;
        public string UserPhotoPath { get => _userPhotoPath; set => SetProperty(ref _userPhotoPath, value); }

        private bool _isAdmin;
        public bool IsAdmin { get => _isAdmin; set => SetProperty(ref _isAdmin, value); }

        private BitmapImage _photoBitmap;
        public BitmapImage PhotoBitmap { get => _photoBitmap; set => SetProperty(ref _photoBitmap, value); }

        // New expanded properties
        private string _email;
        public string Email { get => _email; set => SetProperty(ref _email, value); }

        private string _phone;
        public string Phone { get => _phone; set => SetProperty(ref _phone, value); }

        private string _address;
        public string Address { get => _address; set => SetProperty(ref _address, value); }

        private string _role;
        public string Role { get => _role; set => SetProperty(ref _role, value); }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\DTOs\CustomerImportDto.cs
--------------------------------------------------
namespace ToolManagementAppV2.Models.ImportExport
{
    public class CustomerImportDto
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string Contact { get; set; }
        public string Phone { get; set; }
        public string Address { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\DTOs\ToolImportDto.cs
--------------------------------------------------
namespace ToolManagementAppV2.Models.ImportExport
{
    public class ToolImportDto
    {
        public string ToolNumber { get; set; }
        public string NameDescription { get; set; }
        public string Location { get; set; }
        public string Brand { get; set; }
        public string PartNumber { get; set; }
        public string Supplier { get; set; }
        public DateTime? PurchasedDate { get; set; }
        public string Notes { get; set; }
        public string Keywords { get; set; }
        public int AvailableQuantity { get; set; }
        public int RentedQuantity { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\Core\CsvHelper.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Models.ImportExport;

namespace ToolManagementAppV2.Utilities.IO
{
    public static class CsvHelperUtil
    {
        public static List<ToolModel> LoadToolsFromCsv(string filePath, IDictionary<string, string> map)
        {
            var lines = File.ReadAllLines(filePath);
            if (lines.Length < 2) return new List<ToolModel>();
            var headers = lines[0].Split(',').Select(h => h.Trim()).ToArray();
            return lines.Skip(1)
                .Select(line => line.Split(','))
                .Select(cols => new ToolModel
                {
                    ToolNumber = GetMapped(cols, headers, map, "ToolNumber"),
                    NameDescription = GetMapped(cols, headers, map, "NameDescription"),
                    Location = GetMapped(cols, headers, map, "Location"),
                    Brand = GetMapped(cols, headers, map, "Brand"),
                    PartNumber = GetMapped(cols, headers, map, "PartNumber"),
                    Supplier = GetMapped(cols, headers, map, "Supplier"),
                    PurchasedDate = TryParseDate(GetMapped(cols, headers, map, "PurchasedDate")),
                    Notes = GetMapped(cols, headers, map, "Notes"),
                    QuantityOnHand = TryParseInt(GetMapped(cols, headers, map, "AvailableQuantity"))
                }).ToList();
        }

        public static void ExportToolsToCsv(string filePath, List<ToolModel> tools)
        {
            var lines = new List<string>
            {
                "ToolNumber,NameDescription,Location,Brand,PartNumber,Supplier,PurchasedDate,Notes,AvailableQuantity"
            };
            lines.AddRange(tools.Select(t =>
                $"{t.ToolNumber},{t.NameDescription},{t.Location},{t.Brand},{t.PartNumber},{t.Supplier},{t.PurchasedDate:yyyy-MM-dd},{t.Notes},{t.QuantityOnHand}"));
            File.WriteAllLines(filePath, lines);
        }

        public static List<CustomerModel> LoadCustomersFromCsv(string filePath, IDictionary<string, string> map)
        {
            var lines = File.ReadAllLines(filePath);
            if (lines.Length < 2) return new List<CustomerModel>();
            var headers = lines[0].Split(',').Select(h => h.Trim()).ToArray();
            return lines.Skip(1)
                .Select(line => line.Split(','))
                .Select(cols => new CustomerModel
                {
                    Name = GetMapped(cols, headers, map, "Name"),
                    Email = GetMapped(cols, headers, map, "Email"),
                    Contact = GetMapped(cols, headers, map, "Contact"),
                    Phone = GetMapped(cols, headers, map, "Phone"),
                    Address = GetMapped(cols, headers, map, "Address")
                }).ToList();
        }

        public static void ExportCustomersToCsv(string filePath, List<CustomerModel> customers)
        {
            var lines = new List<string>
            {
                "Name,Email,Contact,Phone,Address"
            };
            lines.AddRange(customers.Select(c =>
                $"{c.Name},{c.Email},{c.Contact},{c.Phone},{c.Address}"));
            File.WriteAllLines(filePath, lines);
        }

        private static string GetMapped(string[] row, string[] headers, IDictionary<string, string> map, string key)
        {
            if (!map.TryGetValue(key, out var column)) return null;
            var index = Array.IndexOf(headers, column);
            return index >= 0 && index < row.Length ? row[index].Trim() : null;
        }

        private static int TryParseInt(string input) =>
            int.TryParse(input, out var result) ? result : 0;

        private static DateTime? TryParseDate(string input) =>
            DateTime.TryParse(input, out var result) ? result : null;
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\Core\DatabaseService.cs
--------------------------------------------------
using System.Data.SQLite;
using System.IO;

namespace ToolManagementAppV2.Services.Core
{
    public class DatabaseService
    {
        public string ConnectionString { get; }

        public DatabaseService(string dbPath)
        {
            ConnectionString = $"Data Source={dbPath};Version=3;";
            InitializeDatabase();
            EnsureColumn("Tools", "ToolNumber", "TEXT");
            EnsureColumn("Tools", "NameDescription", "TEXT");
            EnsureColumn("Tools", "ToolImagePath", "TEXT");
            EnsureColumn("Tools", "CheckedOutBy", "TEXT");
            EnsureColumn("Tools", "CheckedOutTime", "DATETIME");
            EnsureColumn("Tools", "Keywords", "TEXT");
            EnsureColumn("Users", "Password", "TEXT");
            EnsureColumn("Users", "Email", "TEXT");
            EnsureColumn("Users", "Phone", "TEXT");
            EnsureColumn("Users", "Address", "TEXT");
            EnsureColumn("Users", "Role", "TEXT");
        }


        void InitializeDatabase()
        {
            using var conn = new SQLiteConnection(ConnectionString);
            conn.Open();
            var sql = @"
                CREATE TABLE IF NOT EXISTS Tools (ToolID INTEGER PRIMARY KEY AUTOINCREMENT, ToolNumber TEXT NOT NULL, NameDescription TEXT, Location TEXT, Brand TEXT, PartNumber TEXT, Supplier TEXT, PurchasedDate DATETIME, Notes TEXT, AvailableQuantity INTEGER NOT NULL DEFAULT 0, RentedQuantity INTEGER NOT NULL DEFAULT 0, IsCheckedOut INTEGER NOT NULL DEFAULT 0, CheckedOutBy TEXT, CheckedOutTime DATETIME);
                CREATE TABLE IF NOT EXISTS Users (UserID INTEGER PRIMARY KEY AUTOINCREMENT, UserName TEXT NOT NULL, UserPhotoPath TEXT, IsAdmin INTEGER NOT NULL DEFAULT 0);
                CREATE TABLE IF NOT EXISTS Customers (CustomerID INTEGER PRIMARY KEY AUTOINCREMENT, ToolNumber TEXT NOT NULL, Email TEXT, Contact TEXT, Phone TEXT, Address TEXT);
                CREATE TABLE IF NOT EXISTS Rentals (RentalID INTEGER PRIMARY KEY AUTOINCREMENT, ToolID INTEGER NOT NULL, CustomerID INTEGER NOT NULL, RentalDate DATETIME NOT NULL, DueDate DATETIME NOT NULL, ReturnDate DATETIME, Status TEXT NOT NULL DEFAULT 'Rented', FOREIGN KEY (ToolID) REFERENCES Tools(ToolID), FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));
                CREATE TABLE IF NOT EXISTS ActivityLogs (LogID INTEGER PRIMARY KEY AUTOINCREMENT, UserID INTEGER, UserName TEXT, Action TEXT, Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (UserID) REFERENCES Users(UserID));
                CREATE TABLE IF NOT EXISTS Settings (Key TEXT PRIMARY KEY, Value TEXT);";
            using var cmd = new SQLiteCommand(sql, conn);
            cmd.ExecuteNonQuery();
        }

        void EnsureColumn(string table, string column, string type)
        {
            if (SqliteHelper.ColumnExists(ConnectionString, table, column)) return;
            using var conn = new SQLiteConnection(ConnectionString);
            conn.Open();
            using var alter = new SQLiteCommand($"ALTER TABLE {table} ADD COLUMN {column} {type}", conn);
            alter.ExecuteNonQuery();
        }

        public void BackupDatabase(string backupFilePath)
        {
            var dataSource = ConnectionString
                .Split(';')
                .FirstOrDefault(x => x.StartsWith("Data Source=", StringComparison.OrdinalIgnoreCase))
                ?.Substring("Data Source=".Length)
                .Trim();

            if (string.IsNullOrEmpty(dataSource) || !File.Exists(dataSource))
                throw new InvalidOperationException("Database file path could not be determined.");

            File.Copy(dataSource, backupFilePath, overwrite: true);
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\Core\SqliteHelper.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;

namespace ToolManagementAppV2.Services.Core
{
    public static class SqliteHelper
    {
        public static int ExecuteNonQuery(string connStr, string sql, SQLiteParameter[] parameters = null)
        {
            using var conn = new SQLiteConnection(connStr);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);
            if (parameters != null) cmd.Parameters.AddRange(parameters);
            return cmd.ExecuteNonQuery();
        }

        public static int ExecuteNonQuery(SQLiteConnection conn, SQLiteTransaction tx, string sql, SQLiteParameter[] parameters)
        {
            using var cmd = new SQLiteCommand(sql, conn, tx);
            if (parameters != null) cmd.Parameters.AddRange(parameters);
            return cmd.ExecuteNonQuery();
        }

        public static object ExecuteScalar(string connStr, string sql, SQLiteParameter[] parameters = null)
        {
            using var conn = new SQLiteConnection(connStr);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);
            if (parameters != null) cmd.Parameters.AddRange(parameters);
            return cmd.ExecuteScalar();
        }

        public static List<T> ExecuteReader<T>(string connStr, string sql, SQLiteParameter[] parameters, Func<IDataRecord, T> map)
        {
            var list = new List<T>();
            using var conn = new SQLiteConnection(connStr);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);
            if (parameters != null) cmd.Parameters.AddRange(parameters);
            using var rdr = cmd.ExecuteReader();
            while (rdr.Read())
                list.Add(map(rdr));
            return list;
        }

        public static bool ColumnExists(string connStr, string table, string column)
        {
            using var conn = new SQLiteConnection(connStr);
            conn.Open();
            using var cmd = new SQLiteCommand($"PRAGMA table_info({table})", conn);
            using var rdr = cmd.ExecuteReader();
            while (rdr.Read())
                if (string.Equals(rdr["name"].ToString(), column, StringComparison.OrdinalIgnoreCase))
                    return true;
            return false;
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\Customers\CustomerService.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.IO;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Utilities.IO;

namespace ToolManagementAppV2.Services.Customers
{
    public class CustomerService
    {
        readonly string _connString;

        public CustomerService(DatabaseService dbService)
        {
            _connString = dbService.ConnectionString;
        }

        public void ImportCustomersFromCsv(string filePath, IDictionary<string, string> map)
        {
            var customers = CsvHelperUtil.LoadCustomersFromCsv(filePath, map);
            foreach (var c in customers)
            {
                if (!CustomerExists(c.Name, c.Email))
                    AddCustomer(c);
            }
        }

        public void ExportCustomersToCsv(string filePath)
        {
            var all = GetAllCustomers();
            CsvHelperUtil.ExportCustomersToCsv(filePath, all);
        }

        public List<CustomerModel> GetAllCustomers()
        {
            const string sql = "SELECT * FROM Customers";
            return SqliteHelper.ExecuteReader(_connString, sql, null, MapCustomer);
        }

        public List<CustomerModel> SearchCustomers(string searchTerm)
        {
            const string sql = @"
                SELECT * FROM Customers
                WHERE ToolNumber LIKE @t OR Email LIKE @t OR Phone LIKE @t OR Address LIKE @t";
            var p = new[] { new SQLiteParameter("@t", $"%{searchTerm}%") };
            return SqliteHelper.ExecuteReader(_connString, sql, p, MapCustomer);
        }

        public CustomerModel GetCustomerByID(int customerID)
        {
            const string sql = "SELECT * FROM Customers WHERE CustomerID = @id";
            var p = new[] { new SQLiteParameter("@id", customerID) };
            return SqliteHelper.ExecuteReader(_connString, sql, p, MapCustomer).FirstOrDefault();
        }

        public void AddCustomer(CustomerModel customer)
        {
            const string sql = @"
                INSERT INTO Customers (ToolNumber, Email, Contact, Phone, Address)
                VALUES (@ToolNumber, @Email, @Contact, @Phone, @Address)";
            var p = new[]
            {
                new SQLiteParameter("@ToolNumber", customer.Name),
                new SQLiteParameter("@Email", customer.Email),
                new SQLiteParameter("@Contact", customer.Contact),
                new SQLiteParameter("@Phone", customer.Phone),
                new SQLiteParameter("@Address", customer.Address)
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        public void UpdateCustomer(CustomerModel customer)
        {
            const string sql = @"
                UPDATE Customers
                SET ToolNumber = @ToolNumber, Email = @Email, Contact = @Contact,
                    Phone = @Phone, Address = @Address
                WHERE CustomerID = @CustomerID";
            var p = new[]
            {
                new SQLiteParameter("@ToolNumber", customer.Name),
                new SQLiteParameter("@Email", customer.Email),
                new SQLiteParameter("@Contact", customer.Contact),
                new SQLiteParameter("@Phone", customer.Phone),
                new SQLiteParameter("@Address", customer.Address),
                new SQLiteParameter("@CustomerID", customer.CustomerID)
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        public void DeleteCustomer(int customerID)
        {
            const string sql = "DELETE FROM Customers WHERE CustomerID = @CustomerID";
            var p = new[] { new SQLiteParameter("@CustomerID", customerID) };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        private bool CustomerExists(string name, string email)
        {
            const string sql = "SELECT COUNT(*) FROM Customers WHERE ToolNumber = @N AND Email = @E";
            var count = Convert.ToInt32(SqliteHelper.ExecuteScalar(_connString, sql, new[]
            {
                new SQLiteParameter("@N", name),
                new SQLiteParameter("@E", email)
            }));
            return count > 0;
        }

        private CustomerModel MapCustomer(IDataRecord r) => new()
        {
            CustomerID = Convert.ToInt32(r["CustomerID"]),
            Name = r["ToolNumber"].ToString(),
            Email = r["Email"].ToString(),
            Contact = r["Contact"].ToString(),
            Phone = r["Phone"].ToString(),
            Address = r["Address"].ToString()
        };
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\Rentals\RentalService.cs
--------------------------------------------------
using System.Data;
using System.Data.SQLite;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;

namespace ToolManagementAppV2.Services.Rentals
{
    public class RentalService
    {
        readonly string _connString;

        public RentalService(DatabaseService dbService) =>
            _connString = dbService.ConnectionString;

        public void RentTool(string toolID, int customerID, DateTime rentalDate, DateTime dueDate)
        {
            const string sql = @"
                INSERT INTO Rentals (ToolID, CustomerID, RentalDate, DueDate, Status)
                VALUES (@ToolID, @CustomerID, @RentalDate, @DueDate, 'Rented');
                UPDATE Tools
                   SET AvailableQuantity = AvailableQuantity - 1,
                       RentedQuantity   = RentedQuantity + 1
                 WHERE ToolID = @ToolID AND AvailableQuantity > 0";
            var p = new[]
            {
                new SQLiteParameter("@ToolID", toolID),
                new SQLiteParameter("@CustomerID", customerID),
                new SQLiteParameter("@RentalDate", rentalDate),
                new SQLiteParameter("@DueDate", dueDate)
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        public void RentToolWithTransaction(string toolID, int customerID, DateTime rentalDate, DateTime dueDate)
        {
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var tx = conn.BeginTransaction();
            try
            {
                var availCmd = new SQLiteCommand(
                    "SELECT AvailableQuantity FROM Tools WHERE ToolID=@ToolID", conn, tx);
                availCmd.Parameters.AddWithValue("@ToolID", toolID);
                int avail = Convert.ToInt32(availCmd.ExecuteScalar() ?? 0);
                if (avail < 1) throw new InvalidOperationException("Insufficient quantity.");

                SqliteHelper.ExecuteNonQuery(conn, tx,
                    "INSERT INTO Rentals (ToolID,CustomerID,RentalDate,DueDate,Status) VALUES(@ToolID,@CustomerID,@RentalDate,@DueDate,'Rented')",
                    new[]
                    {
                        new SQLiteParameter("@ToolID", toolID),
                        new SQLiteParameter("@CustomerID", customerID),
                        new SQLiteParameter("@RentalDate", rentalDate),
                        new SQLiteParameter("@DueDate", dueDate)
                    });

                SqliteHelper.ExecuteNonQuery(conn, tx,
                    "UPDATE Tools SET AvailableQuantity = AvailableQuantity - 1, RentedQuantity = RentedQuantity + 1 WHERE ToolID = @ToolID",
                    new[] { new SQLiteParameter("@ToolID", toolID) });

                tx.Commit();
            }
            catch
            {
                tx.Rollback();
                throw;
            }
        }

        public void ReturnTool(int rentalID, DateTime returnDate)
        {
            const string sql = @"
                UPDATE Rentals
                   SET ReturnDate = @ReturnDate, Status = 'Returned'
                 WHERE RentalID = @RentalID;
                UPDATE Tools
                   SET AvailableQuantity = AvailableQuantity + 1,
                       RentedQuantity   = RentedQuantity - 1
                 WHERE ToolID =
                   (SELECT ToolID FROM Rentals WHERE RentalID=@RentalID)";
            var p = new[]
            {
                new SQLiteParameter("@RentalID", rentalID),
                new SQLiteParameter("@ReturnDate", returnDate)
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        public void ReturnToolWithTransaction(int rentalID, DateTime returnDate)
        {
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var tx = conn.BeginTransaction();
            try
            {
                var selCmd = new SQLiteCommand(
                    "SELECT ToolID FROM Rentals WHERE RentalID=@RentalID AND Status='Rented'", conn, tx);
                selCmd.Parameters.AddWithValue("@RentalID", rentalID);
                var result = selCmd.ExecuteScalar();
                if (result == null) throw new InvalidOperationException("Rental not found or already returned.");
                int toolID = Convert.ToInt32(result);

                SqliteHelper.ExecuteNonQuery(conn, tx,
                    "UPDATE Rentals SET ReturnDate=@ReturnDate,Status='Returned' WHERE RentalID=@RentalID",
                    new[]
                    {
                        new SQLiteParameter("@ReturnDate", returnDate),
                        new SQLiteParameter("@RentalID", rentalID)
                    });

                SqliteHelper.ExecuteNonQuery(conn, tx,
                    "UPDATE Tools SET AvailableQuantity=AvailableQuantity+1,RentedQuantity=RentedQuantity-1 WHERE ToolID=@ToolID",
                    new[] { new SQLiteParameter("@ToolID", toolID) });

                tx.Commit();
            }
            catch
            {
                tx.Rollback();
                throw;
            }
        }

        public void ExtendRental(int rentalID, DateTime newDueDate)
        {
            const string sql = @"
                UPDATE Rentals
                   SET DueDate = @NewDueDate
                 WHERE RentalID = @RentalID AND Status = 'Rented'";
            var p = new[]
            {
                new SQLiteParameter("@NewDueDate", newDueDate),
                new SQLiteParameter("@RentalID", rentalID)
            };
            if (SqliteHelper.ExecuteNonQuery(_connString, sql, p) == 0)
                throw new InvalidOperationException("Unable to extend rental. Rental not found or already returned.");
        }

        public List<Rental> GetActiveRentals() =>
            SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Rentals WHERE Status='Rented'", null, MapRental);

        public List<Rental> GetOverdueRentals()
        {
            const string sql = @"
                SELECT * FROM Rentals
                 WHERE Status = 'Rented'
                   AND DueDate < @Today";
            var p = new[] { new SQLiteParameter("@Today", DateTime.Today) };
            return SqliteHelper.ExecuteReader(_connString, sql, p, MapRental);
        }

        public List<Rental> GetAllRentals() =>
            SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Rentals", null, MapRental);

        public List<Rental> GetRentalHistoryForTool(int toolID)
        {
            const string sql = @"
                SELECT * FROM Rentals
                 WHERE ToolID = @ToolID
              ORDER BY RentalDate DESC";
            var p = new[] { new SQLiteParameter("@ToolID", toolID) };
            return SqliteHelper.ExecuteReader(_connString, sql, p, MapRental);
        }

        Rental MapRental(IDataRecord r) => new()
        {
            RentalID = Convert.ToInt32(r["RentalID"]),
            ToolID = Convert.ToInt32(r["ToolID"]),
            CustomerID = Convert.ToInt32(r["CustomerID"]),
            RentalDate = Convert.ToDateTime(r["RentalDate"]),
            DueDate = Convert.ToDateTime(r["DueDate"]),
            ReturnDate = r["ReturnDate"] is DBNull ? null : Convert.ToDateTime(r["ReturnDate"]),
            Status = r["Status"].ToString()
        };
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\Settings\SettingsService.cs
--------------------------------------------------
using System.Data.SQLite;
using ToolManagementAppV2.Services.Core;

namespace ToolManagementAppV2.Services.Settings
{
    public class SettingsService
    {
        readonly string _connString;
        const string UpsertSql = @"
            INSERT INTO Settings (Key, Value) 
            VALUES (@Key, @Value)
            ON CONFLICT(Key) DO UPDATE SET Value = @Value";

        public SettingsService(DatabaseService dbService) =>
            _connString = dbService.ConnectionString;

        public void SaveSetting(string key, string value)
        {
            var p = new[]
            {
                new SQLiteParameter("@Key", key),
                new SQLiteParameter("@Value", value)
            };
            SqliteHelper.ExecuteNonQuery(_connString, UpsertSql, p);
        }

        public string GetSetting(string key)
        {
            const string sql = "SELECT Value FROM Settings WHERE Key = @Key";
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);
            cmd.Parameters.AddWithValue("@Key", key);
            return cmd.ExecuteScalar()?.ToString();
        }

        public Dictionary<string, string> GetAllSettings()
        {
            var dict = new Dictionary<string, string>();
            const string sql = "SELECT Key, Value FROM Settings";
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);
            using var rdr = cmd.ExecuteReader();
            while (rdr.Read())
                dict[rdr["Key"].ToString()] = rdr["Value"].ToString();
            return dict;
        }

        public void UpdateSettings(Dictionary<string, string> settings)
        {
            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var tx = conn.BeginTransaction();
            try
            {
                foreach (var kv in settings)
                {
                    var p = new[]
                    {
                        new SQLiteParameter("@Key", kv.Key),
                        new SQLiteParameter("@Value", kv.Value)
                    };
                    SqliteHelper.ExecuteNonQuery(conn, tx, UpsertSql, p);
                }
                tx.Commit();
            }
            catch
            {
                tx.Rollback();
                throw;
            }
        }

        public void DeleteSetting(string key)
        {
            const string sql = "DELETE FROM Settings WHERE Key = @Key";
            var p = new[] { new SQLiteParameter("@Key", key) };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\Tools\Printer.cs
--------------------------------------------------
// Services/Printer.cs
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Views;

namespace ToolManagementAppV2.Services.Tools
{
    public class Printer
    {
        private readonly SettingsService _settingsService;

        public Printer(SettingsService settingsService)
        {
            _settingsService = settingsService;
        }

        /// <summary>
        /// Prints a sorted list of tools with the given title.
        /// If currentUserName is non‐null, only prints tools checked out by that user.
        /// </summary>
        public void PrintTools(IEnumerable<ToolModel> tools, string title, string currentUserName = null)
        {
            // 1) sort by Location
            var list = tools.OrderBy(t => t.Location).ToList();

            // 2) filter if needed
            if (!string.IsNullOrEmpty(currentUserName))
                list = list.Where(t => t.CheckedOutBy == currentUserName).ToList();

            // 3) build the document
            var logoPath = LoadCompanyLogoPath();
            var doc = BuildDocument(list, title, logoPath);

            // 4) show preview window instead of calling PrintDialog directly
            var preview = new PrintPreviewWindow();
            preview.ShowPreview(doc, title, logoPath);
            // printing now happens from inside the preview window
        }

        private string? LoadCompanyLogoPath()
        {
            var path = _settingsService.GetSetting("CompanyLogoPath");
            return !string.IsNullOrEmpty(path) && File.Exists(path)
                ? path
                : null;
        }

        private FlowDocument BuildDocument(List<ToolModel> tools, string title, string logoPath)
        {
            var doc = new FlowDocument
            {
                PagePadding = new Thickness(50),
                PageWidth = 8.27 * 96,
                PageHeight = 11.69 * 96,
                FontFamily = new FontFamily("Calibri"),
                FontSize = 18
            };

            // Header: logo + title
            var headerContainer = new BlockUIContainer();
            var headerStack = new StackPanel { Orientation = Orientation.Vertical };
            AddCompanyLogo(headerStack, logoPath);
            AddTitle(headerStack, title);
            headerContainer.Child = headerStack;
            doc.Blocks.Add(headerContainer);

            // Each tool
            foreach (var t in tools)
            {
                var row = CreateToolRow(t);
                var block = new BlockUIContainer(row)
                {
                    Margin = new Thickness(0, 20, 0, 20)
                };
                doc.Blocks.Add(block);
            }

            return doc;
        }

        private StackPanel CreateToolRow(ToolModel tool)
        {
            var panel = new StackPanel { Orientation = Orientation.Vertical };
            var grid = new Grid();
            // columns: image | details left | details right
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(150) });
            grid.ColumnDefinitions.Add(new ColumnDefinition());
            grid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto });

            // image or placeholder
            if (!string.IsNullOrEmpty(tool.ToolImagePath) && File.Exists(tool.ToolImagePath))
            {
                var imgBorder = CreateOptimizedImage(tool.ToolImagePath);
                Grid.SetColumn(imgBorder, 0);
                grid.Children.Add(imgBorder);
            }
            else
            {
                var ph = new Border
                {
                    Width = 120,
                    Height = 120,
                    Background = Brushes.LightGray,
                    CornerRadius = new CornerRadius(10)
                };
                Grid.SetColumn(ph, 0);
                grid.Children.Add(ph);
            }

            // left: ID + description
            var left = new TextBlock
            {
                FontSize = 14,
                TextWrapping = TextWrapping.Wrap,
                Margin = new Thickness(10, 0, 0, 0)
            };
            left.Inlines.Add(new Run("\n"));
            left.Inlines.Add(new Bold(new Run("Tool ID: ")));
            left.Inlines.Add(new Run(tool.ToolID + "\n"));
            left.Inlines.Add(new Bold(new Run("NameDescription: ")));
            left.Inlines.Add(new Run(tool.NameDescription + "\n"));
            Grid.SetColumn(left, 1);
            grid.Children.Add(left);

            // right: location, who, when
            var right = new TextBlock
            {
                FontSize = 14,
                TextWrapping = TextWrapping.Wrap,
                HorizontalAlignment = HorizontalAlignment.Right,
                TextAlignment = TextAlignment.Right,
                Margin = new Thickness(0, 0, 20, 0)
            };

            right.Inlines.Add(new LineBreak());
            right.Inlines.Add(new Bold(new Run("Location: ")));
            right.Inlines.Add(new Run(tool.Location));
            right.Inlines.Add(new LineBreak());
            right.Inlines.Add(new LineBreak());
            right.Inlines.Add(new Bold(new Run("Checked Out By: ")));
            right.Inlines.Add(new Run(tool.CheckedOutBy));
            right.Inlines.Add(new LineBreak());
            right.Inlines.Add(new Bold(new Run("Checked Out Time: ")));
            if (tool.CheckedOutTime.HasValue)
                right.Inlines.Add(new Run(tool.CheckedOutTime.Value.ToString("yyyy-MM-dd HH:mm:ss")));
            else
                right.Inlines.Add(new Run("N/A"));
            right.Inlines.Add(new LineBreak());

            Grid.SetColumn(right, 2);
            grid.Children.Add(right);

            panel.Children.Add(grid);
            panel.Children.Add(new System.Windows.Shapes.Rectangle
            {
                Height = 1,
                Fill = Brushes.LightGray
            });

            return panel;
        }

        private Border CreateOptimizedImage(string path)
        {
            var bmp = new BitmapImage();
            bmp.BeginInit();
            bmp.CacheOption = BitmapCacheOption.OnLoad;
            bmp.DecodePixelWidth = 720;
            bmp.UriSource = new Uri(path, UriKind.Absolute);
            bmp.EndInit();
            bmp.Freeze();

            return new Border
            {
                Width = 120,
                Height = 120,
                CornerRadius = new CornerRadius(10),
                Background = new ImageBrush(bmp) { Stretch = Stretch.UniformToFill },
                ClipToBounds = true
            };
        }

        private void AddCompanyLogo(StackPanel host, string logoPath)
        {
            if (string.IsNullOrEmpty(logoPath) || !File.Exists(logoPath)) return;
            host.Children.Add(new Image
            {
                Source = new BitmapImage(new Uri(logoPath, UriKind.Absolute)),
                Width = 50,
                Height = 50,
                Stretch = Stretch.Uniform
            });
        }

        private void AddTitle(StackPanel host, string title)
        {
            host.Children.Add(new TextBlock(new Bold(new Run(title)))
            {
                FontSize = 20,
                TextAlignment = TextAlignment.Center,
                Margin = new Thickness(0, 5, 0, 0)
            });
        }

        private class CustomDocumentPaginator : DocumentPaginator
        {
            private readonly DocumentPaginator _inner;
            private readonly Typeface _tf;
            private readonly double _fs;

            public CustomDocumentPaginator(DocumentPaginator inner, Typeface tf, double fs)
            {
                _inner = inner;
                _tf = tf;
                _fs = fs;
            }

            [Obsolete]
            public override DocumentPage GetPage(int pageNumber)
            {
                var page = _inner.GetPage(pageNumber);
                var dv = new DrawingVisual();
                using (var dc = dv.RenderOpen())
                {
                    var text = $"Page {pageNumber + 1}";
                    var ft = new FormattedText(
                        text,
                        CultureInfo.CurrentCulture,
                        FlowDirection.LeftToRight,
                        _tf,
                        _fs,
                        Brushes.Black);

                    var x = (page.Size.Width - ft.Width) / 2;
                    var y = page.Size.Height - ft.Height - 50;
                    dc.DrawText(ft, new Point(x, y));
                }
                var cv = new ContainerVisual();
                cv.Children.Add(page.Visual);
                cv.Children.Add(dv);
                return new DocumentPage(cv, page.Size, page.BleedBox, page.ContentBox);
            }

            public override bool IsPageCountValid => _inner.IsPageCountValid;
            public override int PageCount => _inner.PageCount;
            public override Size PageSize
            {
                get => _inner.PageSize;
                set => _inner.PageSize = value;
            }
            public override IDocumentPaginatorSource Source => _inner.Source;
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\Tools\ReportService.cs
--------------------------------------------------
using System.Windows;
using System.Windows.Documents;
using System.Windows.Media;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Services.Rentals;
using ToolManagementAppV2.Services.Users;

namespace ToolManagementAppV2.Services.Tools
{
    public class ReportService
    {
        readonly ToolService _toolService;
        readonly RentalService _rentalService;
        readonly ActivityLogService _activityLogService;
        readonly CustomerService _customerService;
        readonly UserService _userService;

        public ReportService(
            ToolService toolService,
            RentalService rentalService,
            ActivityLogService activityLogService,
            CustomerService customerService,
            UserService userService)
        {
            _toolService = toolService;
            _rentalService = rentalService;
            _activityLogService = activityLogService;
            _customerService = customerService;
            _userService = userService;
        }

        public FlowDocument GenerateInventoryReport()
        {
            var lines = _toolService.GetAllTools()
                .Select(t =>
                    $"Tool ID: {t.ToolID} | ToolNumber: {t.ToolNumber} | Qty: {t.QuantityOnHand} | " +
                    $"Location: {t.Location} | Supplier: {t.Supplier}");
            return BuildReport("Tool Inventory Report", lines);
        }

        public FlowDocument GenerateRentalReport(bool activeOnly = true)
        {
            var rentals = activeOnly
                ? _rentalService.GetActiveRentals()
                : _rentalService.GetAllRentals();

            var title = activeOnly
                ? "Active Rental Report"
                : "Full Rental History Report";

            var lines = rentals.Select(r =>
                $"Rental ID: {r.RentalID} | Tool ID: {r.ToolID} | Customer ID: {r.CustomerID} | " +
                $"Rental Date: {r.RentalDate:yyyy-MM-dd} | Due Date: {r.DueDate:yyyy-MM-dd} | " +
                $"Return Date: {(r.ReturnDate.HasValue ? r.ReturnDate.Value.ToString("yyyy-MM-dd") : "N/A")} | " +
                $"Status: {r.Status}");

            return BuildReport(title, lines);
        }

        public FlowDocument GenerateActivityLogReport()
        {
            var lines = _activityLogService.GetRecentLogs(100)
                .Select(l =>
                    $"LogID: {l.LogID} | UserID: {l.UserID} | User: {l.UserName} | " +
                    $"Action: {l.Action} | Timestamp: {l.Timestamp:yyyy-MM-dd HH:mm:ss}");
            return BuildReport("Activity Log Report", lines);
        }

        public FlowDocument GenerateCustomerReport()
        {
            var lines = _customerService.GetAllCustomers()
                .Select(c =>
                    $"CustomerID: {c.CustomerID} | ToolNumber: {c.Name} | Email: {c.Email} | " +
                    $"Contact: {c.Contact} | Phone: {c.Phone} | Address: {c.Address}");
            return BuildReport("Customer Report", lines);
        }

        public FlowDocument GenerateUserReport()
        {
            var lines = _userService.GetAllUsers()
                .Select(u =>
                    $"UserID: {u.UserID} | ToolNumber: {u.UserName} | IsAdmin: {u.IsAdmin}");
            return BuildReport("User Report", lines);
        }

        public FlowDocument GenerateSummaryReport()
        {
            var totalTools = _toolService.GetAllTools().Count;
            var totalRentals = _rentalService.GetAllRentals().Count;
            var totalActiveRentals = _rentalService.GetActiveRentals().Count;
            var totalCustomers = _customerService.GetAllCustomers().Count;
            var totalUsers = _userService.GetAllUsers().Count;

            var lines = new[]
            {
                $"Total Tools: {totalTools}",
                $"Total Rentals (History): {totalRentals}",
                $"Active Rentals: {totalActiveRentals}",
                $"Total Customers: {totalCustomers}",
                $"Total Users: {totalUsers}"
            };

            return BuildReport("Application Summary Report", lines);
        }

        FlowDocument BuildReport(string title, IEnumerable<string> lines)
        {
            var doc = new FlowDocument
            {
                FontFamily = new FontFamily("Segoe UI"),
                FontSize = 12,
                PageWidth = 800
            };

            var header = new Paragraph(new Run(title))
            {
                FontSize = 18,
                FontWeight = FontWeights.Bold,
                TextAlignment = TextAlignment.Center,
                Margin = new Thickness(0, 0, 0, 20)
            };
            doc.Blocks.Add(header);

            foreach (var line in lines)
            {
                var p = new Paragraph(new Run(line)) { Margin = new Thickness(0, 0, 0, 10) };
                doc.Blocks.Add(p);
            }

            return doc;
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\Tools\ToolService.cs
--------------------------------------------------
using System.Data.SQLite;
using System.Data;
using ToolManagementAppV2.Services.Core;
using ToolManagementAppV2.Utilities.IO;
using ToolManagementAppV2.Models.ImportExport;
using System.Text;

public class ToolService
{
    readonly string _connString;
    const string AllToolsSql = "SELECT * FROM Tools";
    const string UpsertToolCsv = @"
        INSERT INTO Tools 
          (ToolNumber, NameDescription, Location, Brand, PartNumber, Supplier, PurchasedDate, Notes, Keywords, AvailableQuantity, RentedQuantity, IsCheckedOut)
        VALUES (@ToolNumber,@Desc,@Loc,@Brand,@PN,@Sup,@PD,@Notes,@Keywords,@Avail,@Rent,0)";

    public ToolService(DatabaseService dbService) => _connString = dbService.ConnectionString;

    public List<ToolModel> GetAllTools() =>
        SqliteHelper.ExecuteReader(_connString, AllToolsSql, null, MapTool);

    public ToolModel GetToolByID(string toolID) =>
        SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Tools WHERE ToolID=@ToolID",
            new[] { new SQLiteParameter("@ToolID", toolID) }, MapTool).FirstOrDefault();

    public List<ToolModel> SearchTools(string searchText)
    {
        var terms = searchText.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        var sb = new StringBuilder("SELECT * FROM Tools");
        if (terms.Any())
        {
            sb.Append(" WHERE ")
              .Append(string.Join(" AND ", terms.Select((t, i) =>
                "(ToolID LIKE @p" + i +
                " OR ToolNumber LIKE @p" + i +
                " OR NameDescription LIKE @p" + i +
                " OR Brand LIKE @p" + i +
                " OR PartNumber LIKE @p" + i +
                " OR Supplier LIKE @p" + i +
                " OR Location LIKE @p" + i +
                " OR Notes LIKE @p" + i +
                " OR Keywords LIKE @p" + i + ")")));
        }
        var parameters = terms
            .Select((t, i) => new SQLiteParameter("@p" + i, $"%{t}%"))
            .ToArray();
        return SqliteHelper.ExecuteReader(_connString, sb.ToString(), parameters, MapTool);
    }

    public void AddTool(ToolModel tool)
    {
        var p = new[]
        {
            new SQLiteParameter("@ToolNumber", tool.ToolNumber),
            new SQLiteParameter("@Desc", (object)tool.NameDescription ?? DBNull.Value),
            new SQLiteParameter("@Loc", tool.Location),
            new SQLiteParameter("@Brand", tool.Brand),
            new SQLiteParameter("@PN", tool.PartNumber),
            new SQLiteParameter("@Sup", (object)tool.Supplier ?? DBNull.Value),
            new SQLiteParameter("@PD", (object)tool.PurchasedDate ?? DBNull.Value),
            new SQLiteParameter("@Notes", (object)tool.Notes ?? DBNull.Value),
            new SQLiteParameter("@Keywords", (object)tool.Keywords ?? DBNull.Value),
            new SQLiteParameter("@Avail", tool.QuantityOnHand),
            new SQLiteParameter("@Rent", tool.RentedQuantity)
        };
        SqliteHelper.ExecuteNonQuery(_connString, UpsertToolCsv, p);
    }

    public void UpdateTool(ToolModel tool)
    {
        const string sql = @"
            UPDATE Tools SET
              ToolNumber = @ToolNumber,
              NameDescription = @Desc,
              Location = @Loc,
              Brand = @Brand,
              PartNumber = @PN,
              Supplier = @Sup,
              PurchasedDate = @PD,
              Notes = @Notes,
              Keywords = @Keywords,
              AvailableQuantity = @Avail,
              RentedQuantity = @Rent,
              IsCheckedOut = @Out,
              CheckedOutBy = @By,
              CheckedOutTime = @Time,
              ToolImagePath = @Img
            WHERE ToolID = @ID";
        var p = new[]
        {
            new SQLiteParameter("@ID", tool.ToolID),
            new SQLiteParameter("@ToolNumber", tool.ToolNumber),
            new SQLiteParameter("@Desc", (object)tool.NameDescription ?? DBNull.Value),
            new SQLiteParameter("@Loc", tool.Location),
            new SQLiteParameter("@Brand", tool.Brand),
            new SQLiteParameter("@PN", tool.PartNumber),
            new SQLiteParameter("@Sup", (object)tool.Supplier ?? DBNull.Value),
            new SQLiteParameter("@PD", (object)tool.PurchasedDate ?? DBNull.Value),
            new SQLiteParameter("@Notes", (object)tool.Notes ?? DBNull.Value),
            new SQLiteParameter("@Keywords", (object)tool.Keywords ?? DBNull.Value),
            new SQLiteParameter("@Avail", tool.QuantityOnHand),
            new SQLiteParameter("@Rent", tool.RentedQuantity),
            new SQLiteParameter("@Out", tool.IsCheckedOut ? 1 : 0),
            new SQLiteParameter("@By", (object)tool.CheckedOutBy ?? DBNull.Value),
            new SQLiteParameter("@Time", (object)tool.CheckedOutTime ?? DBNull.Value),
            new SQLiteParameter("@Img", (object)tool.ToolImagePath ?? DBNull.Value)
        };
        SqliteHelper.ExecuteNonQuery(_connString, sql, p);
    }

    public void UpdateToolQuantities(string toolID, int qtyChange, bool isRental)
    {
        if (qtyChange <= 0) throw new ArgumentException("Quantity change must be positive.", nameof(qtyChange));
        var sql = isRental
            ? @"UPDATE Tools SET AvailableQuantity = AvailableQuantity - @Q, RentedQuantity = RentedQuantity + @Q WHERE ToolID = @ID AND AvailableQuantity >= @Q"
            : @"UPDATE Tools SET AvailableQuantity = AvailableQuantity + @Q, RentedQuantity = RentedQuantity - @Q WHERE ToolID = @ID AND RentedQuantity >= @Q";
        var p = new[]
        {
            new SQLiteParameter("@ID", toolID),
            new SQLiteParameter("@Q", qtyChange)
        };
        if (SqliteHelper.ExecuteNonQuery(_connString, sql, p) == 0)
            throw new InvalidOperationException("Quantity update failed.");
    }

    public void DeleteTool(string toolID) =>
        SqliteHelper.ExecuteNonQuery(_connString, "DELETE FROM Tools WHERE ToolID=@ID",
            new[] { new SQLiteParameter("@ID", toolID) });

    public void ToggleToolCheckOutStatus(string toolID, string currentUser)
    {
        var isOut = Convert.ToInt32(SqliteHelper.ExecuteScalar(_connString,
            "SELECT IsCheckedOut FROM Tools WHERE ToolID=@ID",
            new[] { new SQLiteParameter("@ID", toolID) })) == 1;
        var newStatus = isOut ? 0 : 1;
        var time = isOut ? (object)DBNull.Value : DateTime.Now;
        var by = isOut ? (object)DBNull.Value : currentUser;
        SqliteHelper.ExecuteNonQuery(_connString, @"
            UPDATE Tools SET
              IsCheckedOut = @Out,
              CheckedOutBy = @By,
              CheckedOutTime = @Time
            WHERE ToolID = @ID", new[]
        {
            new SQLiteParameter("@Out", newStatus),
            new SQLiteParameter("@By", by),
            new SQLiteParameter("@Time", time),
            new SQLiteParameter("@ID", toolID)
        });
    }

    public List<ToolModel> GetToolsCheckedOutBy(string userName) =>
        SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Tools WHERE CheckedOutBy=@User AND IsCheckedOut=1",
            new[] { new SQLiteParameter("@User", userName) }, MapTool);

    public void UpdateToolImage(string toolID, string imagePath) =>
        SqliteHelper.ExecuteNonQuery(_connString, "UPDATE Tools SET ToolImagePath=@Img WHERE ToolID=@ID",
            new[]
            {
                new SQLiteParameter("@Img", imagePath),
                new SQLiteParameter("@ID", toolID)
            });

    public void ImportToolsFromCsv(string filePath, IDictionary<string, string> map)
    {
        var tools = CsvHelperUtil.LoadToolsFromCsv(filePath, map);
        foreach (var tool in tools)
        {
            if (!ToolExists(tool.ToolNumber))
                AddTool(tool);
        }
    }

    public void ExportToolsToCsv(string filePath)
    {
        var tools = GetAllTools();
        CsvHelperUtil.ExportToolsToCsv(filePath, tools);
    }

    private bool ToolExists(string toolNumber)
    {
        const string sql = "SELECT COUNT(*) FROM Tools WHERE ToolNumber = @TN";
        var count = Convert.ToInt32(SqliteHelper.ExecuteScalar(_connString, sql, new[] {
            new SQLiteParameter("@TN", toolNumber)
        }));
        return count > 0;
    }

    ToolModel MapTool(IDataRecord r) => new()
    {
        ToolID = r["ToolID"].ToString(),
        ToolNumber = r["ToolNumber"].ToString(),
        PartNumber = r["PartNumber"].ToString(),
        NameDescription = r["NameDescription"].ToString(),
        Brand = r["Brand"].ToString(),
        Location = r["Location"].ToString(),
        QuantityOnHand = Convert.ToInt32(r["AvailableQuantity"]),
        RentedQuantity = Convert.ToInt32(r["RentedQuantity"]),
        Supplier = r["Supplier"].ToString(),
        PurchasedDate = r["PurchasedDate"] is DBNull ? (DateTime?)null : Convert.ToDateTime(r["PurchasedDate"]),
        Notes = r["Notes"].ToString(),
        IsCheckedOut = Convert.ToInt32(r["IsCheckedOut"]) == 1,
        CheckedOutBy = r["CheckedOutBy"].ToString(),
        CheckedOutTime = r["CheckedOutTime"] is DBNull ? (DateTime?)null : Convert.ToDateTime(r["CheckedOutTime"]),
        ToolImagePath = r["ToolImagePath"]?.ToString(),
        Keywords = r["Keywords"]?.ToString()
    };
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\Users\ActivityLogService.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;

namespace ToolManagementAppV2.Services.Users
{
    public class ActivityLogService
    {
        readonly string _connString;

        public ActivityLogService(DatabaseService dbService) =>
            _connString = dbService.ConnectionString;

        public void LogAction(int userID, string userName, string action)
        {
            const string sql = @"
                INSERT INTO ActivityLogs (UserID, UserName, Action)
                VALUES (@UserID, @UserName, @Action)";
            var p = new[]
            {
                new SQLiteParameter("@UserID",   userID),
                new SQLiteParameter("@UserName", userName),
                new SQLiteParameter("@Action",   action)
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        public List<ActivityLog> GetRecentLogs(int count = 50)
        {
            const string sql = @"
                SELECT * FROM ActivityLogs
                 ORDER BY Timestamp DESC
                 LIMIT @Count";
            var p = new[] { new SQLiteParameter("@Count", count) };
            return SqliteHelper.ExecuteReader(_connString, sql, p, MapLog);
        }

        public void PurgeOldLogs(DateTime threshold)
        {
            const string sql = @"
                DELETE FROM ActivityLogs
                 WHERE Timestamp < @Threshold";
            var p = new[] { new SQLiteParameter("@Threshold", threshold) };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        ActivityLog MapLog(IDataRecord r) => new()
        {
            LogID = Convert.ToInt32(r["LogID"]),
            UserID = Convert.ToInt32(r["UserID"]),
            UserName = r["UserName"].ToString(),
            Action = r["Action"].ToString(),
            Timestamp = Convert.ToDateTime(r["Timestamp"])
        };
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\Users\UserService.cs
--------------------------------------------------
using System.Data.SQLite;
using System.IO;
using System.Windows.Media.Imaging;
using System.Data;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Core;

namespace ToolManagementAppV2.Services.Users
{
    public class UserService
    {
        readonly string _connString;

        public UserService(DatabaseService dbService) =>
            _connString = dbService.ConnectionString;

        public List<User> GetAllUsers() =>
            SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Users", null, MapUser);

        public User GetUserByID(int userID) =>
            SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Users WHERE UserID=@ID",
                new[] { new SQLiteParameter("@ID", userID) }, MapUser).FirstOrDefault();

        public User AuthenticateUser(string userName, string password)
        {
            var users = SqliteHelper.ExecuteReader(_connString,
                "SELECT * FROM Users WHERE UserName=@UserName",
                new[] { new SQLiteParameter("@UserName", userName) }, MapUser);
            var u = users.FirstOrDefault();
            return u != null && u.Password == password ? u : null;
        }

        public User GetCurrentUser() =>
            SqliteHelper.ExecuteReader(_connString, "SELECT * FROM Users LIMIT 1", null, MapUser).FirstOrDefault();

        public void AddUser(User user)
        {
            const string sql = @"
                INSERT INTO Users
                  (UserName, Password, UserPhotoPath, IsAdmin, Email, Phone, Address, Role)
                VALUES
                  (@UserName,@Password,@Photo,@Admin,@Email,@Phone,@Address,@Role);
                SELECT last_insert_rowid();";

            using var conn = new SQLiteConnection(_connString);
            conn.Open();
            using var cmd = new SQLiteCommand(sql, conn);
            cmd.Parameters.AddRange(new[]
            {
                new SQLiteParameter("@UserName", user.UserName),
                new SQLiteParameter("@Password", user.Password ?? string.Empty),
                new SQLiteParameter("@Photo",    (object)user.UserPhotoPath ?? DBNull.Value),
                new SQLiteParameter("@Admin",    user.IsAdmin ? 1 : 0),
                new SQLiteParameter("@Email",    (object)user.Email ?? DBNull.Value),
                new SQLiteParameter("@Phone",    (object)user.Phone ?? DBNull.Value),
                new SQLiteParameter("@Address",  (object)user.Address ?? DBNull.Value),
                new SQLiteParameter("@Role",     (object)user.Role ?? DBNull.Value)
            });
            user.UserID = Convert.ToInt32(cmd.ExecuteScalar());
        }

        public void UpdateUser(User user)
        {
            const string sql = @"
                UPDATE Users SET
                  UserName      = @UserName,
                  Password      = @Password,
                  UserPhotoPath = @Photo,
                  IsAdmin       = @Admin,
                  Email         = @Email,
                  Phone         = @Phone,
                  Address       = @Address,
                  Role          = @Role
                WHERE UserID = @UserID";

            var p = new[]
            {
                new SQLiteParameter("@UserID",   user.UserID),
                new SQLiteParameter("@UserName", user.UserName),
                new SQLiteParameter("@Password", user.Password ?? string.Empty),
                new SQLiteParameter("@Photo",    (object)user.UserPhotoPath ?? DBNull.Value),
                new SQLiteParameter("@Admin",    user.IsAdmin ? 1 : 0),
                new SQLiteParameter("@Email",    (object)user.Email ?? DBNull.Value),
                new SQLiteParameter("@Phone",    (object)user.Phone ?? DBNull.Value),
                new SQLiteParameter("@Address",  (object)user.Address ?? DBNull.Value),
                new SQLiteParameter("@Role",     (object)user.Role ?? DBNull.Value)
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        public void ChangeUserPassword(int userID, string newPassword)
        {
            var sql = "UPDATE Users SET Password=@Pwd WHERE UserID=@ID";
            var p = new[]
            {
                new SQLiteParameter("@Pwd", newPassword),
                new SQLiteParameter("@ID",  userID)
            };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        public void DeleteUser(int userID)
        {
            var sql = "DELETE FROM Users WHERE UserID=@ID";
            var p = new[] { new SQLiteParameter("@ID", userID) };
            SqliteHelper.ExecuteNonQuery(_connString, sql, p);
        }

        User MapUser(IDataRecord rdr)
        {
            var u = new User
            {
                UserID = Convert.ToInt32(rdr["UserID"]),
                UserName = rdr["UserName"].ToString(),
                Password = rdr["Password"].ToString(),
                UserPhotoPath = rdr["UserPhotoPath"].ToString(),
                IsAdmin = Convert.ToInt32(rdr["IsAdmin"]) == 1,
                Email = rdr["Email"]?.ToString(),
                Phone = rdr["Phone"]?.ToString(),
                Address = rdr["Address"]?.ToString(),
                Role = rdr["Role"]?.ToString()
            };
            if (!string.IsNullOrEmpty(u.UserPhotoPath) && File.Exists(u.UserPhotoPath))
                u.PhotoBitmap = new BitmapImage(new Uri(u.UserPhotoPath));
            return u;
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\Converters\BooleanToAdminConverter.cs
--------------------------------------------------
// File: Utilities/BooleanToAdminConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities.Converters
{
    public class BooleanToAdminConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool isAdmin && isAdmin)
                return "Admin";
            return string.Empty;
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\Converters\CheckOutStatusConverter.cs
--------------------------------------------------
// File: Utilities/CheckOutStatusConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities.Converters
{
    public class CheckOutStatusConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value is bool isCheckedOut && isCheckedOut ? "Check In" : "Check Out";
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\Converters\InverseBooleanConverter.cs
--------------------------------------------------
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities.Converters
{
    public class InverseBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool b)
                return !b;
            return value;
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool b)
                return !b;
            return value;
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\Converters\NonEmptyStringToBoolConverter.cs
--------------------------------------------------
// NonEmptyStringToBoolConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities.Converters
{
    public class NonEmptyStringToBoolConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture) =>
            !string.IsNullOrEmpty(value as string);

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) =>
            throw new NotImplementedException();
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\Converters\NullToDefaultImageConverter.cs
--------------------------------------------------
// Revised NullToDefaultImageConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media.Imaging;

namespace ToolManagementAppV2.Utilities.Converters
{
    public class NullToDefaultImageConverter : IValueConverter
    {
        private static BitmapImage _defaultUser;
        private static BitmapImage _defaultTool;
        private static BitmapImage _defaultLogo;

        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // If we've already got an actual BitmapImage, just return it
            if (value is BitmapImage bmp) return bmp;

            // If it's a path, try loading it
            if (value is string path && !string.IsNullOrEmpty(path))
            {
                try { return new BitmapImage(new Uri(path, UriKind.Absolute)); }
                catch { /* fall‐through to default */ }
            }

            // Figure out which default we need
            string type = (parameter as string)?.ToLowerInvariant() ?? "user";
            switch (type)
            {
                case "tool":
                    if (_defaultTool == null)
                        _defaultTool = LoadFromResource("DefaultToolImage.png");
                    return _defaultTool;

                case "logo":
                    if (_defaultLogo == null)
                        _defaultLogo = LoadFromResource("DefaultLogo.png");
                    return _defaultLogo;

                default: // user
                    if (_defaultUser == null)
                        _defaultUser = LoadFromResource("DefaultUserPhoto.png");
                    return _defaultUser;
            }
        }

        private BitmapImage LoadFromResource(string fileName)
        {
            try
            {
                var uri = new Uri($"pack://application:,,,/Resources/{fileName}", UriKind.Absolute);
                return new BitmapImage(uri);
            }
            catch
            {
                return new BitmapImage(); // empty fallback
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\Extensions\ObservableCollectionExtensions.cs
--------------------------------------------------
using System.Collections.ObjectModel;

namespace ToolManagementAppV2.Utilities.Extensions
{
    internal static class ObservableCollectionExtensions
    {
        public static void ReplaceRange<T>(this ObservableCollection<T> collection, IEnumerable<T> items)
        {
            collection.Clear();
            foreach (var i in items)
                collection.Add(i);
        }

        public static void AddRange<T>(this ObservableCollection<T> collection, IEnumerable<T> items)
        {
            foreach (var i in items)
                collection.Add(i);
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\ViewModels\Customer\CustomerViewModel.cs
--------------------------------------------------
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.ViewModels.Customer
{
    internal class CustomerViewModel : ObservableObject
    {
        private CustomerModel _customer;
        public CustomerModel Customer
        {
            get => _customer;
            set => SetProperty(ref _customer, value);
        }

        public CustomerViewModel(CustomerModel customer)
        {
            _customer = customer;
        }

        public string DisplayName => $"{_customer.Name} - {_customer.Email}";
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\ViewModels\Import\ImportMappingViewModel.cs
--------------------------------------------------
using CommunityToolkit.Mvvm.ComponentModel;
using System.Collections.ObjectModel;

namespace ToolManagementAppV2.ViewModels.ImportExport
{
    public class FieldMapping : ObservableObject
    {
        public string PropertyName { get; }
        public IReadOnlyList<string> AvailableColumns { get; }

        private string _selectedColumn;
        public string SelectedColumn
        {
            get => _selectedColumn;
            set => SetProperty(ref _selectedColumn, value);
        }

        public FieldMapping(string propertyName, IReadOnlyList<string> availableColumns)
        {
            PropertyName = propertyName ?? throw new ArgumentNullException(nameof(propertyName));
            AvailableColumns = availableColumns ?? throw new ArgumentNullException(nameof(availableColumns));
            _selectedColumn = AvailableColumns.FirstOrDefault();
        }
    }

    public class ImportMappingViewModel : ObservableObject
    {
        public IReadOnlyList<string> ColumnHeaders { get; }
        public ObservableCollection<FieldMapping> Mappings { get; }

        public ImportMappingViewModel(IEnumerable<string> headers, IEnumerable<string> properties)
        {
            var headerList = (headers ?? Enumerable.Empty<string>()).ToList();
            ColumnHeaders = headerList;

            Mappings = new ObservableCollection<FieldMapping>(
                (properties ?? Enumerable.Empty<string>())
                    .Select(prop => new FieldMapping(prop, ColumnHeaders))
            );
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\ViewModels\Main\MainViewModel.cs
--------------------------------------------------
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Win32;
using System.Collections.ObjectModel;
using System.IO;
using System.Windows;
using System.Windows.Media.Imaging;
using System.Windows.Threading;
using ToolManagementAppV2.Models.Domain;
using ToolManagementAppV2.Services.Customers;
using ToolManagementAppV2.Services.Rentals;
using ToolManagementAppV2.Services.Settings;
using ToolManagementAppV2.Services.Users;
using ToolManagementAppV2.Views;

namespace ToolManagementAppV2.ViewModels.Main
{
    public class MainViewModel : ObservableObject
    {
        readonly DispatcherTimer _refreshTimer;
        readonly ToolService _toolService;
        readonly UserService _userService;
        readonly CustomerService _customerService;
        readonly RentalService _rentalService;
        readonly SettingsService _settingsService;

        public ObservableCollection<ToolModel> Tools { get; } = new();
        public ObservableCollection<ToolModel> SearchResults { get; } = new();
        public ObservableCollection<ToolModel> CheckedOutTools { get; } = new();
        ToolModel _selectedTool;
        public ToolModel SelectedTool
        {
            get => _selectedTool;
            set => SetProperty(ref _selectedTool, value);
        }

        public ObservableCollection<UserModel> Users { get; } = new();
        UserModel _selectedUser;
        public UserModel SelectedUser
        {
            get => _selectedUser;
            set
            {
                SetProperty(ref _selectedUser, value);
                OnPropertyChanged(nameof(IsLastAdmin));
            }
        }

        public ObservableCollection<CustomerModel> Customers { get; } = new();
        CustomerModel _selectedCustomer;
        public CustomerModel SelectedCustomer
        {
            get => _selectedCustomer;
            set => SetProperty(ref _selectedCustomer, value);
        }

        string _newCustomerName, _newCustomerEmail, _newCustomerContact, _newCustomerPhone, _newCustomerAddress;
        public string NewCustomerName { get => _newCustomerName; set => SetProperty(ref _newCustomerName, value); }
        public string NewCustomerEmail { get => _newCustomerEmail; set => SetProperty(ref _newCustomerEmail, value); }
        public string NewCustomerContact { get => _newCustomerContact; set => SetProperty(ref _newCustomerContact, value); }
        public string NewCustomerPhone { get => _newCustomerPhone; set => SetProperty(ref _newCustomerPhone, value); }
        public string NewCustomerAddress { get => _newCustomerAddress; set => SetProperty(ref _newCustomerAddress, value); }

        public ObservableCollection<RentalModel> ActiveRentals { get; } = new();
        public ObservableCollection<RentalModel> OverdueRentals { get; } = new();
        RentalModel _selectedRental;
        public RentalModel SelectedRental
        {
            get => _selectedRental;
            set => SetProperty(ref _selectedRental, value);
        }

        public DateTime NewDueDate { get; set; } = DateTime.Today.AddDays(7);

        string _currentUserName;
        public string CurrentUserName
        {
            get => _currentUserName;
            set => SetProperty(ref _currentUserName, value);
        }

        BitmapImage _currentUserPhoto;
        public BitmapImage CurrentUserPhoto
        {
            get => _currentUserPhoto;
            set => SetProperty(ref _currentUserPhoto, value);
        }

        BitmapImage _headerLogo;
        public BitmapImage HeaderLogo
        {
            get
            {
                if (_headerLogo == null)
                {
                    var path = _settingsService.GetSetting("CompanyLogoPath");
                    var uri = string.IsNullOrEmpty(path) || !File.Exists(path)
                        ? new Uri("pack://application:,,,/Resources/DefaultLogo.png", UriKind.Absolute)
                        : new Uri(path, UriKind.Absolute);
                    _headerLogo = new BitmapImage(uri);
                }
                return _headerLogo;
            }
        }

        public string SearchTerm { get; set; }
        public bool IsLastAdmin =>
            SelectedUser != null &&
            SelectedUser.IsAdmin &&
            Users.Count(u => u.IsAdmin) == 1;

        public string UserPassword { get; set; }
        public string NewPassword { get; set; }
        public string ConfirmPassword { get; set; }

        public IRelayCommand SearchCommand { get; }
        public IRelayCommand AddToolCommand { get; }
        public IRelayCommand UpdateToolCommand { get; }
        public IRelayCommand ImportToolsCommand { get; }
        public IRelayCommand ExportToolsCommand { get; }
        public IRelayCommand DeleteToolCommand { get; }
        public IRelayCommand LoadUsersCommand { get; }
        public IRelayCommand ChooseProfilePicCommand { get; }
        public IRelayCommand UploadUserPhotoCommand { get; }

        public IRelayCommand LoadCustomersCommand { get; }
        public IRelayCommand AddCustomerCommand { get; }
        public IRelayCommand UpdateCustomerCommand { get; }
        public IRelayCommand ImportCustomersCommand { get; }
        public IRelayCommand ExportCustomersCommand { get; }
        public IRelayCommand DeleteCustomerCommand { get; }

        public IRelayCommand LoadActiveRentalsCommand { get; }
        public IRelayCommand LoadOverdueRentalsCommand { get; }
        public IRelayCommand ReturnToolCommand { get; }
        public IRelayCommand ExtendRentalCommand { get; }

        public MainViewModel(
            ToolService toolService,
            UserService userService,
            CustomerService customerService,
            RentalService rentalService,
            SettingsService settingsService)
        {
            _toolService = toolService;
            _userService = userService;
            _customerService = customerService;
            _rentalService = rentalService;
            _settingsService = settingsService;

            SearchCommand = new RelayCommand(SearchTools);
            AddToolCommand = new RelayCommand(AddTool);
            UpdateToolCommand = new RelayCommand(UpdateTool, () => SelectedTool != null);
            ImportToolsCommand = new RelayCommand(ImportTools);
            ExportToolsCommand = new RelayCommand(ExportTools);
            DeleteToolCommand = new RelayCommand(DeleteTool, () => SelectedTool != null);

            LoadUsersCommand = new RelayCommand(LoadUsers);
            ChooseProfilePicCommand = new RelayCommand(ChooseProfilePic, () => Application.Current.Properties["CurrentUser"] is UserModel);
            UploadUserPhotoCommand = new RelayCommand(() => UploadPhotoForUser(SelectedUser), () => SelectedUser != null);

            LoadCustomersCommand = new RelayCommand(LoadCustomers);
            AddCustomerCommand = new RelayCommand(AddCustomer);
            UpdateCustomerCommand = new RelayCommand(UpdateCustomer, () => SelectedCustomer != null);
            ImportCustomersCommand = new RelayCommand(ImportCustomers);
            ExportCustomersCommand = new RelayCommand(ExportCustomers);
            DeleteCustomerCommand = new RelayCommand(DeleteCustomer, () => SelectedCustomer != null);

            LoadActiveRentalsCommand = new RelayCommand(LoadActiveRentals);
            LoadOverdueRentalsCommand = new RelayCommand(LoadOverdueRentals);
            ReturnToolCommand = new RelayCommand(ReturnSelectedRental, () => SelectedRental != null);
            ExtendRentalCommand = new RelayCommand(ExtendSelectedRental, () => SelectedRental != null);

            InitializeData();
            _refreshTimer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(2) };
            _refreshTimer.Tick += (_, __) => { LoadTools(); LoadCheckedOutTools(); };
            _refreshTimer.Start();
        }

        void InitializeData()
        {
            LoadTools();
            LoadCheckedOutTools();
            LoadUsers();
            LoadCurrentUser();
            LoadCustomers();
            LoadActiveRentals();
            LoadOverdueRentals();
        }

        void LoadTools()
        {
            Tools.ReplaceRange(_toolService.GetAllTools());
        }

        void LoadCheckedOutTools()
        {
            CheckedOutTools.ReplaceRange(_toolService.GetAllTools().Where(t => t.IsCheckedOut));
        }

        void SearchTools()
        {
            var results = string.IsNullOrWhiteSpace(SearchTerm)
                ? _toolService.GetAllTools()
                : _toolService.SearchTools(SearchTerm);
            SearchResults.ReplaceRange(results);
        }

        void AddTool()
        {
            _toolService.AddTool(new ToolModel { ToolID = Guid.NewGuid().ToString(), NameDescription = string.Empty });
            LoadTools();
        }

        void UpdateTool()
        {
            _toolService.UpdateTool(SelectedTool);
            LoadTools();
        }

        void ImportTools()
        {
            if (!ShowFileDialog("CSV Files|*.csv", out var path)) return;
            var lines = File.ReadAllLines(path);
            if (lines.Length < 2) { ShowWarning("CSV has no data rows."); return; }
            var headers = lines[0].Split(',').Select(h => h.Trim());
            var fields = new[] { "ToolNumber", "NameDescription", "Location", "Brand", "PartNumber", "Supplier", "PurchasedDate", "Notes", "AvailableQuantity" };
            if (!ShowMappingWindow(headers, fields, out var map)) return;
            _toolService.ImportToolsFromCsv(path, map);
            LoadTools();
            ShowInfo($"{lines.Length - 1} tools imported successfully.");

            LoadTools();
            LoadCheckedOutTools();
            LoadCustomers();
        }

        void ExportTools()
        {
            if (!ShowSaveDialog("tools_export.csv", out var path)) return;
            _toolService.ExportToolsToCsv(path);
            ShowInfo("Tools exported successfully.");
        }

        void DeleteTool()
        {
            _toolService.DeleteTool(SelectedTool.ToolID);
            LoadTools();
        }

        public void LoadUsers()
        {
            Users.ReplaceRange(_userService.GetAllUsers());
            SelectedUser = Users.FirstOrDefault();
            OnPropertyChanged(nameof(IsLastAdmin));
        }

        void LoadCurrentUser()
        {
            if (Application.Current.Properties["CurrentUser"] is UserModel cu)
            {
                CurrentUserName = cu.UserName;
                CurrentUserPhoto = File.Exists(cu.UserPhotoPath)
                    ? new BitmapImage(new Uri(cu.UserPhotoPath))
                    : new BitmapImage(new Uri("pack://application:,,,/Resources/DefaultUserPhoto.png"));
            }
        }

        void ChooseProfilePic() => UploadPhotoForUser((UserModel)Application.Current.Properties["CurrentUser"]);

        void UploadPhotoForUser(UserModel u)
        {
            if (!ShowFileDialog("Image Files (*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg", out var src)) return;
            var folder = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "UserPhotos");
            Directory.CreateDirectory(folder);
            var dest = Path.Combine(folder, $"{Guid.NewGuid()}{Path.GetExtension(src)}");
            File.Copy(src, dest, true);
            var bmp = new BitmapImage();
            bmp.BeginInit(); bmp.CacheOption = BitmapCacheOption.OnLoad; bmp.UriSource = new Uri(dest); bmp.EndInit();
            u.UserPhotoPath = dest; u.PhotoBitmap = bmp;
            _userService.UpdateUser(u);
            if (Application.Current.Properties["CurrentUser"] is UserModel cu && cu.UserID == u.UserID)
            {
                cu.UserPhotoPath = dest; cu.PhotoBitmap = bmp;
                CurrentUserPhoto = bmp; CurrentUserName = cu.UserName;
            }
            LoadUsers();
        }

        void LoadCustomers()
        {
            Customers.ReplaceRange(_customerService.GetAllCustomers());
        }

        void AddCustomer()
        {
            _customerService.AddCustomer(new CustomerModel
            {
                Name = NewCustomerName,
                Email = NewCustomerEmail,
                Contact = NewCustomerContact,
                Phone = NewCustomerPhone,
                Address = NewCustomerAddress
            });
            LoadCustomers();
        }

        void UpdateCustomer()
        {
            _customerService.UpdateCustomer(SelectedCustomer);
            LoadCustomers();
        }

        void ImportCustomers()
        {
            if (!ShowFileDialog("CSV Files|*.csv", out var path)) return;
            var lines = File.ReadAllLines(path);
            if (lines.Length < 2) { ShowWarning("CSV has no data rows."); return; }
            var headers = lines[0].Split(',').Select(h => h.Trim());
            var fields = new[] { "ToolNumber", "Email", "Contact", "Phone", "Address" };
            if (!ShowMappingWindow(headers, fields, out var map)) return;
            LoadTools();
            LoadCheckedOutTools();
            _customerService.ImportCustomersFromCsv(path, map);
            LoadCustomers();
            ShowInfo($"{lines.Length - 1} customers imported successfully.");

        }

        void ExportCustomers()
        {
            if (!ShowSaveDialog("customers_export.csv", out var path)) return;
            _customerService.ExportCustomersToCsv(path);
            ShowInfo("Customers exported successfully.");
        }

        void DeleteCustomer()
        {
            _customerService.DeleteCustomer(SelectedCustomer.CustomerID);
            LoadCustomers();
        }

        void LoadActiveRentals()
        {
            ActiveRentals.ReplaceRange(_rentalService.GetActiveRentals());
            SelectedRental = null;
        }

        void LoadOverdueRentals()
        {
            OverdueRentals.ReplaceRange(_rentalService.GetOverdueRentals());
        }

        void ReturnSelectedRental()
        {
            _rentalService.ReturnTool(SelectedRental.RentalID, DateTime.Now);
            LoadActiveRentals();
            LoadOverdueRentals();
        }

        void ExtendSelectedRental()
        {
            _rentalService.ExtendRental(SelectedRental.RentalID, NewDueDate);
            LoadActiveRentals();
            LoadOverdueRentals();
        }

        bool ShowFileDialog(string filter, out string path)
        {
            var dlg = new OpenFileDialog { Filter = filter };
            if (dlg.ShowDialog() == true) { path = dlg.FileName; return true; }
            path = null; return false;
        }

        bool ShowSaveDialog(string defaultName, out string path)
        {
            var dlg = new SaveFileDialog { Filter = "CSV Files|*.csv", FileName = defaultName };
            if (dlg.ShowDialog() == true) { path = dlg.FileName; return true; }
            path = null; return false;
        }

        bool ShowMappingWindow(IEnumerable<string> headers, IEnumerable<string> fields, out Dictionary<string, string> map)
        {
            var win = new ImportMappingWindow(headers, fields);
            if (win.ShowDialog() == true)
            {
                map = win.VM.Mappings.ToDictionary(m => m.PropertyName, m => m.SelectedColumn);
                return true;
            }
            map = null;
            return false;
        }

        void ShowInfo(string msg) => MessageBox.Show(msg, "Info", MessageBoxButton.OK, MessageBoxImage.Information);
        void ShowWarning(string msg) => MessageBox.Show(msg, "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
    }

    static class ObservableCollectionExtensions
    {
        public static void ReplaceRange<T>(this ObservableCollection<T> collection, IEnumerable<T> items)
        {
            collection.Clear();
            foreach (var i in items) collection.Add(i);
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\ViewModels\Rental\RentalViewModel.cs
--------------------------------------------------
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.ViewModels.Rental
{
    internal class RentalViewModel : ObservableObject
    {
        private RentalModel _rental;
        public RentalModel Rental
        {
            get => _rental;
            set => SetProperty(ref _rental, value);
        }

        public RentalViewModel(RentalModel rental)
        {
            _rental = rental;
        }

        public string StatusSummary => $"{_rental.Status} (Due: {_rental.DueDate:yyyy-MM-dd})";
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\ViewModels\Settings\SettingsViewModel.cs
--------------------------------------------------
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.ViewModels.Settings
{
    internal class SettingsViewModel : ObservableObject
    {
        private string _applicationName;
        public string ApplicationName
        {
            get => _applicationName;
            set => SetProperty(ref _applicationName, value);
        }

        private string _companyLogoPath;
        public string CompanyLogoPath
        {
            get => _companyLogoPath;
            set => SetProperty(ref _companyLogoPath, value);
        }

        private int _defaultRentalDuration;
        public int DefaultRentalDuration
        {
            get => _defaultRentalDuration;
            set => SetProperty(ref _defaultRentalDuration, value);
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\ViewModels\Tool\ToolViewModel.cs
--------------------------------------------------
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.ViewModels.Tool
{
    internal class ToolViewModel : ObservableObject
    {
        private ToolModel _tool;
        public ToolModel Tool
        {
            get => _tool;
            set => SetProperty(ref _tool, value);
        }

        public ToolViewModel(ToolModel tool)
        {
            _tool = tool;
        }

        public string DisplayName => $"{_tool.ToolNumber} - {_tool.NameDescription}";
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\ViewModels\User\UserViewModel.cs
--------------------------------------------------
using CommunityToolkit.Mvvm.ComponentModel;

namespace ToolManagementAppV2.ViewModels.User
{
    internal class UserViewModel : ObservableObject
    {
        private UserModel _user;
        public UserModel User
        {
            get => _user;
            set => SetProperty(ref _user, value);
        }

        public UserViewModel(UserModel user)
        {
            _user = user;
        }

        public string DisplayName => $"{_user.UserName} ({(_user.IsAdmin ? "Admin" : "User")})";
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
--------------------------------------------------
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\App.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6FB3D0F57DDA2D30CA3F275BD99D9702C371929F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public static void Main() {
            ToolManagementAppV2.App app = new ToolManagementAppV2.App();
            app.Run();
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\App.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6FB3D0F57DDA2D30CA3F275BD99D9702C371929F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public static void Main() {
            ToolManagementAppV2.App app = new ToolManagementAppV2.App();
            app.Run();
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\GeneratedInternalTypeHelper.g.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XamlGeneratedNamespace {
    
    
    /// <summary>
    /// GeneratedInternalTypeHelper
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public sealed class GeneratedInternalTypeHelper : System.Windows.Markup.InternalTypeHelper {
        
        /// <summary>
        /// CreateInstance
        /// </summary>
        protected override object CreateInstance(System.Type type, System.Globalization.CultureInfo culture) {
            return System.Activator.CreateInstance(type, ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) 
                            | (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.CreateInstance)), null, null, culture);
        }
        
        /// <summary>
        /// GetPropertyValue
        /// </summary>
        protected override object GetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture) {
            return propertyInfo.GetValue(target, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// SetPropertyValue
        /// </summary>
        protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
            propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// CreateDelegate
        /// </summary>
        protected override System.Delegate CreateDelegate(System.Type delegateType, object target, string handler) {
            return ((System.Delegate)(target.GetType().InvokeMember("_CreateDelegate", (System.Reflection.BindingFlags.InvokeMethod 
                            | (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)), null, target, new object[] {
                        delegateType,
                        handler}, null)));
        }
        
        /// <summary>
        /// AddEventHandler
        /// </summary>
        protected override void AddEventHandler(System.Reflection.EventInfo eventInfo, object target, System.Delegate handler) {
            eventInfo.AddEventHandler(target, handler);
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\GeneratedInternalTypeHelper.g.i.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XamlGeneratedNamespace {
    
    
    /// <summary>
    /// GeneratedInternalTypeHelper
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public sealed class GeneratedInternalTypeHelper : System.Windows.Markup.InternalTypeHelper {
        
        /// <summary>
        /// CreateInstance
        /// </summary>
        protected override object CreateInstance(System.Type type, System.Globalization.CultureInfo culture) {
            return System.Activator.CreateInstance(type, ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) 
                            | (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.CreateInstance)), null, null, culture);
        }
        
        /// <summary>
        /// GetPropertyValue
        /// </summary>
        protected override object GetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture) {
            return propertyInfo.GetValue(target, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// SetPropertyValue
        /// </summary>
        protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
            propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// CreateDelegate
        /// </summary>
        protected override System.Delegate CreateDelegate(System.Type delegateType, object target, string handler) {
            return ((System.Delegate)(target.GetType().InvokeMember("_CreateDelegate", (System.Reflection.BindingFlags.InvokeMethod 
                            | (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)), null, target, new object[] {
                        delegateType,
                        handler}, null)));
        }
        
        /// <summary>
        /// AddEventHandler
        /// </summary>
        protected override void AddEventHandler(System.Reflection.EventInfo eventInfo, object target, System.Delegate handler) {
            eventInfo.AddEventHandler(target, handler);
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\MainWindow.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2FFE75EA5EB1106539805F1B992DAEAA4A496C1C"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2.Utilities.Converters;
using Xceed.Wpf.Toolkit;
using Xceed.Wpf.Toolkit.Chromes;
using Xceed.Wpf.Toolkit.Converters;
using Xceed.Wpf.Toolkit.Core;
using Xceed.Wpf.Toolkit.Core.Converters;
using Xceed.Wpf.Toolkit.Core.Input;
using Xceed.Wpf.Toolkit.Core.Media;
using Xceed.Wpf.Toolkit.Core.Utilities;
using Xceed.Wpf.Toolkit.Mag.Converters;
using Xceed.Wpf.Toolkit.Panels;
using Xceed.Wpf.Toolkit.Primitives;
using Xceed.Wpf.Toolkit.PropertyGrid;
using Xceed.Wpf.Toolkit.PropertyGrid.Attributes;
using Xceed.Wpf.Toolkit.PropertyGrid.Commands;
using Xceed.Wpf.Toolkit.PropertyGrid.Converters;
using Xceed.Wpf.Toolkit.PropertyGrid.Editors;
using Xceed.Wpf.Toolkit.Zoombox;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 38 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image HeaderIcon;
        
        #line default
        #line hidden
        
        
        #line 40 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock HeaderTitle;
        
        #line default
        #line hidden
        
        
        #line 64 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabControl MyTabControl;
        
        #line default
        #line hidden
        
        
        #line 73 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SearchInput;
        
        #line default
        #line hidden
        
        
        #line 78 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView SearchResultsList;
        
        #line default
        #line hidden
        
        
        #line 127 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CheckedOutToolsList;
        
        #line default
        #line hidden
        
        
        #line 183 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolNumberInput;
        
        #line default
        #line hidden
        
        
        #line 186 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolNameInput;
        
        #line default
        #line hidden
        
        
        #line 189 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PartNumberInput;
        
        #line default
        #line hidden
        
        
        #line 192 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox BrandInput;
        
        #line default
        #line hidden
        
        
        #line 195 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox LocationInput;
        
        #line default
        #line hidden
        
        
        #line 198 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox QuantityInput;
        
        #line default
        #line hidden
        
        
        #line 201 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SupplierInput;
        
        #line default
        #line hidden
        
        
        #line 204 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PurchasedInput;
        
        #line default
        #line hidden
        
        
        #line 208 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox NotesInput;
        
        #line default
        #line hidden
        
        
        #line 227 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ToolsList;
        
        #line default
        #line hidden
        
        
        #line 281 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerNameInput;
        
        #line default
        #line hidden
        
        
        #line 282 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerEmailInput;
        
        #line default
        #line hidden
        
        
        #line 283 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerContactInput;
        
        #line default
        #line hidden
        
        
        #line 284 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerPhoneInput;
        
        #line default
        #line hidden
        
        
        #line 285 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerAddressInput;
        
        #line default
        #line hidden
        
        
        #line 293 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CustomerList;
        
        #line default
        #line hidden
        
        
        #line 316 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 317 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 318 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox DueDateInput;
        
        #line default
        #line hidden
        
        
        #line 323 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox RentalIDInput;
        
        #line default
        #line hidden
        
        
        #line 324 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox NewDueDateInput;
        
        #line default
        #line hidden
        
        
        #line 328 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView RentalsList;
        
        #line default
        #line hidden
        
        
        #line 352 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView UserList;
        
        #line default
        #line hidden
        
        
        #line 384 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox PasswordBox;
        
        #line default
        #line hidden
        
        
        #line 430 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox ApplicationNameInput;
        
        #line default
        #line hidden
        
        
        #line 440 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox RentalDurationInput;
        
        #line default
        #line hidden
        
        
        #line 448 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image LogoPreview;
        
        #line default
        #line hidden
        
        
        #line 500 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ActivityLogsList;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 2:
            this.HeaderIcon = ((System.Windows.Controls.Image)(target));
            return;
            case 3:
            this.HeaderTitle = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 4:
            
            #line 50 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LogoutButton_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            this.MyTabControl = ((System.Windows.Controls.TabControl)(target));
            return;
            case 6:
            this.SearchInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            
            #line 73 "..\..\..\MainWindow.xaml"
            this.SearchInput.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.SearchInput_TextChanged);
            
            #line default
            #line hidden
            return;
            case 7:
            
            #line 75 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintSearchResults_Click);
            
            #line default
            #line hidden
            return;
            case 8:
            
            #line 76 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintMyCheckedOutTools_Click);
            
            #line default
            #line hidden
            return;
            case 9:
            this.SearchResultsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 10:
            
            #line 125 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChooseUserProfilePicButton_Click);
            
            #line default
            #line hidden
            return;
            case 11:
            this.CheckedOutToolsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 13:
            this.ToolNumberInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 14:
            this.ToolNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 15:
            this.PartNumberInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 16:
            this.BrandInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 17:
            this.LocationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 18:
            this.QuantityInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 19:
            this.SupplierInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 20:
            this.PurchasedInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 21:
            this.NotesInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 22:
            
            #line 218 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddButton_Click);
            
            #line default
            #line hidden
            return;
            case 23:
            
            #line 219 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateButton_Click);
            
            #line default
            #line hidden
            return;
            case 24:
            
            #line 220 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);
            
            #line default
            #line hidden
            return;
            case 25:
            
            #line 221 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeToolImage_Click);
            
            #line default
            #line hidden
            return;
            case 26:
            this.ToolsList = ((System.Windows.Controls.ListView)(target));
            
            #line 227 "..\..\..\MainWindow.xaml"
            this.ToolsList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ToolsList_SelectionChanged);
            
            #line default
            #line hidden
            return;
            case 27:
            this.CustomerNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 28:
            this.CustomerEmailInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 29:
            this.CustomerContactInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 30:
            this.CustomerPhoneInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 31:
            this.CustomerAddressInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 32:
            
            #line 287 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 33:
            
            #line 288 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 34:
            
            #line 289 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 35:
            this.CustomerList = ((System.Windows.Controls.ListView)(target));
            return;
            case 36:
            this.ToolIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 37:
            this.CustomerIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 38:
            this.DueDateInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 39:
            
            #line 319 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RentToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 40:
            
            #line 320 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ReturnToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 41:
            this.RentalIDInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 42:
            this.NewDueDateInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 43:
            
            #line 325 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ExtendRentalButton_Click);
            
            #line default
            #line hidden
            return;
            case 44:
            
            #line 326 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadOverdueRentals_Click);
            
            #line default
            #line hidden
            return;
            case 45:
            this.RentalsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 46:
            this.UserList = ((System.Windows.Controls.ListView)(target));
            return;
            case 47:
            
            #line 376 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadUserPhotoButton_Click);
            
            #line default
            #line hidden
            return;
            case 48:
            this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            
            #line 384 "..\..\..\MainWindow.xaml"
            this.PasswordBox.PasswordChanged += new System.Windows.RoutedEventHandler(this.PasswordBox_PasswordChanged);
            
            #line default
            #line hidden
            return;
            case 49:
            
            #line 408 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.NewUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 50:
            
            #line 409 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 51:
            
            #line 410 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SaveUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 52:
            this.ApplicationNameInput = ((System.Windows.Controls.TextBox)(target));
            return;
            case 53:
            this.RentalDurationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 54:
            this.LogoPreview = ((System.Windows.Controls.Image)(target));
            return;
            case 55:
            
            #line 455 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadLogoButton_Click);
            
            #line default
            #line hidden
            return;
            case 56:
            
            #line 459 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SaveSettingsButton_Click);
            
            #line default
            #line hidden
            return;
            case 57:
            
            #line 497 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshLogsButton_Click);
            
            #line default
            #line hidden
            return;
            case 58:
            
            #line 498 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PurgeLogsButton_Click);
            
            #line default
            #line hidden
            return;
            case 59:
            this.ActivityLogsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 60:
            
            #line 524 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintInventoryReport_Click);
            
            #line default
            #line hidden
            return;
            case 61:
            
            #line 525 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintActiveRentalsReport_Click);
            
            #line default
            #line hidden
            return;
            case 62:
            
            #line 526 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintFullRentalReport_Click);
            
            #line default
            #line hidden
            return;
            case 63:
            
            #line 529 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintActivityLogReport_Click);
            
            #line default
            #line hidden
            return;
            case 64:
            
            #line 530 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintCustomerReport_Click);
            
            #line default
            #line hidden
            return;
            case 65:
            
            #line 531 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintUserReport_Click);
            
            #line default
            #line hidden
            return;
            case 66:
            
            #line 533 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintSummaryReport_Click);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            
            #line 20 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            case 12:
            
            #line 134 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\MainWindow.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2FFE75EA5EB1106539805F1B992DAEAA4A496C1C"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2.Utilities.Converters;
using Xceed.Wpf.Toolkit;
using Xceed.Wpf.Toolkit.Chromes;
using Xceed.Wpf.Toolkit.Converters;
using Xceed.Wpf.Toolkit.Core;
using Xceed.Wpf.Toolkit.Core.Converters;
using Xceed.Wpf.Toolkit.Core.Input;
using Xceed.Wpf.Toolkit.Core.Media;
using Xceed.Wpf.Toolkit.Core.Utilities;
using Xceed.Wpf.Toolkit.Mag.Converters;
using Xceed.Wpf.Toolkit.Panels;
using Xceed.Wpf.Toolkit.Primitives;
using Xceed.Wpf.Toolkit.PropertyGrid;
using Xceed.Wpf.Toolkit.PropertyGrid.Attributes;
using Xceed.Wpf.Toolkit.PropertyGrid.Commands;
using Xceed.Wpf.Toolkit.PropertyGrid.Converters;
using Xceed.Wpf.Toolkit.PropertyGrid.Editors;
using Xceed.Wpf.Toolkit.Zoombox;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 38 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image HeaderIcon;
        
        #line default
        #line hidden
        
        
        #line 40 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock HeaderTitle;
        
        #line default
        #line hidden
        
        
        #line 64 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabControl MyTabControl;
        
        #line default
        #line hidden
        
        
        #line 73 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SearchInput;
        
        #line default
        #line hidden
        
        
        #line 78 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView SearchResultsList;
        
        #line default
        #line hidden
        
        
        #line 127 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CheckedOutToolsList;
        
        #line default
        #line hidden
        
        
        #line 183 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolNumberInput;
        
        #line default
        #line hidden
        
        
        #line 186 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolNameInput;
        
        #line default
        #line hidden
        
        
        #line 189 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PartNumberInput;
        
        #line default
        #line hidden
        
        
        #line 192 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox BrandInput;
        
        #line default
        #line hidden
        
        
        #line 195 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox LocationInput;
        
        #line default
        #line hidden
        
        
        #line 198 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox QuantityInput;
        
        #line default
        #line hidden
        
        
        #line 201 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SupplierInput;
        
        #line default
        #line hidden
        
        
        #line 204 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PurchasedInput;
        
        #line default
        #line hidden
        
        
        #line 208 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox NotesInput;
        
        #line default
        #line hidden
        
        
        #line 227 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ToolsList;
        
        #line default
        #line hidden
        
        
        #line 281 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerNameInput;
        
        #line default
        #line hidden
        
        
        #line 282 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerEmailInput;
        
        #line default
        #line hidden
        
        
        #line 283 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerContactInput;
        
        #line default
        #line hidden
        
        
        #line 284 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerPhoneInput;
        
        #line default
        #line hidden
        
        
        #line 285 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerAddressInput;
        
        #line default
        #line hidden
        
        
        #line 293 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CustomerList;
        
        #line default
        #line hidden
        
        
        #line 316 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 317 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 318 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox DueDateInput;
        
        #line default
        #line hidden
        
        
        #line 323 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox RentalIDInput;
        
        #line default
        #line hidden
        
        
        #line 324 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox NewDueDateInput;
        
        #line default
        #line hidden
        
        
        #line 328 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView RentalsList;
        
        #line default
        #line hidden
        
        
        #line 352 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView UserList;
        
        #line default
        #line hidden
        
        
        #line 384 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox PasswordBox;
        
        #line default
        #line hidden
        
        
        #line 430 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBox ApplicationNameInput;
        
        #line default
        #line hidden
        
        
        #line 440 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox RentalDurationInput;
        
        #line default
        #line hidden
        
        
        #line 448 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image LogoPreview;
        
        #line default
        #line hidden
        
        
        #line 500 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ActivityLogsList;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;V1.0.0.0;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 2:
            this.HeaderIcon = ((System.Windows.Controls.Image)(target));
            return;
            case 3:
            this.HeaderTitle = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 4:
            
            #line 50 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LogoutButton_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            this.MyTabControl = ((System.Windows.Controls.TabControl)(target));
            return;
            case 6:
            this.SearchInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            
            #line 73 "..\..\..\MainWindow.xaml"
            this.SearchInput.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.SearchInput_TextChanged);
            
            #line default
            #line hidden
            return;
            case 7:
            
            #line 75 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintSearchResults_Click);
            
            #line default
            #line hidden
            return;
            case 8:
            
            #line 76 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintMyCheckedOutTools_Click);
            
            #line default
            #line hidden
            return;
            case 9:
            this.SearchResultsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 10:
            
            #line 125 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChooseUserProfilePicButton_Click);
            
            #line default
            #line hidden
            return;
            case 11:
            this.CheckedOutToolsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 13:
            this.ToolNumberInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 14:
            this.ToolNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 15:
            this.PartNumberInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 16:
            this.BrandInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 17:
            this.LocationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 18:
            this.QuantityInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 19:
            this.SupplierInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 20:
            this.PurchasedInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 21:
            this.NotesInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 22:
            
            #line 218 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddButton_Click);
            
            #line default
            #line hidden
            return;
            case 23:
            
            #line 219 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateButton_Click);
            
            #line default
            #line hidden
            return;
            case 24:
            
            #line 220 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);
            
            #line default
            #line hidden
            return;
            case 25:
            
            #line 221 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeToolImage_Click);
            
            #line default
            #line hidden
            return;
            case 26:
            this.ToolsList = ((System.Windows.Controls.ListView)(target));
            
            #line 227 "..\..\..\MainWindow.xaml"
            this.ToolsList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ToolsList_SelectionChanged);
            
            #line default
            #line hidden
            return;
            case 27:
            this.CustomerNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 28:
            this.CustomerEmailInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 29:
            this.CustomerContactInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 30:
            this.CustomerPhoneInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 31:
            this.CustomerAddressInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 32:
            
            #line 287 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 33:
            
            #line 288 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 34:
            
            #line 289 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 35:
            this.CustomerList = ((System.Windows.Controls.ListView)(target));
            return;
            case 36:
            this.ToolIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 37:
            this.CustomerIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 38:
            this.DueDateInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 39:
            
            #line 319 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RentToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 40:
            
            #line 320 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ReturnToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 41:
            this.RentalIDInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 42:
            this.NewDueDateInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 43:
            
            #line 325 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ExtendRentalButton_Click);
            
            #line default
            #line hidden
            return;
            case 44:
            
            #line 326 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadOverdueRentals_Click);
            
            #line default
            #line hidden
            return;
            case 45:
            this.RentalsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 46:
            this.UserList = ((System.Windows.Controls.ListView)(target));
            return;
            case 47:
            
            #line 376 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadUserPhotoButton_Click);
            
            #line default
            #line hidden
            return;
            case 48:
            this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            
            #line 384 "..\..\..\MainWindow.xaml"
            this.PasswordBox.PasswordChanged += new System.Windows.RoutedEventHandler(this.PasswordBox_PasswordChanged);
            
            #line default
            #line hidden
            return;
            case 49:
            
            #line 408 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.NewUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 50:
            
            #line 409 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 51:
            
            #line 410 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SaveUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 52:
            this.ApplicationNameInput = ((System.Windows.Controls.TextBox)(target));
            return;
            case 53:
            this.RentalDurationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 54:
            this.LogoPreview = ((System.Windows.Controls.Image)(target));
            return;
            case 55:
            
            #line 455 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadLogoButton_Click);
            
            #line default
            #line hidden
            return;
            case 56:
            
            #line 459 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SaveSettingsButton_Click);
            
            #line default
            #line hidden
            return;
            case 57:
            
            #line 497 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshLogsButton_Click);
            
            #line default
            #line hidden
            return;
            case 58:
            
            #line 498 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PurgeLogsButton_Click);
            
            #line default
            #line hidden
            return;
            case 59:
            this.ActivityLogsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 60:
            
            #line 524 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintInventoryReport_Click);
            
            #line default
            #line hidden
            return;
            case 61:
            
            #line 525 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintActiveRentalsReport_Click);
            
            #line default
            #line hidden
            return;
            case 62:
            
            #line 526 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintFullRentalReport_Click);
            
            #line default
            #line hidden
            return;
            case 63:
            
            #line 529 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintActivityLogReport_Click);
            
            #line default
            #line hidden
            return;
            case 64:
            
            #line 530 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintCustomerReport_Click);
            
            #line default
            #line hidden
            return;
            case 65:
            
            #line 531 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintUserReport_Click);
            
            #line default
            #line hidden
            return;
            case 66:
            
            #line 533 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintSummaryReport_Click);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            
            #line 20 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            case 12:
            
            #line 134 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e71dab5547b48a6221e1ea4ef9f14fe5dfab6ddb")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_4whv1xgi_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0b252c92e4e829fc6db7c47d01e778a9d7b788ea")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_4whv1xgi_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_bjgbp44r_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0b252c92e4e829fc6db7c47d01e778a9d7b788ea")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_bjgbp44r_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_Content.g.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/1.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/10.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/11.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/12.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/13.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/14.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/15.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/16.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/17.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/18.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/19.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/2.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/20.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/21.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/22.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/23.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/24.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/25.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/26.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/27.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/28.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/29.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/3.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/30.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/31.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/32.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/33.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/34.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/35.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/36.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/37.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/38.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/39.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/4.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/40.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/5.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/6.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/7.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/8.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/9.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/thumbs.db")]




File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_Content.g.i.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/1.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/10.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/11.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/12.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/13.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/14.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/15.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/16.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/17.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/18.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/19.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/2.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/20.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/21.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/22.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/23.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/24.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/25.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/26.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/27.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/28.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/29.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/3.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/30.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/31.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/32.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/33.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/34.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/35.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/36.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/37.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/38.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/39.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/4.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/40.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/5.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/6.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/7.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/8.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/9.png")]
[assembly: System.Windows.Resources.AssemblyAssociatedContentFileAttribute("resources/avatars/thumbs.db")]




File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_cun4n0tz_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0b252c92e4e829fc6db7c47d01e778a9d7b788ea")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_cun4n0tz_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_i3hfquhs_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0b252c92e4e829fc6db7c47d01e778a9d7b788ea")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_i3hfquhs_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_l4wy5crd_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0b252c92e4e829fc6db7c47d01e778a9d7b788ea")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_l4wy5crd_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_pjhkhv1s_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0b252c92e4e829fc6db7c47d01e778a9d7b788ea")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_pjhkhv1s_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_sxtd1k2c_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0b252c92e4e829fc6db7c47d01e778a9d7b788ea")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_sxtd1k2c_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_xlrhifuq_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+0b252c92e4e829fc6db7c47d01e778a9d7b788ea")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_xlrhifuq_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\Views\AvatarSelectionWindow.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\..\Views\AvatarSelectionWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "89C244554D4EF6861715719952B75973E7115EBD"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2.Views {
    
    
    /// <summary>
    /// AvatarSelectionWindow
    /// </summary>
    public partial class AvatarSelectionWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 16 "..\..\..\..\Views\AvatarSelectionWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListBox AvatarListBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/views/avatarselectionwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\AvatarSelectionWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.AvatarListBox = ((System.Windows.Controls.ListBox)(target));
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 2:
            
            #line 27 "..\..\..\..\Views\AvatarSelectionWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AvatarButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\Views\AvatarSelectionWindow.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\..\Views\AvatarSelectionWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "89C244554D4EF6861715719952B75973E7115EBD"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2.Views {
    
    
    /// <summary>
    /// AvatarSelectionWindow
    /// </summary>
    public partial class AvatarSelectionWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 16 "..\..\..\..\Views\AvatarSelectionWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListBox AvatarListBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/views/avatarselectionwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\AvatarSelectionWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.AvatarListBox = ((System.Windows.Controls.ListBox)(target));
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 2:
            
            #line 27 "..\..\..\..\Views\AvatarSelectionWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AvatarButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\Views\ImportMappingWindow.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\..\Views\ImportMappingWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "CE890574D51B20B8A5C6903589F655B43D8E7B51"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2.Views {
    
    
    /// <summary>
    /// ImportMappingWindow
    /// </summary>
    public partial class ImportMappingWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/views/importmappingwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\ImportMappingWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            
            #line 42 "..\..\..\..\Views\ImportMappingWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Ok_Click);
            
            #line default
            #line hidden
            return;
            case 2:
            
            #line 43 "..\..\..\..\Views\ImportMappingWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Cancel_Click);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\Views\ImportMappingWindow.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\..\Views\ImportMappingWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "CE890574D51B20B8A5C6903589F655B43D8E7B51"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2.Views {
    
    
    /// <summary>
    /// ImportMappingWindow
    /// </summary>
    public partial class ImportMappingWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/views/importmappingwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\ImportMappingWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            
            #line 42 "..\..\..\..\Views\ImportMappingWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Ok_Click);
            
            #line default
            #line hidden
            return;
            case 2:
            
            #line 43 "..\..\..\..\Views\ImportMappingWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Cancel_Click);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\Views\LoginWindow.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\..\Views\LoginWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3AD4E3D596655B2BD8265E3D04BEF08095732EBC"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2.Utilities.Converters;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// LoginWindow
    /// </summary>
    public partial class LoginWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 19 "..\..\..\..\Views\LoginWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image LoginLogo;
        
        #line default
        #line hidden
        
        
        #line 20 "..\..\..\..\Views\LoginWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock HeaderTitle;
        
        #line default
        #line hidden
        
        
        #line 43 "..\..\..\..\Views\LoginWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListBox UsersListBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/views/loginwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\LoginWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.LoginLogo = ((System.Windows.Controls.Image)(target));
            return;
            case 2:
            this.HeaderTitle = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 3:
            this.UsersListBox = ((System.Windows.Controls.ListBox)(target));
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 4:
            
            #line 75 "..\..\..\..\Views\LoginWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UserButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\Views\LoginWindow.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\..\Views\LoginWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3AD4E3D596655B2BD8265E3D04BEF08095732EBC"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2.Utilities.Converters;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// LoginWindow
    /// </summary>
    public partial class LoginWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 19 "..\..\..\..\Views\LoginWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image LoginLogo;
        
        #line default
        #line hidden
        
        
        #line 20 "..\..\..\..\Views\LoginWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock HeaderTitle;
        
        #line default
        #line hidden
        
        
        #line 43 "..\..\..\..\Views\LoginWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListBox UsersListBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/views/loginwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\LoginWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.LoginLogo = ((System.Windows.Controls.Image)(target));
            return;
            case 2:
            this.HeaderTitle = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 3:
            this.UsersListBox = ((System.Windows.Controls.ListBox)(target));
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 4:
            
            #line 75 "..\..\..\..\Views\LoginWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UserButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\Views\PasswordPromptWindow.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\..\Views\PasswordPromptWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7B25D8A4A3EBDAFB560BC0B5A3C177D3C735EFBD"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// PasswordPromptWindow
    /// </summary>
    public partial class PasswordPromptWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 21 "..\..\..\..\Views\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock PromptTextBlock;
        
        #line default
        #line hidden
        
        
        #line 28 "..\..\..\..\Views\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox PasswordBox;
        
        #line default
        #line hidden
        
        
        #line 34 "..\..\..\..\Views\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock ErrorTextBlock;
        
        #line default
        #line hidden
        
        
        #line 58 "..\..\..\..\Views\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock ForgotPasswordTextBlock;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/views/passwordpromptwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\PasswordPromptWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.PromptTextBlock = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 2:
            this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            return;
            case 3:
            this.ErrorTextBlock = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 4:
            
            #line 49 "..\..\..\..\Views\PasswordPromptWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OK_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            
            #line 55 "..\..\..\..\Views\PasswordPromptWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Cancel_Click);
            
            #line default
            #line hidden
            return;
            case 6:
            this.ForgotPasswordTextBlock = ((System.Windows.Controls.TextBlock)(target));
            
            #line 68 "..\..\..\..\Views\PasswordPromptWindow.xaml"
            this.ForgotPasswordTextBlock.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.ForgotPasswordTextBlock_MouseLeftButtonUp);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\Views\PasswordPromptWindow.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\..\Views\PasswordPromptWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7B25D8A4A3EBDAFB560BC0B5A3C177D3C735EFBD"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// PasswordPromptWindow
    /// </summary>
    public partial class PasswordPromptWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 21 "..\..\..\..\Views\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock PromptTextBlock;
        
        #line default
        #line hidden
        
        
        #line 28 "..\..\..\..\Views\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox PasswordBox;
        
        #line default
        #line hidden
        
        
        #line 34 "..\..\..\..\Views\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock ErrorTextBlock;
        
        #line default
        #line hidden
        
        
        #line 58 "..\..\..\..\Views\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock ForgotPasswordTextBlock;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/views/passwordpromptwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\PasswordPromptWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.PromptTextBlock = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 2:
            this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            return;
            case 3:
            this.ErrorTextBlock = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 4:
            
            #line 49 "..\..\..\..\Views\PasswordPromptWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OK_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            
            #line 55 "..\..\..\..\Views\PasswordPromptWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Cancel_Click);
            
            #line default
            #line hidden
            return;
            case 6:
            this.ForgotPasswordTextBlock = ((System.Windows.Controls.TextBlock)(target));
            
            #line 68 "..\..\..\..\Views\PasswordPromptWindow.xaml"
            this.ForgotPasswordTextBlock.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.ForgotPasswordTextBlock_MouseLeftButtonUp);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\Views\PrintPreviewWindow.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\..\Views\PrintPreviewWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9476381648D14F35D0DB7988D822CA4E93AA6F6F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2.Views {
    
    
    /// <summary>
    /// PrintPreviewWindow
    /// </summary>
    public partial class PrintPreviewWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 19 "..\..\..\..\Views\PrintPreviewWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image PreviewLogo;
        
        #line default
        #line hidden
        
        
        #line 24 "..\..\..\..\Views\PrintPreviewWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock PreviewTitle;
        
        #line default
        #line hidden
        
        
        #line 67 "..\..\..\..\Views\PrintPreviewWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.FlowDocumentReader DocViewer;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/views/printpreviewwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\PrintPreviewWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.PreviewLogo = ((System.Windows.Controls.Image)(target));
            return;
            case 2:
            this.PreviewTitle = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 3:
            
            #line 45 "..\..\..\..\Views\PrintPreviewWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Print_Click);
            
            #line default
            #line hidden
            return;
            case 4:
            
            #line 55 "..\..\..\..\Views\PrintPreviewWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Close_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            this.DocViewer = ((System.Windows.Controls.FlowDocumentReader)(target));
            return;
            }
            this._contentLoaded = true;
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\Views\PrintPreviewWindow.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\..\Views\PrintPreviewWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9476381648D14F35D0DB7988D822CA4E93AA6F6F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2.Views {
    
    
    /// <summary>
    /// PrintPreviewWindow
    /// </summary>
    public partial class PrintPreviewWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 19 "..\..\..\..\Views\PrintPreviewWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image PreviewLogo;
        
        #line default
        #line hidden
        
        
        #line 24 "..\..\..\..\Views\PrintPreviewWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock PreviewTitle;
        
        #line default
        #line hidden
        
        
        #line 67 "..\..\..\..\Views\PrintPreviewWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.FlowDocumentReader DocViewer;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/views/printpreviewwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\..\Views\PrintPreviewWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.PreviewLogo = ((System.Windows.Controls.Image)(target));
            return;
            case 2:
            this.PreviewTitle = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 3:
            
            #line 45 "..\..\..\..\Views\PrintPreviewWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Print_Click);
            
            #line default
            #line hidden
            return;
            case 4:
            
            #line 55 "..\..\..\..\Views\PrintPreviewWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Close_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            this.DocViewer = ((System.Windows.Controls.FlowDocumentReader)(target));
            return;
            }
            this._contentLoaded = true;
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\App.xaml
--------------------------------------------------
<Application x:Class="ToolManagementAppV2.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Application.Resources>
    </Application.Resources>
</Application>


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\MainWindow.xaml
--------------------------------------------------
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:local="clr-namespace:ToolManagementAppV2.Utilities.Converters"
        xmlns:av="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="av"
        x:Class="ToolManagementAppV2.MainWindow"
        Title="Tool Inventory Management"
        Height="650"
        Width="1600"
        WindowStartupLocation="CenterScreen">
    <DockPanel Margin="10">
        <!-- Global Resources -->
        <DockPanel.Resources>
            <local:CheckOutStatusConverter x:Key="CheckOutStatusConverter"/>
            <local:NullToDefaultImageConverter x:Key="NullToDefaultImageConverter"/>
            <local:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
            <local:NonEmptyStringToBoolConverter x:Key="NonEmptyStringToBoolConverter"/>
            <DataTemplate x:Key="CheckOutButtonTemplate">
                <Button Content="{Binding IsCheckedOut, Converter={StaticResource CheckOutStatusConverter}}"
                Click="CheckOutButton_Click"
                CommandParameter="{Binding ToolID}" />
            </DataTemplate>
            <Style x:Key="ToolImageTooltipStyle" TargetType="ListViewItem">
                <Setter Property="ToolTip">
                    <Setter.Value>
                        <Border BorderBrush="Gray" BorderThickness="1" Padding="2" Background="White">
                            <Image Width="400" Height="400" Stretch="Uniform"
                       Source="{Binding ToolImagePath, Converter={StaticResource NullToDefaultImageConverter}, ConverterParameter=Tool}"/>
                        </Border>
                    </Setter.Value>
                </Setter>
            </Style>
        </DockPanel.Resources>

        <!-- Header with Logo and Title -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <DockPanel>
                <Image x:Name="HeaderIcon" Source="{Binding HeaderLogo}" Width="50" Height="50" />
                <!-- give this a name so code-behind can update it -->
                <TextBlock x:Name="HeaderTitle"
                           Text="Tool Inventory Management"
                           FontWeight="Bold"
                           FontSize="20"
                           Margin="10"
                           VerticalAlignment="Center"/>
                <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" HorizontalAlignment="Right" Margin="5">
                    <Image Source="{Binding CurrentUserPhoto}" Width="50" Height="50" Margin="0,0,10,0" />
                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="{Binding CurrentUserName}" FontWeight="Bold" Margin="0,0,0,5" />
                        <Button Content="Logout" Click="LogoutButton_Click" Width="80" />
                    </StackPanel>
                </StackPanel>
            </DockPanel>
        </Border>


        <!-- Main Content Area -->
        <Grid DockPanel.Dock="Top">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <TabControl x:Name="MyTabControl" Margin="5" Grid.Row="0">
                <!-- Search Tools Tab -->
                <TabItem Header="Search Tools">
                    <Grid Margin="5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="150" />
                        </Grid.RowDefinitions>
                        <xctk:WatermarkTextBox x:Name="SearchInput" Width="300" Margin="10,0" Watermark="Search Tools..." TextChanged="SearchInput_TextChanged" />
                        <StackPanel Orientation="Horizontal">
                            <Button Content="Print Search Results" Click="PrintSearchResults_Click" Height="20" Width="160" Margin="10,0" />
                            <Button Content="Print My Checked-Out Tools" Click="PrintMyCheckedOutTools_Click" Height="20" Width="160" Margin="10,0" />
                        </StackPanel>
                        <ListView x:Name="SearchResultsList" ItemContainerStyle="{StaticResource ToolImageTooltipStyle}" ItemsSource="{Binding SearchResults}" Margin="10" Grid.Row="1" ScrollViewer.VerticalScrollBarVisibility="Auto">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Action" Width="80" CellTemplate="{StaticResource CheckOutButtonTemplate}"/>
                                    <GridViewColumn Header="Tool Number" DisplayMemberBinding="{Binding ToolNumber}" Width="120"/>
                                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding NameDescription}" Width="380"/>
                                    <GridViewColumn Header="Part Number" DisplayMemberBinding="{Binding PartNumber}" Width="100"/>
                                    <GridViewColumn Header="Brand" DisplayMemberBinding="{Binding Brand}" Width="100"/>
                                    <GridViewColumn Header="Quantity" DisplayMemberBinding="{Binding QuantityOnHand}" Width="60"/>
                                    <GridViewColumn Header="Supplier" DisplayMemberBinding="{Binding Supplier}" Width="100"/>
                                    <GridViewColumn Header="Purchased Date" Width="80">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding PurchasedDate, StringFormat=\{0:yyyy-MM-dd\}}"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Notes" Width="200">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Notes}" TextWrapping="Wrap"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Image" Width="100">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Image
    Source="{Binding ToolImagePath,
                     Converter={StaticResource NullToDefaultImageConverter},
                     ConverterParameter=Tool}"
    Width="50" Height="50" Stretch="Uniform">
                                                    <Image.ToolTip>
                                                        <Border BorderBrush="Gray" BorderThickness="1" Padding="2" Background="White">
                                                            <Image Source="{Binding ToolImagePath,
                             Converter={StaticResource NullToDefaultImageConverter},
                             ConverterParameter=Tool}"
             Width="400" Height="400" Stretch="Uniform"/>
                                                        </Border>
                                                    </Image.ToolTip>
                                                </Image>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                        <Button Content="Choose Profile Picture" Click="ChooseUserProfilePicButton_Click" Width="150" Height="20" HorizontalAlignment="Right" VerticalAlignment="Top" Grid.RowSpan="2" />
                        <!-- In MainWindow.xaml, update the Checked Out Tools ListView -->
                        <ListView x:Name="CheckedOutToolsList" ItemContainerStyle="{StaticResource ToolImageTooltipStyle}" ItemsSource="{Binding CheckedOutTools}" Margin="10" Grid.Row="2">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Action" Width="80">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Button Content="{Binding IsCheckedOut, Converter={StaticResource CheckOutStatusConverter}}" 
                                Click="CheckOutButton_Click" 
                                CommandParameter="{Binding ToolID}" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Tool ID" DisplayMemberBinding="{Binding ToolID}" Width="60" />
                                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding NameDescription}" Width="380" />
                                    <GridViewColumn Header="Checked Out By" DisplayMemberBinding="{Binding CheckedOutBy}" Width="150" />
                                    <GridViewColumn Header="Checked Out Time" DisplayMemberBinding="{Binding CheckedOutTime, StringFormat=\{0:G\}}" Width="150" />
                                    <GridViewColumn Header="Location" DisplayMemberBinding="{Binding Location}" Width="100" />
                                </GridView>
                            </ListView.View>
                        </ListView>

                    </Grid>
                </TabItem>

                <!-- Tool Management Tab -->
                <TabItem Header="Tool Management">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="400"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <!-- Tool Details Panel -->
                        <GroupBox Grid.Column="0" Header="Tool Details" Margin="5">
                            <Grid Margin="5">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="120"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                

                                <TextBlock Text="Tool Number:" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center"/>
                                <xctk:WatermarkTextBox x:Name="ToolNumberInput" Grid.Row="1" Grid.Column="1" Watermark="Tool Number" Margin="0,2"/>

                                <TextBlock Text="Name:" Grid.Row="2" Grid.Column="0" VerticalAlignment="Center"/>
                                <xctk:WatermarkTextBox x:Name="ToolNameInput" Grid.Row="2" Grid.Column="1" Watermark="Tool Name" Margin="0,2"/>

                                <TextBlock Text="Part Number:" Grid.Row="3" Grid.Column="0" VerticalAlignment="Center"/>
                                <xctk:WatermarkTextBox x:Name="PartNumberInput" Grid.Row="3" Grid.Column="1" Watermark="Part Number" Margin="0,2"/>

                                <TextBlock Text="Brand:" Grid.Row="4" Grid.Column="0" VerticalAlignment="Center"/>
                                <xctk:WatermarkTextBox x:Name="BrandInput" Grid.Row="4" Grid.Column="1" Watermark="Brand" Margin="0,2"/>

                                <TextBlock Text="Location:" Grid.Row="5" Grid.Column="0" VerticalAlignment="Center"/>
                                <xctk:WatermarkTextBox x:Name="LocationInput" Grid.Row="5" Grid.Column="1" Watermark="Location" Margin="0,2"/>

                                <TextBlock Text="Quantity:" Grid.Row="6" Grid.Column="0" VerticalAlignment="Center"/>
                                <xctk:WatermarkTextBox x:Name="QuantityInput" Grid.Row="6" Grid.Column="1" Watermark="Quantity on Hand" Margin="0,2"/>

                                <TextBlock Text="Supplier:" Grid.Row="7" Grid.Column="0" VerticalAlignment="Center"/>
                                <xctk:WatermarkTextBox x:Name="SupplierInput" Grid.Row="7" Grid.Column="1" Watermark="Supplier" Margin="0,2"/>

                                <TextBlock Text="Purchased Date:" Grid.Row="8" Grid.Column="0" VerticalAlignment="Center"/>
                                <xctk:WatermarkTextBox x:Name="PurchasedInput" Grid.Row="8" Grid.Column="1" Watermark="yyyy-MM-dd" Margin="0,2"/>

                                <TextBlock Text="Notes:" Grid.Row="9" Grid.Column="0" VerticalAlignment="Top" Margin="0,5,0,0"/>
                                <Grid Grid.Row="9" Grid.Column="1">
                                    <xctk:WatermarkTextBox x:Name="NotesInput"
                           Watermark="Notes"
                           AcceptsReturn="True"
                           VerticalScrollBarVisibility="Auto"
                           TextWrapping="Wrap"
                           Margin="0,0,0,5"
                           VerticalAlignment="Stretch"/>
                                </Grid>

                                <StackPanel Grid.Row="10" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,10,0,0">
                                    <Button Content="Add" Click="AddButton_Click" Margin="5"/>
                                    <Button Content="Update" Click="UpdateButton_Click" Margin="5"/>
                                    <Button Content="Delete" Click="DeleteButton_Click" Margin="5"/>
                                    <Button Content="Add/Change Tool Image" Click="ChangeToolImage_Click" Margin="5"/>
                                </StackPanel>
                            </Grid>
                        </GroupBox>

                        <!-- Tool List Display -->
                        <ListView x:Name="ToolsList" Grid.Column="1" ItemContainerStyle="{StaticResource ToolImageTooltipStyle}" ItemsSource="{Binding Tools}" SelectionChanged="ToolsList_SelectionChanged" Margin="5">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Tool#" DisplayMemberBinding="{Binding ToolNumber}" Width="100" />
                                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding NameDescription}" Width="200" />
                                    <GridViewColumn Header="Part Number" DisplayMemberBinding="{Binding PartNumber}" Width="100" />
                                    <GridViewColumn Header="Brand" DisplayMemberBinding="{Binding Brand}" Width="100" />
                                    <GridViewColumn Header="Location" DisplayMemberBinding="{Binding Location}" Width="100" />
                                    <GridViewColumn Header="Quantity" DisplayMemberBinding="{Binding QuantityOnHand}" Width="80" />
                                    <GridViewColumn Header="Supplier" DisplayMemberBinding="{Binding Supplier}" Width="100" />
                                    <GridViewColumn Header="Purchased" Width="120">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding PurchasedDate, StringFormat=\{0:yyyy-MM-dd\}}"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Notes">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Notes}" TextWrapping="Wrap" Width="400"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Image" Width="100">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Image Source="{Binding ToolImagePath, Converter={StaticResource NullToDefaultImageConverter}}"
                                       Height="50" Width="50" Stretch="Uniform">
                                                    <Image.ToolTip>
                                                        <Border BorderBrush="Gray" BorderThickness="1" Padding="2" Background="White">
                                                            <Image Source="{Binding ToolImagePath, Converter={StaticResource NullToDefaultImageConverter}}"
                                                   Height="400" Width="400" Stretch="Uniform"/>
                                                        </Border>
                                                    </Image.ToolTip>
                                                </Image>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>

                <!-- Customers Management Tab -->
                <TabItem Header="Customers">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="350" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <GroupBox Header="Customer Details" Grid.Column="0" Margin="5">
                            <StackPanel>
                                <xctk:WatermarkTextBox x:Name="CustomerNameInput" Watermark="Name" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerEmailInput" Watermark="Email" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerContactInput" Watermark="Customer Contact" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerPhoneInput" Watermark="Phone" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerAddressInput" Watermark="Address" Margin="5" />
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <Button Content="Add" Click="AddCustomerButton_Click" Margin="5" />
                                    <Button Content="Update" Click="UpdateCustomerButton_Click" Margin="5" />
                                    <Button Content="Delete" Click="DeleteCustomerButton_Click" Margin="5" />
                                </StackPanel>
                            </StackPanel>
                        </GroupBox>
                        <ListView x:Name="CustomerList" Grid.Column="1" ItemsSource="{Binding Customers}" Margin="5">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}" Width="150" />
                                    <GridViewColumn Header="Email" DisplayMemberBinding="{Binding Email}" Width="200" />
                                    <GridViewColumn Header="Contact" DisplayMemberBinding="{Binding Contact}" Width="200" />
                                    <GridViewColumn Header="Phone" DisplayMemberBinding="{Binding Phone}" Width="120" />
                                    <GridViewColumn Header="Address" DisplayMemberBinding="{Binding Address}" Width="250" />
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>

                <!-- Rentals Management Tab -->
                <TabItem Header="Rentals">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <StackPanel Orientation="Horizontal" Margin="10" Grid.Row="0">
                            <xctk:WatermarkTextBox x:Name="ToolIDForRentalInput" Watermark="Tool ID" Margin="5" Width="200" />
                            <xctk:WatermarkTextBox x:Name="CustomerIDForRentalInput" Watermark="Customer ID" Margin="5" Width="200" />
                            <xctk:WatermarkTextBox x:Name="DueDateInput" Watermark="Due Date (YYYY-MM-DD)" Margin="5" Width="200" />
                            <Button Content="Rent Tool" Click="RentToolButton_Click" Margin="5" />
                            <Button Content="Return Tool" Click="ReturnToolButton_Click" Margin="5" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="10" Grid.Row="1">
                            <xctk:WatermarkTextBox x:Name="RentalIDInput" Watermark="Rental ID" Margin="5" Width="100" />
                            <xctk:WatermarkTextBox x:Name="NewDueDateInput" Watermark="New Due Date (YYYY-MM-DD)" Margin="5" Width="200" />
                            <Button Content="Extend Rental" Click="ExtendRentalButton_Click" Margin="5" />
                            <Button Content="Load Overdue Rentals" Click="LoadOverdueRentals_Click" Margin="5" />
                        </StackPanel>
                        <ListView x:Name="RentalsList" ItemsSource="{Binding Rentals}" Grid.Row="2" Margin="10">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Rental ID" DisplayMemberBinding="{Binding RentalID}" Width="100" />
                                    <GridViewColumn Header="Tool ID" DisplayMemberBinding="{Binding ToolID}" Width="100" />
                                    <GridViewColumn Header="Customer ID" DisplayMemberBinding="{Binding CustomerID}" Width="100" />
                                    <GridViewColumn Header="Rental Date" DisplayMemberBinding="{Binding RentalDate, StringFormat=\{0:yyyy-MM-dd\}}" Width="150" />
                                    <GridViewColumn Header="Due Date" DisplayMemberBinding="{Binding DueDate, StringFormat=\{0:yyyy-MM-dd\}}" Width="150" />
                                    <GridViewColumn Header="Return Date" DisplayMemberBinding="{Binding ReturnDate, StringFormat=\{0:yyyy-MM-dd\}}" Width="150" />
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>

                <!-- Users Management Tab -->
                <TabItem Header="Users">
                    <Grid Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="250"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <StackPanel Grid.Column="0">
                            <TextBlock Text="Users" FontSize="16" FontWeight="Bold" Margin="5"/>
                            <ListView x:Name="UserList" ItemsSource="{Binding Users}" 
          SelectedItem="{Binding SelectedUser, Mode=TwoWay}" Margin="5">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Header="Name" DisplayMemberBinding="{Binding UserName}" Width="160"/>
                                        <GridViewColumn Header="Admin" Width="70">
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <CheckBox IsChecked="{Binding IsAdmin}" IsEnabled="False" HorizontalAlignment="Center"/>
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </StackPanel>
                        <!-- Right Panel: User Details -->
                        <StackPanel Grid.Column="1" Margin="10" VerticalAlignment="Top">
                            <TextBlock Text="User Details" FontSize="16" FontWeight="Bold" Margin="5"/>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <Border Width="100" Height="100" BorderBrush="Gray" BorderThickness="1">
                                    <Image Source="{Binding SelectedUser.PhotoBitmap, ConverterParameter=User, Converter={StaticResource NullToDefaultImageConverter}}" 
                 Stretch="UniformToFill"/>
                                </Border>
                                <Button Content="Change Photo" Click="UploadUserPhotoButton_Click" Margin="10,0,0,0" VerticalAlignment="Center"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="User Name:" Width="100" VerticalAlignment="Center"/>
                                <TextBox Text="{Binding SelectedUser.UserName, Mode=TwoWay}" Width="200"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Password:" Width="100" VerticalAlignment="Center"/>
                                <PasswordBox x:Name="PasswordBox" Width="200" PasswordChanged="PasswordBox_PasswordChanged"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Email:" Width="100" VerticalAlignment="Center"/>
                                <TextBox Text="{Binding SelectedUser.Email, Mode=TwoWay}" Width="200"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Phone:" Width="100" VerticalAlignment="Center"/>
                                <TextBox Text="{Binding SelectedUser.Phone, Mode=TwoWay}" Width="200"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Address:" Width="100" VerticalAlignment="Center"/>
                                <TextBox Text="{Binding SelectedUser.Address, Mode=TwoWay}" Width="200"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Role:" Width="100" VerticalAlignment="Center"/>
                                <TextBox Text="{Binding SelectedUser.Role, Mode=TwoWay}" Width="200"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Is Admin:" Width="100" VerticalAlignment="Center"/>
                                <CheckBox IsChecked="{Binding SelectedUser.IsAdmin, Mode=TwoWay}" 
              IsEnabled="{Binding UserPassword, Converter={StaticResource NonEmptyStringToBoolConverter}, UpdateSourceTrigger=PropertyChanged}" />
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="10">
                                <Button Content="New User" Click="NewUserButton_Click" Width="100" Margin="5"/>
                                <Button Content="Delete User" Click="DeleteUserButton_Click" Width="100" Margin="5"/>
                                <Button Content="Save" Click="SaveUserButton_Click" Width="100" Margin="5"/>
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </TabItem>


                <!-- Settings Tab -->
                <TabItem Header="Settings">
                    <StackPanel Orientation="Vertical" Margin="10">
                        <TextBlock Text="Application Settings"
                               FontWeight="Bold"
                               FontSize="16"
                               Margin="5" />

                        <!-- ★ Application Name field -->
                        <StackPanel Orientation="Horizontal" Margin="5">
                            <TextBlock Text="Application Name:"
                                   VerticalAlignment="Center"
                                   Width="200"/>
                            <TextBox x:Name="ApplicationNameInput"
                                 Width="200"
                                 Margin="5"/>
                        </StackPanel>

                        <!-- Default Rental Duration -->
                        <StackPanel Orientation="Horizontal" Margin="5">
                            <TextBlock Text="Default Rental Duration (days):"
                                   VerticalAlignment="Center"
                                   Width="200" />
                            <xctk:WatermarkTextBox x:Name="RentalDurationInput"
                                               Text="7"
                                               Width="100"
                                               Margin="5" />
                        </StackPanel>

                        <!-- Company Logo -->
                        <TextBlock Text="Company Logo:" FontWeight="Bold" Margin="5" />
                        <Image x:Name="LogoPreview"
                           Width="150"
                           Height="150"
                           Margin="5"
                           Stretch="Uniform"
                           HorizontalAlignment="Left"/>
                        <Button Content="Upload Logo"
                            Click="UploadLogoButton_Click"
                            Margin="5"
                            HorizontalAlignment="Left" />
                        <Button Content="Save Settings"
                            Click="SaveSettingsButton_Click"
                            Margin="5"
                            HorizontalAlignment="Left" />
                    </StackPanel>
                </TabItem>


                <!-- In MainWindow.xaml, update Import/Export Tab to include Customers -->
                <TabItem Header="Import/Export">
                    <StackPanel Margin="10">
                        <TextBlock Text="Import / Export" FontWeight="Bold" FontSize="16" Margin="5"/>

                        <TextBlock Text="Tools" FontWeight="Bold" Margin="5,10,5,5"/>
                        <WrapPanel>
                            <Button Content="Import Tools"
              Command="{Binding ImportToolsCommand}"
              Width="150" Margin="5"/>
                            <Button Content="Export Tools"
              Command="{Binding ExportToolsCommand}"
              Width="150" Margin="5"/>
                        </WrapPanel>

                        <TextBlock Text="Customers" FontWeight="Bold" Margin="5,20,5,5"/>
                        <WrapPanel>
                            <Button Content="Import Customers"
              Command="{Binding ImportCustomersCommand}"
              Width="150" Margin="5"/>
                            <Button Content="Export Customers"
              Command="{Binding ExportCustomersCommand}"
              Width="150" Margin="5"/>
                        </WrapPanel>
                    </StackPanel>
                </TabItem>


                <TabItem Header="Activity Logs">
                    <Grid>
                        <StackPanel Orientation="Horizontal" Margin="10">
                            <Button Content="Refresh Logs" Click="RefreshLogsButton_Click" Margin="5" />
                            <Button Content="Purge Logs" Click="PurgeLogsButton_Click" Margin="5" />
                        </StackPanel>
                        <ListView x:Name="ActivityLogsList" Margin="10" VerticalAlignment="Stretch">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Log ID" DisplayMemberBinding="{Binding LogID}" Width="80" />
                                    <GridViewColumn Header="User ID" DisplayMemberBinding="{Binding UserID}" Width="80" />
                                    <GridViewColumn Header="User Name" DisplayMemberBinding="{Binding UserName}" Width="150" />
                                    <GridViewColumn Header="Action" DisplayMemberBinding="{Binding Action}" Width="400" />
                                    <GridViewColumn Header="Timestamp" Width="150">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Timestamp, StringFormat=\{0:yyyy-MM-dd HH:mm:ss\}}"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>
                <TabItem Header="Reports">
                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                        <StackPanel Margin="10">
                            <TextBlock Text="Generate and Print Reports" FontWeight="Bold" FontSize="16" Margin="0,0,0,10"/>
                            <WrapPanel Orientation="Horizontal">
                                <Button Content="Print Inventory Report" Click="PrintInventoryReport_Click" Margin="5" Width="200"/>
                                <Button Content="Print Active Rentals Report" Click="PrintActiveRentalsReport_Click" Margin="5" Width="200"/>
                                <Button Content="Print Full Rental History" Click="PrintFullRentalReport_Click" Margin="5" Width="200"/>
                            </WrapPanel>
                            <WrapPanel Orientation="Horizontal">
                                <Button Content="Print Activity Log Report" Click="PrintActivityLogReport_Click" Margin="5" Width="200"/>
                                <Button Content="Print Customer Report" Click="PrintCustomerReport_Click" Margin="5" Width="200"/>
                                <Button Content="Print User Report" Click="PrintUserReport_Click" Margin="5" Width="200"/>
                            </WrapPanel>
                            <Button Content="Print Summary Report" Click="PrintSummaryReport_Click" Margin="5" Width="200"/>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>


            </TabControl>

            <!-- Status Bar -->
            <StatusBar Grid.Row="1" Height="25" Background="LightGray">
                <StatusBarItem Content="Ready" />
            </StatusBar>
        </Grid>
    </DockPanel>
</Window>


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Views\AvatarSelectionWindow.xaml
--------------------------------------------------
<Window x:Class="ToolManagementAppV2.Views.AvatarSelectionWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Tool Inventory Management – Select Avatar"
        Height="650" Width="1600"
        WindowStartupLocation="CenterScreen">
    <DockPanel Margin="10">

        <!-- HEADER -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <TextBlock Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                       FontWeight="Bold" FontSize="20" Margin="10" />
        </Border>

        <!-- AVATAR GRID -->
        <ListBox x:Name="AvatarListBox"
                 DockPanel.Dock="Top"
                 Margin="0,4,0,0"
                 ItemsSource="{Binding Avatars}">
            <ListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <UniformGrid Columns="6" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Button Click="AvatarButton_Click"
                            Tag="{Binding}"
                            Background="Transparent"
                            BorderThickness="0"
                            Margin="5">
                        <Border Background="#dadada" CornerRadius="5" Padding="10">
                            <Image Source="{Binding}" Width="100" Height="100"/>
                        </Border>
                    </Button>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!-- STATUS BAR -->
        <StatusBar DockPanel.Dock="Bottom" Background="LightGray" Height="25">
            <StatusBarItem Content="Ready" />
        </StatusBar>

    </DockPanel>
</Window>


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Views\ImportMappingWindow.xaml
--------------------------------------------------
<Window x:Class="ToolManagementAppV2.Views.ImportMappingWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Tool Inventory Management – Map CSV Columns"
        Height="350" Width="450"
        WindowStartupLocation="CenterScreen">
    <DockPanel Margin="10">
        <!-- HEADER -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <TextBlock Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                       FontWeight="Bold" FontSize="20" Margin="10"/>
        </Border>

        <!-- MAPPING GRID -->
        <DataGrid ItemsSource="{Binding Mappings}"
                  AutoGenerateColumns="False"
                  CanUserAddRows="False"
                  Margin="0,0,0,40">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Property"
                                    Binding="{Binding PropertyName}"
                                    IsReadOnly="True"/>
                <DataGridTemplateColumn Header="CSV Column">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding SelectedColumn}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                    <DataGridTemplateColumn.CellEditingTemplate>
                        <DataTemplate>
                            <ComboBox ItemsSource="{Binding DataContext.ColumnHeaders,
                                      RelativeSource={RelativeSource AncestorType=Window}}"
                                      SelectedItem="{Binding SelectedColumn,Mode=TwoWay}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellEditingTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- OK / Cancel -->
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" DockPanel.Dock="Bottom">
            <Button Content="OK"   Width="75" Margin="5" Click="Ok_Click"/>
            <Button Content="Cancel" Width="75" Margin="5" Click="Cancel_Click"/>
        </StackPanel>
    </DockPanel>
</Window>


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Views\LoginWindow.xaml
--------------------------------------------------
<Window x:Class="ToolManagementAppV2.LoginWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:ToolManagementAppV2.Utilities.Converters"
        Title="Tool Inventory Management – Login"
        Height="650" Width="1600"
        WindowStartupLocation="CenterScreen"
        Background="White">
    <Window.Resources>
        <local:NullToDefaultImageConverter x:Key="NullToDefaultImageConverter"/>
        <local:BooleanToAdminConverter    x:Key="BooleanToAdminConverter"/>
    </Window.Resources>

    <DockPanel>

        <!-- HEADER -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <DockPanel>
                <Image x:Name="LoginLogo" Width="50" Height="50" Margin="10"/>
                <TextBlock x:Name="HeaderTitle"
                           Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                           FontWeight="Bold"
                           FontSize="20"
                           VerticalAlignment="Center"
                           Margin="10,0,0,0"/>
            </DockPanel>
        </Border>

        <!-- CONTENT -->
        <Grid Margin="10">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <TextBlock Text="Select User to Login:"
                       FontSize="16"
                       FontWeight="SemiBold"
                       Margin="0,0,0,10"
                       HorizontalAlignment="Center"
                       Grid.Row="0"/>

            <ListBox x:Name="UsersListBox"
                     Grid.Row="1"
                     HorizontalAlignment="Center"
                     BorderThickness="0"
                     Background="Transparent"
                     HorizontalContentAlignment="Center"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     ScrollViewer.VerticalScrollBarVisibility="Auto"
                     MaxHeight="350">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListBoxItem">
                                    <ContentPresenter/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Width="120" Margin="5">
                            <Button Click="UserButton_Click"
                                    Tag="{Binding}"
                                    Background="Transparent"
                                    BorderThickness="0">
                                <StackPanel>
                                    <Image Source="{Binding PhotoBitmap,
                                                   Converter={StaticResource NullToDefaultImageConverter},
                                                   ConverterParameter=User}"
                                           Width="80" Height="80" Stretch="Uniform"/>
                                    <TextBlock Text="{Binding UserName}"
                                               TextAlignment="Center"
                                               Margin="0,5,0,0"
                                               FontWeight="SemiBold"/>
                                    <TextBlock Text="{Binding IsAdmin,
                                                   Converter={StaticResource BooleanToAdminConverter}}"
                                               FontSize="10"
                                               Foreground="Red"
                                               TextAlignment="Center"/>
                                </StackPanel>
                            </Button>
                        </StackPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </Grid>
    </DockPanel>
</Window>


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Views\PasswordPromptWindow.xaml
--------------------------------------------------
<Window x:Class="ToolManagementAppV2.PasswordPromptWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Enter Password"
        Height="250" Width="350"
        WindowStartupLocation="CenterScreen"
        Background="White"
        WindowStyle="ToolWindow"
        ResizeMode="NoResize">

    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Updated: Named so we can set it in code -->
        <TextBlock x:Name="PromptTextBlock"
                   Text="Enter your password:"
                   FontSize="14"
                   FontWeight="Bold"
                   Grid.Row="0"
                   Margin="0,0,0,10"/>

        <PasswordBox x:Name="PasswordBox"
                     Grid.Row="1"
                     Height="30"
                     FontSize="14"
                     FocusManager.FocusedElement="{Binding RelativeSource={RelativeSource Self}}"/>

        <TextBlock x:Name="ErrorTextBlock"
                   Grid.Row="2"
                   Foreground="Red"
                   FontSize="12"
                   Visibility="Collapsed"
                   Margin="0,5,0,5"/>

        <StackPanel Grid.Row="3"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right">
            <!-- Enter = OK_Click -->
            <Button Content="OK"
                    Width="75"
                    Margin="5"
                    IsDefault="True"
                    Click="OK_Click"/>
            <!-- Esc = Cancel_Click -->
            <Button Content="Cancel"
                    Width="75"
                    Margin="5"
                    IsCancel="True"
                    Click="Cancel_Click"/>
        </StackPanel>

        <TextBlock x:Name="ForgotPasswordTextBlock"
                   Text="Forgot your password?"
                   Foreground="Blue"
                   TextDecorations="Underline"
                   FontSize="12"
                   Visibility="Collapsed"
                   Cursor="Hand"
                   Grid.Row="4"
                   HorizontalAlignment="Center"
                   Margin="0,10,0,0"
                   MouseLeftButtonUp="ForgotPasswordTextBlock_MouseLeftButtonUp"/>
    </Grid>
</Window>


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Views\PrintPreviewWindow.xaml
--------------------------------------------------
<Window x:Class="ToolManagementAppV2.Views.PrintPreviewWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Print Preview"
        Height="800" Width="1000"
        WindowStartupLocation="CenterOwner"
        Background="White">
    <DockPanel Margin="10">

        <!-- HEADER -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Image x:Name="PreviewLogo"
                       Width="40" Height="40"
                       VerticalAlignment="Center"
                       Grid.Column="0"/>

                <TextBlock x:Name="PreviewTitle"
                           Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                           FontWeight="Bold"
                           FontSize="20"
                           VerticalAlignment="Center"
                           Margin="10,0"
                           Grid.Column="1"/>

                <StackPanel Orientation="Horizontal"
                            VerticalAlignment="Center"
                            Grid.Column="2">
                    <Button Content="Print"
                            Margin="0,0,5,0"
                            Padding="8,4"
                            MinWidth="80"
                            Background="#FF2D89EF"
                            Foreground="White"
                            FontWeight="SemiBold"
                            BorderBrush="#FF1E5FAF"
                            BorderThickness="1"
                            Cursor="Hand"
                            Click="Print_Click"/>
                    <Button Content="Close"
                            Padding="8,4"
                            MinWidth="80"
                            Background="#FFCD3C3C"
                            Foreground="White"
                            FontWeight="SemiBold"
                            BorderBrush="#FF912528"
                            BorderThickness="1"
                            Cursor="Hand"
                            Click="Close_Click"/>
                </StackPanel>
            </Grid>
        </Border>

        <!-- PREVIEW AREA -->
        <Border DockPanel.Dock="Top"
                Margin="0,4,0,0"
                BorderBrush="#DDD"
                BorderThickness="1"
                CornerRadius="4"
                Background="White">
            <FlowDocumentReader x:Name="DocViewer"
                                IsPrintEnabled="False"
                                IsFindEnabled="True"/>
        </Border>

        <!-- STATUS BAR -->
        <StatusBar DockPanel.Dock="Bottom"
                   Background="LightGray"
                   Height="25">
            <StatusBarItem Content="Ready to print" />
            <StatusBarItem HorizontalAlignment="Right"
                           Content="{Binding ElementName=DocViewer, Path=ViewingMode, StringFormat='Mode: {0}'}"/>
        </StatusBar>

    </DockPanel>
</Window>



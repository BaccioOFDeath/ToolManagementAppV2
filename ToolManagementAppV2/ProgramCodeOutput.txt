Program Code Dump
==============================
File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\App.xaml.cs
--------------------------------------------------
// App.xaml.cs – Use OnExplicitShutdown while showing the login window, then switch after login
using System.Windows;

namespace ToolManagementAppV2
{
    public partial class App : Application
    {
        protected override void OnStartup(StartupEventArgs e)
        {
            // Prevent shutdown when the login window closes
            ShutdownMode = ShutdownMode.OnExplicitShutdown;
            base.OnStartup(e);

            LoginWindow login = new LoginWindow();
            bool? loginResult = login.ShowDialog();

            if (loginResult == true)
            {
                // Switch shutdown mode now that we are creating the main window
                ShutdownMode = ShutdownMode.OnMainWindowClose;
                MainWindow mainWindow = new MainWindow();
                Current.MainWindow = mainWindow;
                mainWindow.Show();
            }
            else
            {
                Shutdown();
            }
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\AssemblyInfo.cs
--------------------------------------------------
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\LoginWindow.xaml.cs
--------------------------------------------------
using System.Windows;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Services;

namespace ToolManagementAppV2
{
    public partial class LoginWindow : Window
    {
        private readonly UserService _userService;
        public LoginWindow()
        {
            InitializeComponent();
            var dbPath = "tool_inventory.db";
            var databaseService = new DatabaseService(dbPath);
            _userService = new UserService(databaseService);
            LoadUsers();
        }

        private void LoadUsers()
        {
            var users = _userService.GetAllUsers();
            if (users.Count == 0)
            {
                MessageBox.Show("No users exist. A default admin account will be created (username: admin, password: admin).",
                                "Setup", MessageBoxButton.OK, MessageBoxImage.Information);
                var defaultUser = new User
                {
                    UserName = "admin",
                    Password = "admin",
                    IsAdmin = true
                };
                _userService.AddUser(defaultUser);
                users = _userService.GetAllUsers();
            }
            UsersListBox.ItemsSource = users;
        }

        // LoginWindow.xaml.cs – Updated UserButton_Click to treat an empty admin password as default "admin"
        // Updated UserButton_Click in LoginWindow.xaml.cs
        private void UserButton_Click(object sender, RoutedEventArgs e)
        {
            if (sender is FrameworkElement fe && fe.Tag is User selectedUser)
            {
                // For admin users, if password is empty or whitespace, set default to "admin"
                if (selectedUser.IsAdmin && string.IsNullOrWhiteSpace(selectedUser.Password))
                {
                    selectedUser.Password = "admin";
                    _userService.ChangeUserPassword(selectedUser.UserID, "admin");
                }

                // For non-admin users, if password is empty OR equals the default "newpassword", skip prompt
                if (!selectedUser.IsAdmin && (string.IsNullOrWhiteSpace(selectedUser.Password) ||
                     selectedUser.Password.Equals("newpassword", StringComparison.OrdinalIgnoreCase)))
                {
                    App.Current.Properties["CurrentUser"] = selectedUser;
                    this.DialogResult = true;
                    this.Close();
                    return;
                }

                // Otherwise, prompt for password
                PasswordPromptWindow prompt = new PasswordPromptWindow
                {
                    SelectedUser = selectedUser,
                    ValidatePassword = (pwd) => _userService.AuthenticateUser(selectedUser.UserName, pwd) != null
                };

                bool? result = prompt.ShowDialog();
                if (result == true)
                {
                    if (prompt.IsPasswordResetRequested)
                    {
                        var user = _userService.AuthenticateUser(selectedUser.UserName, "admin");
                        if (user != null)
                        {
                            App.Current.Properties["CurrentUser"] = user;
                            this.DialogResult = true;
                            this.Close();
                        }
                    }
                    else
                    {
                        var user = _userService.AuthenticateUser(selectedUser.UserName, prompt.EnteredPassword);
                        if (user != null)
                        {
                            App.Current.Properties["CurrentUser"] = user;
                            this.DialogResult = true;
                            this.Close();
                        }
                    }
                }
            }
        }

    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\MainWindow.xaml.cs
--------------------------------------------------
using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Services;
using ToolManagementAppV2.ViewModels;

namespace ToolManagementAppV2
{
    public partial class MainWindow : Window
    {
        private readonly ReportService _reportService;
        private readonly CustomerService _customerService;
        private readonly RentalService _rentalService;
        private readonly ToolService _toolService;
        private readonly UserService _userService;
        private readonly SettingsService _settingsService;
        private readonly DatabaseService _databaseService;
        private readonly ActivityLogService _activityLogService;

        public MainWindow()
        {
            InitializeComponent();

            var dbPath = "tool_inventory.db";
            _databaseService = new DatabaseService(dbPath);
            _toolService = new ToolService(_databaseService);
            _customerService = new CustomerService(_databaseService);
            _rentalService = new RentalService(_databaseService);
            _userService = new UserService(_databaseService);
            _settingsService = new SettingsService(_databaseService);
            _activityLogService = new ActivityLogService(_databaseService);
            _reportService = new ReportService(_toolService, _rentalService, _activityLogService, _customerService, _userService);

            try
            {
                RefreshToolList();
                RefreshUserList();
                RefreshCustomerList();
                RefreshRentalList();
                LoadSettings();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error initializing data: {ex.Message}", "Initialization Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            DataContext = new MainViewModel(_toolService, _userService, _settingsService);

            // Restrict tabs if current user is not admin
            var currentUser = App.Current.Properties["CurrentUser"] as User;
            if (currentUser != null && !currentUser.IsAdmin)
            {
                var tabsToRemove = new[] { "Tool Management", "Users", "Settings", "Import/Export" };
                var itemsToRemove = MyTabControl.Items.Cast<TabItem>()
                                      .Where(ti => tabsToRemove.Contains(ti.Header.ToString()))
                                      .ToList();
                foreach (var tab in itemsToRemove)
                    MyTabControl.Items.Remove(tab);
            }
        }

        #region Printing Methods
        private void PrintInventoryReport_Click(object sender, RoutedEventArgs e)
        {
            FlowDocument report = _reportService.GenerateInventoryReport();
            PrintReport(report, "Inventory Report");
        }

        private void PrintRentalReport_Click(object sender, RoutedEventArgs e)
        {
            FlowDocument report = _reportService.GenerateRentalReport(false);
            PrintReport(report, "Rental Report");
        }

        private void PrintActiveRentalsReport_Click(object sender, RoutedEventArgs e)
        {
            FlowDocument report = _reportService.GenerateRentalReport(true);
            PrintReport(report, "Active Rentals Report");
        }

        private void PrintActivityLogReport_Click(object sender, RoutedEventArgs e)
        {
            FlowDocument report = _reportService.GenerateActivityLogReport();
            PrintReport(report, "Activity Log Report");
        }

        private void PrintCustomerReport_Click(object sender, RoutedEventArgs e)
        {
            FlowDocument report = _reportService.GenerateCustomerReport();
            PrintReport(report, "Customer Report");
        }

        private void PrintUserReport_Click(object sender, RoutedEventArgs e)
        {
            FlowDocument report = _reportService.GenerateUserReport();
            PrintReport(report, "User Report");
        }

        private void PrintSummaryReport_Click(object sender, RoutedEventArgs e)
        {
            FlowDocument report = _reportService.GenerateSummaryReport();
            PrintReport(report, "Summary Report");
        }

        private void PrintFullRentalReport_Click(object sender, RoutedEventArgs e)
        {
            FlowDocument report = _reportService.GenerateRentalReport(false);
            PrintReport(report, "Full Rental History Report");
        }

        private void PrintReport(FlowDocument report, string title)
        {
            PrintDialog printDlg = new PrintDialog();
            if (printDlg.ShowDialog() == true)
            {
                IDocumentPaginatorSource idpSource = report;
                printDlg.PrintDocument(idpSource.DocumentPaginator, title);
            }
        }
        #endregion

        #region Tool Management Methods
        private void CheckOutButton_Click(object sender, RoutedEventArgs e)
        {
            if (sender is Button button && button.CommandParameter is string toolId)
            {
                var currentUser = App.Current.Properties["CurrentUser"] as User;
                if (currentUser == null)
                {
                    MessageBox.Show("No current user found. Please log in again.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                _toolService.ToggleToolCheckOutStatus(toolId, currentUser.UserName);
                _activityLogService.LogAction(currentUser.UserID, currentUser.UserName, $"Toggled checkout status for Tool ID: {toolId}");
                RefreshToolList();
            }
        }

        private void AddButton_Click(object sender, RoutedEventArgs e)
        {
            var newTool = new Tool
            {
                Name = ToolNameInput.Text,
                ToolID = ToolIDInput.Text,
                PartNumber = PartNumberInput.Text,
                Brand = BrandInput.Text,
                Location = LocationInput.Text,
                QuantityOnHand = int.Parse(QuantityInput.Text),
                Supplier = SupplierInput.Text,
                PurchasedDate = DateTime.TryParse(PurchasedInput.Text, out var date) ? date : (DateTime?)null,
                Notes = NotesInput.Text
            };

            _toolService.AddTool(newTool);
            RefreshToolList();
        }

        private void UpdateButton_Click(object sender, RoutedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool selectedTool)
            {
                selectedTool.PartNumber = PartNumberInput.Text;
                selectedTool.Brand = BrandInput.Text;
                selectedTool.Location = LocationInput.Text;
                selectedTool.QuantityOnHand = int.Parse(QuantityInput.Text);
                selectedTool.Supplier = SupplierInput.Text;
                selectedTool.PurchasedDate = !string.IsNullOrEmpty(PurchasedInput.Text) && DateTime.TryParse(PurchasedInput.Text, out var date) ? date : (DateTime?)null;
                selectedTool.Notes = NotesInput.Text;

                _toolService.UpdateTool(selectedTool);
                RefreshToolList();
            }
        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool selectedTool)
            {
                _toolService.DeleteTool(selectedTool.ToolID);
                RefreshToolList();
            }
        }

        private void ChangeToolImage_Click(object sender, RoutedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool selectedTool)
            {
                var openFileDialog = new Microsoft.Win32.OpenFileDialog
                {
                    Filter = "Image Files (*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg",
                    Title = "Select Tool Image"
                };
                if (openFileDialog.ShowDialog() == true)
                {
                    string selectedImagePath = openFileDialog.FileName;
                    string imagesFolder = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Images");
                    if (!System.IO.Directory.Exists(imagesFolder))
                        System.IO.Directory.CreateDirectory(imagesFolder);
                    string fileName = System.IO.Path.GetFileName(selectedImagePath);
                    string destinationPath = System.IO.Path.Combine(imagesFolder, fileName);
                    System.IO.File.Copy(selectedImagePath, destinationPath, true);
                    _toolService.UpdateToolImage(selectedTool.ToolID, destinationPath);
                    MessageBox.Show("Tool image updated successfully.", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
                    RefreshToolList();
                }
            }
            else
            {
                MessageBox.Show("Please select a tool first.", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void ToolsList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool selectedTool)
            {
                ToolIDInput.Text = selectedTool.ToolID;
                PartNumberInput.Text = selectedTool.PartNumber;
                BrandInput.Text = selectedTool.Brand;
                LocationInput.Text = selectedTool.Location;
                QuantityInput.Text = selectedTool.QuantityOnHand.ToString();
                SupplierInput.Text = selectedTool.Supplier;
                PurchasedInput.Text = selectedTool.PurchasedDate?.ToString("yyyy-MM-dd");
                NotesInput.Text = selectedTool.Notes;
            }
        }
        #endregion

        #region Customer & Rental Management Methods
        private void AddCustomerButton_Click(object sender, RoutedEventArgs e)
        {
            var customer = new Customer
            {
                Name = CustomerNameInput.Text,
                Email = CustomerEmailInput.Text,
                Contact = CustomerContactInput.Text,
                Phone = CustomerPhoneInput.Text,
                Address = CustomerAddressInput.Text
            };

            _customerService.AddCustomer(customer);
            RefreshCustomerList();
        }

        private void UpdateCustomerButton_Click(object sender, RoutedEventArgs e)
        {
            if (CustomerList.SelectedItem is Customer customer)
            {
                customer.Name = CustomerNameInput.Text;
                customer.Email = CustomerEmailInput.Text;
                customer.Contact = CustomerContactInput.Text;
                customer.Phone = CustomerPhoneInput.Text;
                customer.Address = CustomerAddressInput.Text;

                _customerService.UpdateCustomer(customer);
                RefreshCustomerList();
            }
        }

        private void DeleteCustomerButton_Click(object sender, RoutedEventArgs e)
        {
            if (CustomerList.SelectedItem is Customer customer)
            {
                _customerService.DeleteCustomer(customer.CustomerID);
                RefreshCustomerList();
            }
        }

        private void CustomerList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (CustomerList.SelectedItem is Customer customer)
            {
                CustomerNameInput.Text = customer.Name;
                CustomerEmailInput.Text = customer.Email;
                CustomerContactInput.Text = customer.Contact;
                CustomerPhoneInput.Text = customer.Phone;
                CustomerAddressInput.Text = customer.Address;
            }
        }

        private void RentToolButton_Click(object sender, RoutedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool selectedTool && CustomerList.SelectedItem is Customer selectedCustomer)
            {
                try
                {
                    DateTime now = DateTime.Now;
                    DateTime due = now.AddDays(7);
                    _rentalService.RentTool(selectedTool.ToolID, selectedCustomer.CustomerID, now, due);
                    var currentUser = _userService.GetCurrentUser();
                    _activityLogService.LogAction(currentUser.UserID, currentUser.UserName, $"Rented tool {selectedTool.ToolID} to customer {selectedCustomer.CustomerID}");
                    RefreshRentalList();
                    RefreshToolList();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error renting tool: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void ReturnToolButton_Click(object sender, RoutedEventArgs e)
        {
            if (RentalsList.SelectedItem is Rental rental)
            {
                try
                {
                    DateTime returnTime = DateTime.Now;
                    _rentalService.ReturnTool(rental.RentalID, returnTime);
                    var currentUser = _userService.GetCurrentUser();
                    _activityLogService.LogAction(currentUser.UserID, currentUser.UserName, $"Returned tool for rental {rental.RentalID}");
                    RefreshRentalList();
                    RefreshToolList();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error returning tool: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        #endregion

        #region User Management Event Handlers

        private void NewUserButton_Click(object sender, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm)
            {
                var newUser = new User
                {
                    UserName = "New User",
                    Password = "newpassword",
                    IsAdmin = false,
                    Email = string.Empty,
                    Phone = string.Empty,
                    Address = string.Empty,
                    Role = string.Empty
                };
                _userService.AddUser(newUser);
                vm.LoadUsers();            // reload the Users collection in the view model
                RefreshUserList();         // force the ListView to refresh its ItemsSource
                vm.SelectedUser = vm.Users.FirstOrDefault(u => u.UserID == newUser.UserID) ?? vm.Users.First();
            }
        }

        private void SaveUserButton_Click(object sender, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm && vm.SelectedUser != null)
            {
                if (vm.SelectedUser.UserID > 0)
                    _userService.UpdateUser(vm.SelectedUser);
                else
                    _userService.AddUser(vm.SelectedUser);
                int savedId = vm.SelectedUser.UserID;
                vm.LoadUsers();
                vm.SelectedUser = vm.Users.FirstOrDefault(u => u.UserID == savedId) ?? vm.Users.First();

                // If the updated user is the currently logged-in user, update the header properties.
                var currentUser = App.Current.Properties["CurrentUser"] as User;
                if (currentUser != null && currentUser.UserID == vm.SelectedUser.UserID)
                {
                    currentUser.UserName = vm.SelectedUser.UserName;
                    vm.CurrentUserName = vm.SelectedUser.UserName;
                    // Optionally update CurrentUserPhoto if changed:
                    vm.CurrentUserPhoto = vm.SelectedUser.PhotoBitmap;
                    App.Current.Properties["CurrentUser"] = vm.SelectedUser;
                }

                MessageBox.Show("User saved successfully.", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void DeleteUserButton_Click(object sender, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm && vm.SelectedUser != null)
            {
                var currentUser = App.Current.Properties["CurrentUser"] as User;
                if (currentUser != null && currentUser.UserID == vm.SelectedUser.UserID)
                {
                    MessageBox.Show("You cannot delete your own account.", "Deletion Not Allowed", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }
                _userService.DeleteUser(vm.SelectedUser.UserID);
                vm.LoadUsers();
                RefreshUserList();
                vm.SelectedUser = vm.Users.FirstOrDefault();
            }
        }

        private void UploadUserPhotoButton_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Image Files (*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg"
            };
            if (openFileDialog.ShowDialog() == true)
            {
                if (DataContext is MainViewModel vm && vm.SelectedUser != null)
                {
                    try
                    {
                        int selId = vm.SelectedUser.UserID;
                        string selectedPhotoPath = openFileDialog.FileName;
                        string userPhotosFolder = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "UserPhotos");
                        if (!System.IO.Directory.Exists(userPhotosFolder))
                            System.IO.Directory.CreateDirectory(userPhotosFolder);
                        string newFileName = $"{Guid.NewGuid()}{System.IO.Path.GetExtension(selectedPhotoPath)}";
                        string destinationPath = System.IO.Path.Combine(userPhotosFolder, newFileName);
                        System.IO.File.Copy(selectedPhotoPath, destinationPath, true);

                        vm.SelectedUser.UserPhotoPath = destinationPath;
                        vm.SelectedUser.PhotoBitmap = new BitmapImage(new Uri(destinationPath, UriKind.Absolute));
                        _userService.UpdateUser(vm.SelectedUser);

                        // If current user is being updated, update the global property as well.
                        var currentUser = App.Current.Properties["CurrentUser"] as User;
                        if (currentUser != null && currentUser.UserID == vm.SelectedUser.UserID)
                        {
                            App.Current.Properties["CurrentUser"] = vm.SelectedUser;
                            vm.LoadCurrentUser();
                        }
                        vm.LoadUsers();
                        vm.SelectedUser = vm.Users.FirstOrDefault(u => u.UserID == selId);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error updating photo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
        }

        private void PasswordBox_PasswordChanged(object sender, RoutedEventArgs e)
        {
            if (DataContext is MainViewModel vm && vm.SelectedUser != null)
            {
                string pwd = ((PasswordBox)sender).Password;
                vm.UserPassword = pwd;
                vm.SelectedUser.Password = pwd;
            }
        }

        private void RefreshUserList()
        {
            try
            {
                // Get updated users from the DB
                var users = _userService.GetAllUsers();
                // Refresh photo bitmaps if necessary
                foreach (var user in users)
                {
                    if (!string.IsNullOrEmpty(user.UserPhotoPath) && System.IO.File.Exists(user.UserPhotoPath))
                    {
                        user.PhotoBitmap = new BitmapImage(new Uri(user.UserPhotoPath, UriKind.Absolute))
                        {
                            CacheOption = BitmapCacheOption.OnLoad
                        };
                    }
                }
                // Assign the refreshed list to the ListView's ItemsSource.
                UserList.ItemsSource = users;
                UserList.Items.Refresh();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading users: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LogoutButton_Click(object sender, RoutedEventArgs e)
        {
            var currentUser = _userService.GetCurrentUser();
            if (currentUser == null)
            {
                MessageBox.Show("No user is currently logged in.", "Logout", MessageBoxButton.OK, MessageBoxImage.Warning);
                // Optionally, open the login screen or shutdown the app
                LoginWindow login = new LoginWindow();
                bool? loginResult = login.ShowDialog();
                if (loginResult == true)
                {
                    Application.Current.ShutdownMode = ShutdownMode.OnMainWindowClose;
                    MainWindow newMainWindow = new MainWindow();
                    Application.Current.MainWindow = newMainWindow;
                    newMainWindow.Show();
                }
                else
                {
                    Application.Current.Shutdown();
                }
                this.Close();
                return;
            }
            {
                _activityLogService.LogAction(currentUser.UserID, currentUser.UserName, "User logged out");

                // Prevent shutdown when closing the current window
                Application.Current.ShutdownMode = ShutdownMode.OnExplicitShutdown;
                // Hide the main window so it doesn't appear behind the login screen
                this.Hide();

                LoginWindow loginWindow = new LoginWindow();
                bool? loginResult = loginWindow.ShowDialog();

                if (loginResult == true)
                {
                    // Switch shutdown mode back and open a new MainWindow
                    Application.Current.ShutdownMode = ShutdownMode.OnMainWindowClose;
                    MainWindow newMainWindow = new MainWindow();
                    Application.Current.MainWindow = newMainWindow;
                    newMainWindow.Show();
                }
                else
                {
                    Application.Current.Shutdown();
                }
                this.Close();
            }
        }
        #endregion

        #region Settings, Import/Export, and Logs
        private void SaveSettingsButton_Click(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(RentalDurationInput.Text, out var rentalDuration))
            {
                _settingsService.SaveSetting("DefaultRentalDuration", rentalDuration.ToString());
                MessageBox.Show("Settings saved successfully!", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
            {
                MessageBox.Show("Invalid rental duration.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void UploadLogoButton_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Image Files (*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg",
                Title = "Select Company Logo"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                var selectedLogoPath = openFileDialog.FileName;
                LogoPreview.Source = new BitmapImage(new Uri(selectedLogoPath));
                _settingsService.SaveSetting("CompanyLogoPath", selectedLogoPath);
                UpdateHeaderLogo();
            }
        }

        private void SelectCsvFileButton_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "CSV Files|*.csv"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                SelectedCsvFile.Text = openFileDialog.FileName;
            }
        }

        private void ImportCsvButton_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(SelectedCsvFile.Text))
            {
                _toolService.ImportToolsFromCsv(SelectedCsvFile.Text);
                RefreshToolList();
                MessageBox.Show("Tools imported successfully!");
            }
        }

        private void ExportCsvButton_Click(object sender, RoutedEventArgs e)
        {
            _toolService.ExportToolsToCsv("tools_export.csv");
            MessageBox.Show("Tools exported successfully!");
        }

        private void RefreshToolList()
        {
            try
            {
                ToolsList.ItemsSource = _toolService.GetAllTools();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading tools: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RefreshCustomerList()
        {
            try
            {
                CustomerList.ItemsSource = _customerService.GetAllCustomers();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading customers: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RefreshRentalList()
        {
            try
            {
                RentalsList.ItemsSource = _rentalService.GetActiveRentals();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading rentals: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void SearchInput_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(SearchInput.Text))
                    SearchResultsList.ItemsSource = _toolService.SearchTools(SearchInput.Text);
                else
                    SearchResultsList.ItemsSource = null;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error performing search: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void UpdateHeaderLogo()
        {
            try
            {
                var logoPath = _settingsService.GetSetting("CompanyLogoPath");
                HeaderIcon.Source = !string.IsNullOrEmpty(logoPath) && System.IO.File.Exists(logoPath)
                    ? new BitmapImage(new Uri(logoPath))
                    : new BitmapImage(new Uri("pack://application:,,,/Resources/DefaultLogo.png"));
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load header logo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoadSettings()
        {
            try
            {
                var companyLogoPath = _settingsService.GetSetting("CompanyLogoPath");
                if (!string.IsNullOrEmpty(companyLogoPath))
                {
                    LogoPreview.Source = new BitmapImage(new Uri(companyLogoPath));
                    HeaderIcon.Source = LogoPreview.Source;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load settings: {ex.Message}", "Settings Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void LoadOverdueRentals_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var overdueRentals = _rentalService.GetOverdueRentals();
                var message = string.Join(Environment.NewLine, overdueRentals.Select(r =>
                    $"RentalID: {r.RentalID}, ToolID: {r.ToolID}, Due: {r.DueDate:yyyy-MM-dd}"));
                MessageBox.Show(message, "Overdue Rentals");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading overdue rentals: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ExtendRentalButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                int rentalID = int.Parse(RentalIDInput.Text);
                DateTime newDueDate = DateTime.Parse(NewDueDateInput.Text);
                _rentalService.ExtendRental(rentalID, newDueDate);
                MessageBox.Show("Rental extended successfully.", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
                RefreshRentalList();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error extending rental: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void PrintRentalReceipt_Click(object sender, RoutedEventArgs e)
        {
            if (RentalsList.SelectedItem is Rental selectedRental)
            {
                FlowDocument receiptDoc = new FlowDocument
                {
                    FontFamily = new FontFamily("Segoe UI"),
                    FontSize = 12
                };

                Paragraph header = new Paragraph(new Run("Rental Receipt"))
                {
                    FontSize = 16,
                    FontWeight = FontWeights.Bold,
                    TextAlignment = TextAlignment.Center
                };
                receiptDoc.Blocks.Add(header);

                Paragraph details = new Paragraph();
                details.Inlines.Add(new Run($"Rental ID: {selectedRental.RentalID}\n"));
                details.Inlines.Add(new Run($"Tool ID: {selectedRental.ToolID}\n"));
                details.Inlines.Add(new Run($"Customer ID: {selectedRental.CustomerID}\n"));
                details.Inlines.Add(new Run($"Rental Date: {selectedRental.RentalDate:yyyy-MM-dd}\n"));
                details.Inlines.Add(new Run($"Due Date: {selectedRental.DueDate:yyyy-MM-dd}\n"));
                if (selectedRental.ReturnDate.HasValue)
                    details.Inlines.Add(new Run($"Return Date: {selectedRental.ReturnDate.Value:yyyy-MM-dd}\n"));
                receiptDoc.Blocks.Add(details);

                PrintDialog printDlg = new PrintDialog();
                if (printDlg.ShowDialog() == true)
                {
                    IDocumentPaginatorSource idpSource = receiptDoc;
                    printDlg.PrintDocument(idpSource.DocumentPaginator, "Rental Receipt");
                }
            }
            else
            {
                MessageBox.Show("No rental selected.", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void BackupDatabaseButton_Click(object sender, RoutedEventArgs e)
        {
            var saveFileDialog = new Microsoft.Win32.SaveFileDialog
            {
                Filter = "SQLite Database (*.db)|*.db",
                Title = "Select Backup Location",
                FileName = "tool_inventory_backup.db"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                try
                {
                    _databaseService.BackupDatabase(saveFileDialog.FileName);
                    MessageBox.Show("Database backup completed successfully.", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error backing up database: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void PrintMyCheckedOutTools_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var currentUser = _userService.GetCurrentUser();
                if (currentUser == null)
                {
                    MessageBox.Show("No user logged in.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                var myTools = _toolService.GetToolsCheckedOutBy(currentUser.UserName);
                if (myTools.Count == 0)
                {
                    MessageBox.Show("You have no checked out tools.", "Info", MessageBoxButton.OK, MessageBoxImage.Information);
                    return;
                }
                string message = string.Join(Environment.NewLine, myTools.Select(t => $"Tool ID: {t.ToolID}, Name: {t.Name}"));
                MessageBox.Show(message, "My Checked Out Tools");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error retrieving checked out tools: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RefreshLogsButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                var logs = _activityLogService.GetRecentLogs(100);
                ActivityLogsList.ItemsSource = logs;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error retrieving logs: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void PurgeLogsButton_Click(object sender, RoutedEventArgs e)
        {
            if (MessageBox.Show("Are you sure you want to purge logs older than 30 days?", "Confirm", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
            {
                try
                {
                    DateTime threshold = DateTime.Now.AddDays(-30);
                    _activityLogService.PurgeOldLogs(threshold);
                    MessageBox.Show("Old logs purged successfully.", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
                    RefreshLogsButton_Click(sender, e);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error purging logs: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        // If needed, the ChangePasswordButton_Click is retained for legacy use.
        private void ChangePasswordButton_Click(object sender, RoutedEventArgs e)
        {
            var vm = DataContext as MainViewModel;
            if (vm?.SelectedUser == null)
            {
                MessageBox.Show("Please select a user to change the password.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            if (string.IsNullOrEmpty(vm.NewPassword) || vm.NewPassword != vm.ConfirmPassword)
            {
                MessageBox.Show("Passwords do not match or are empty.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            try
            {
                _userService.ChangeUserPassword(vm.SelectedUser.UserID, vm.NewPassword);
                MessageBox.Show("Password changed successfully.", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
                vm.NewPassword = string.Empty;
                vm.ConfirmPassword = string.Empty;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error changing password: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        #endregion

        #region Missing Event Handlers
        private void ChooseUserProfilePicButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Change profile picture functionality not implemented.", "Info", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        
        private void PrintSearchResults_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Print search results functionality not implemented.", "Info", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        #endregion
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\PasswordPromptWindow.xaml.cs
--------------------------------------------------
// PasswordPromptWindow.xaml.cs – Updated to allow multiple attempts without closing the window
using System.Windows;
using System.Windows.Input;

namespace ToolManagementAppV2
{
    public partial class PasswordPromptWindow : Window
    {
        public string EnteredPassword { get; private set; }
        public bool IsPasswordResetRequested { get; private set; } = false;
        private int _attemptCount = 0;
        private const int MaxAttempts = 2;  // After 2 failed attempts, show the reset option.
        // Delegate to validate the entered password.
        public Func<string, bool> ValidatePassword { get; set; }
        public Models.User SelectedUser { get; set; }

        public PasswordPromptWindow()
        {
            InitializeComponent();
        }

        private void OK_Click(object sender, RoutedEventArgs e)
        {
            string pwd = PasswordBox.Password;
            if (ValidatePassword != null && ValidatePassword(pwd))
            {
                EnteredPassword = pwd;
                this.DialogResult = true;
                this.Close();
            }
            else
            {
                ShowError("Incorrect password. Please try again.");
                // The window remains open for another attempt.
            }
        }

        private void Cancel_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = false;
            this.Close();
        }

        public void ShowError(string message)
        {
            _attemptCount++;
            ErrorTextBlock.Text = message;
            ErrorTextBlock.Visibility = Visibility.Visible;
            // Show the "Forgot your password?" link after MaxAttempts.
            ForgotPasswordTextBlock.Visibility = _attemptCount >= MaxAttempts ? Visibility.Visible : Visibility.Collapsed;
            PasswordBox.Clear();
        }

        private void ForgotPasswordTextBlock_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (SelectedUser != null && SelectedUser.IsAdmin)
            {
                if (MessageBox.Show("You have entered the wrong password multiple times. Would you like to reset your password to the default value? You can change it after login.",
                    "Reset Password", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                {
                    // Mark that a reset was requested.
                    IsPasswordResetRequested = true;
                    // Reset the attempt counter and clear any error messages.
                    _attemptCount = 0;
                    ErrorTextBlock.Visibility = Visibility.Collapsed;
                    ForgotPasswordTextBlock.Visibility = Visibility.Collapsed;
                    PasswordBox.Clear();
                }
            }
            else
            {
                MessageBox.Show("Password recovery is only available for admin users.", "Not Allowed", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\ActivityLog.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ToolManagementAppV2.Models
{
    public class ActivityLog
    {
        public int LogID { get; set; }
        public int UserID { get; set; }
        public string UserName { get; set; }
        public string Action { get; set; }
        public DateTime Timestamp { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\Customer.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ToolManagementAppV2.Models
{
    public class Customer
    {
        public int CustomerID { get; set; }
        public string Name { get; set; }
        public string Contact { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public string Address { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\Rental.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ToolManagementAppV2.Models
{
    public class Rental
    {
        public int RentalID { get; set; }
        public int ToolID { get; set; }
        public int CustomerID { get; set; }
        public DateTime RentalDate { get; set; }
        public DateTime DueDate { get; set; }
        public DateTime? ReturnDate { get; set; } // Nullable to indicate if returned or not
        public string? Status { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\Tool.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ToolManagementAppV2.Models
{
    public class Tool
    {
        public string ToolID { get; set; }
        public string Name { get; set; }
        public string PartNumber { get; set; }
        public string Description { get; set; }
        public string Brand { get; set; }
        public string Location { get; set; }
        public int QuantityOnHand { get; set; }
        public string Supplier { get; set; }
        public DateTime? PurchasedDate { get; set; }
        public string Notes { get; set; }
        public bool IsCheckedOut { get; set; }
        public string CheckedOutBy { get; set; }
        public DateTime? CheckedOutTime { get; set; }
        public string ToolImagePath { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\User.cs
--------------------------------------------------
// Updated User.cs model with additional properties
using CommunityToolkit.Mvvm.ComponentModel;
using System.Windows.Media.Imaging;

namespace ToolManagementAppV2.Models
{
    public class User : ObservableObject
    {
        private int _userID;
        public int UserID { get => _userID; set => SetProperty(ref _userID, value); }

        private string _userName;
        public string UserName { get => _userName; set => SetProperty(ref _userName, value); }

        private string _password;
        public string Password { get => _password; set => SetProperty(ref _password, value); }

        private string _userPhotoPath;
        public string UserPhotoPath { get => _userPhotoPath; set => SetProperty(ref _userPhotoPath, value); }

        private bool _isAdmin;
        public bool IsAdmin { get => _isAdmin; set => SetProperty(ref _isAdmin, value); }

        private BitmapImage _photoBitmap;
        public BitmapImage PhotoBitmap { get => _photoBitmap; set => SetProperty(ref _photoBitmap, value); }

        // New expanded properties
        private string _email;
        public string Email { get => _email; set => SetProperty(ref _email, value); }

        private string _phone;
        public string Phone { get => _phone; set => SetProperty(ref _phone, value); }

        private string _address;
        public string Address { get => _address; set => SetProperty(ref _address, value); }

        private string _role;
        public string Role { get => _role; set => SetProperty(ref _role, value); }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\ActivityLogService.cs
--------------------------------------------------
using System;
using System.Data.SQLite;
using ToolManagementAppV2.Models;

namespace ToolManagementAppV2.Services
{
    public class ActivityLogService
    {
        private readonly DatabaseService _dbService;
        public ActivityLogService(DatabaseService dbService) => _dbService = dbService;

        public void LogAction(int userID, string userName, string action)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "INSERT INTO ActivityLogs (UserID, UserName, Action) VALUES (@UserID, @UserName, @Action)";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@UserID", userID);
            command.Parameters.AddWithValue("@UserName", userName);
            command.Parameters.AddWithValue("@Action", action);
            command.ExecuteNonQuery();
        }

        public List<ActivityLog> GetRecentLogs(int count = 50)
        {
            var logs = new List<ActivityLog>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM ActivityLogs ORDER BY Timestamp DESC LIMIT @Count";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Count", count);
            using var reader = command.ExecuteReader();
            while (reader.Read())
            {
                logs.Add(new ActivityLog
                {
                    LogID = Convert.ToInt32(reader["LogID"]),
                    UserID = Convert.ToInt32(reader["UserID"]),
                    UserName = reader["UserName"].ToString(),
                    Action = reader["Action"].ToString(),
                    Timestamp = Convert.ToDateTime(reader["Timestamp"])
                });
            }
            return logs;
        }

        public void PurgeOldLogs(DateTime threshold)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "DELETE FROM ActivityLogs WHERE Timestamp < @Threshold";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Threshold", threshold);
            command.ExecuteNonQuery();
        }


    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\CustomerService.cs
--------------------------------------------------
using System.Collections.Generic;
using System.Data.SQLite;
using ToolManagementAppV2.Models;

namespace ToolManagementAppV2.Services
{
    public class CustomerService
    {
        private readonly DatabaseService _dbService;

        public CustomerService(DatabaseService dbService)
        {
            _dbService = dbService;
        }

        public List<Customer> GetAllCustomers()
        {
            var customers = new List<Customer>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT * FROM Customers";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                customers.Add(new Customer
                {
                    CustomerID = Convert.ToInt32(reader["CustomerID"]),
                    Name = reader["Name"].ToString(),
                    Email = reader["Email"].ToString(),
                    Contact = reader["Contact"].ToString(),
                    Phone = reader["Phone"].ToString(),
                    Address = reader["Address"].ToString()
                });
            }

            return customers;
        }


        public void AddCustomer(Customer customer)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
        INSERT INTO Customers (Name, Email, Contact, Phone, Address)
        VALUES (@Name, @Email, @Contact, @Phone, @Address)";

            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Name", customer.Name);
            command.Parameters.AddWithValue("@Email", customer.Email);
            command.Parameters.AddWithValue("@Contact", customer.Contact);
            command.Parameters.AddWithValue("@Phone", customer.Phone);
            command.Parameters.AddWithValue("@Address", customer.Address);
            command.ExecuteNonQuery();
        }


        public void UpdateCustomer(Customer customer)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
        UPDATE Customers
        SET Name = @Name, Email = @Email, Contact = @Contact, Phone = @Phone, Address = @Address
        WHERE CustomerID = @CustomerID";

            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Name", customer.Name);
            command.Parameters.AddWithValue("@Email", customer.Email);
            command.Parameters.AddWithValue("@Contact", customer.Contact);
            command.Parameters.AddWithValue("@Phone", customer.Phone);
            command.Parameters.AddWithValue("@Address", customer.Address);
            command.Parameters.AddWithValue("@CustomerID", customer.CustomerID);
            command.ExecuteNonQuery();
        }


        public void DeleteCustomer(int customerID)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "DELETE FROM Customers WHERE CustomerID = @CustomerID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@CustomerID", customerID);
            command.ExecuteNonQuery();
        }

        public List<Customer> SearchCustomers(string searchTerm)
        {
            var customers = new List<Customer>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM Customers WHERE Name LIKE @SearchTerm OR Email LIKE @SearchTerm OR Phone LIKE @SearchTerm OR Address LIKE @SearchTerm";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@SearchTerm", "%" + searchTerm + "%");
            using var reader = command.ExecuteReader();
            while (reader.Read())
            {
                customers.Add(new Customer
                {
                    CustomerID = Convert.ToInt32(reader["CustomerID"]),
                    Name = reader["Name"].ToString(),
                    Email = reader["Email"].ToString(),
                    Contact = reader["Contact"].ToString(),
                    Phone = reader["Phone"].ToString(),
                    Address = reader["Address"].ToString()
                });
            }
            return customers;
        }

        public Customer GetCustomerByID(int customerID)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM Customers WHERE CustomerID = @CustomerID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@CustomerID", customerID);
            using var reader = command.ExecuteReader();
            if (reader.Read())
            {
                return new Customer
                {
                    CustomerID = Convert.ToInt32(reader["CustomerID"]),
                    Name = reader["Name"].ToString(),
                    Email = reader["Email"].ToString(),
                    Contact = reader["Contact"].ToString(),
                    Phone = reader["Phone"].ToString(),
                    Address = reader["Address"].ToString()
                };
            }
            return null;
        }


    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\DatabaseService.cs
--------------------------------------------------
using System.Data.SQLite;
using System.IO;
using System.Linq;

namespace ToolManagementAppV2.Services
{
    public class DatabaseService
    {
        public string ConnectionString { get; }

        public DatabaseService(string dbPath)
        {
            ConnectionString = $"Data Source={dbPath};Version=3;";
            InitializeDatabase();
            UpdateDatabaseSchema();
            UpdateUserSchema();
        }

        private void InitializeDatabase()
        {
            using var connection = new SQLiteConnection(ConnectionString);
            connection.Open();

            var createTables = @"
                -- Tools Table
                CREATE TABLE IF NOT EXISTS Tools (
                    ToolID INTEGER PRIMARY KEY AUTOINCREMENT,
                    Name TEXT NOT NULL,
                    Description TEXT,
                    Location TEXT,
                    Brand TEXT,
                    PartNumber TEXT,
                    Supplier TEXT,
                    PurchasedDate DATETIME,
                    Notes TEXT,
                    AvailableQuantity INTEGER NOT NULL DEFAULT 0,
                    RentedQuantity INTEGER NOT NULL DEFAULT 0,
                    IsCheckedOut INTEGER NOT NULL DEFAULT 0,
                    CheckedOutBy TEXT,
                    CheckedOutTime DATETIME
                );

                -- Users Table
                CREATE TABLE IF NOT EXISTS Users (
                    UserID INTEGER PRIMARY KEY AUTOINCREMENT,
                    UserName TEXT NOT NULL,
                    UserPhotoPath TEXT,
                    IsAdmin INTEGER NOT NULL DEFAULT 0
                );

                -- Customers Table
                CREATE TABLE IF NOT EXISTS Customers (
                    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,
                    Name TEXT NOT NULL,
                    Email TEXT,
                    Contact TEXT,
                    Phone TEXT,
                    Address TEXT
                );

                -- Rentals Table
                CREATE TABLE IF NOT EXISTS Rentals (
                    RentalID INTEGER PRIMARY KEY AUTOINCREMENT,
                    ToolID INTEGER NOT NULL,
                    CustomerID INTEGER NOT NULL,
                    RentalDate DATETIME NOT NULL,
                    DueDate DATETIME NOT NULL,
                    ReturnDate DATETIME,
                    Status TEXT NOT NULL DEFAULT 'Rented',
                    FOREIGN KEY (ToolID) REFERENCES Tools (ToolID),
                    FOREIGN KEY (CustomerID) REFERENCES Customers (CustomerID)
                );

                -- Activity Logs Table
                CREATE TABLE IF NOT EXISTS ActivityLogs (
                    LogID INTEGER PRIMARY KEY AUTOINCREMENT,
                    UserID INTEGER,
                    UserName TEXT,
                    Action TEXT,
                    Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (UserID) REFERENCES Users (UserID)
                );

                -- Settings Table for configuration options
                CREATE TABLE IF NOT EXISTS Settings (
                    Key TEXT PRIMARY KEY,
                    Value TEXT
                );
            ";

            using var command = new SQLiteCommand(createTables, connection);
            command.ExecuteNonQuery();
        }

        private void UpdateDatabaseSchema()
        {
            using var connection = new SQLiteConnection(ConnectionString);
            connection.Open();

            bool columnExists = false;
            using (var command = new SQLiteCommand("PRAGMA table_info(Tools)", connection))
            using (var reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    if (reader["name"].ToString().Equals("ToolImagePath", StringComparison.OrdinalIgnoreCase))
                    {
                        columnExists = true;
                        break;
                    }
                }
            }

            if (!columnExists)
            {
                using var command = new SQLiteCommand("ALTER TABLE Tools ADD COLUMN ToolImagePath TEXT", connection);
                command.ExecuteNonQuery();
            }
        }

        // Update the UpdateUserSchema method in DatabaseService.cs to include the new columns
        private void UpdateUserSchema()
        {
            using var connection = new SQLiteConnection(ConnectionString);
            connection.Open();

            bool passwordColumnExists = false;
            bool emailColumnExists = false;
            bool phoneColumnExists = false;
            bool addressColumnExists = false;
            bool roleColumnExists = false;

            using (var command = new SQLiteCommand("PRAGMA table_info(Users)", connection))
            using (var reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    string columnName = reader["name"].ToString();
                    if (columnName.Equals("Password", StringComparison.OrdinalIgnoreCase))
                        passwordColumnExists = true;
                    else if (columnName.Equals("Email", StringComparison.OrdinalIgnoreCase))
                        emailColumnExists = true;
                    else if (columnName.Equals("Phone", StringComparison.OrdinalIgnoreCase))
                        phoneColumnExists = true;
                    else if (columnName.Equals("Address", StringComparison.OrdinalIgnoreCase))
                        addressColumnExists = true;
                    else if (columnName.Equals("Role", StringComparison.OrdinalIgnoreCase))
                        roleColumnExists = true;
                }
            }
            if (!passwordColumnExists)
            {
                using var command = new SQLiteCommand("ALTER TABLE Users ADD COLUMN Password TEXT", connection);
                command.ExecuteNonQuery();
            }
            if (!emailColumnExists)
            {
                using var command = new SQLiteCommand("ALTER TABLE Users ADD COLUMN Email TEXT", connection);
                command.ExecuteNonQuery();
            }
            if (!phoneColumnExists)
            {
                using var command = new SQLiteCommand("ALTER TABLE Users ADD COLUMN Phone TEXT", connection);
                command.ExecuteNonQuery();
            }
            if (!addressColumnExists)
            {
                using var command = new SQLiteCommand("ALTER TABLE Users ADD COLUMN Address TEXT", connection);
                command.ExecuteNonQuery();
            }
            if (!roleColumnExists)
            {
                using var command = new SQLiteCommand("ALTER TABLE Users ADD COLUMN Role TEXT", connection);
                command.ExecuteNonQuery();
            }
        }


        public void BackupDatabase(string backupFilePath)
        {
            var dataSourcePart = ConnectionString.Split(';').FirstOrDefault(s => s.StartsWith("Data Source="));
            if (dataSourcePart != null)
            {
                string dbFilePath = dataSourcePart.Replace("Data Source=", "").Trim();
                File.Copy(dbFilePath, backupFilePath, true);
            }
            else
            {
                throw new InvalidOperationException("Database file path could not be determined.");
            }
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\RentalService.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.SQLite;
using ToolManagementAppV2.Models;

namespace ToolManagementAppV2.Services
{
    public class RentalService
    {
        private readonly DatabaseService _dbService;

        public RentalService(DatabaseService dbService)
        {
            _dbService = dbService;
        }

        public void RentTool(string toolID, int customerID, DateTime rentalDate, DateTime dueDate)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var rentalQuery = @"
        INSERT INTO Rentals (ToolID, CustomerID, RentalDate, DueDate)
        VALUES (@ToolID, @CustomerID, @RentalDate, @DueDate);
        
        UPDATE Tools
        SET AvailableQuantity = AvailableQuantity - 1, RentedQuantity = RentedQuantity + 1
        WHERE ToolID = @ToolID AND AvailableQuantity > 0";

            using var command = new SQLiteCommand(rentalQuery, connection);
            command.Parameters.AddWithValue("@ToolID", toolID);
            command.Parameters.AddWithValue("@CustomerID", customerID);
            command.Parameters.AddWithValue("@RentalDate", rentalDate);
            command.Parameters.AddWithValue("@DueDate", dueDate);
            command.ExecuteNonQuery();
        }


        public void ReturnTool(int rentalID, DateTime returnDate)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var returnQuery = @"
            UPDATE Rentals
            SET ReturnDate = @ReturnDate, Status = 'Returned'
            WHERE RentalID = @RentalID;

            UPDATE Tools
            SET AvailableQuantity = AvailableQuantity + 1, RentedQuantity = RentedQuantity - 1
            WHERE ToolID = (SELECT ToolID FROM Rentals WHERE RentalID = @RentalID)";

            using var command = new SQLiteCommand(returnQuery, connection);
            command.Parameters.AddWithValue("@RentalID", rentalID);
            command.Parameters.AddWithValue("@ReturnDate", returnDate);
            command.ExecuteNonQuery();
        }

        public List<Rental> GetActiveRentals()
        {
            var rentals = new List<Rental>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT * FROM Rentals WHERE Status = 'Rented'";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                rentals.Add(new Rental
                {
                    RentalID = Convert.ToInt32(reader["RentalID"]),
                    ToolID = Convert.ToInt32(reader["ToolID"]),
                    CustomerID = Convert.ToInt32(reader["CustomerID"]),
                    RentalDate = Convert.ToDateTime(reader["RentalDate"]),
                    DueDate = Convert.ToDateTime(reader["DueDate"]),
                    ReturnDate = reader["ReturnDate"] as DateTime?,
                    Status = reader["Status"].ToString()
                });
            }

            return rentals;
        }

        public void UpdateRentalStatus(int rentalID, string status)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "UPDATE Rentals SET Status = @Status WHERE RentalID = @RentalID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Status", status);
            command.Parameters.AddWithValue("@RentalID", rentalID);
            command.ExecuteNonQuery();
        }

        public void RentToolWithTransaction(string toolID, int customerID, DateTime rentalDate, DateTime dueDate)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            using var transaction = connection.BeginTransaction();
            try
            {
                // Verify available quantity
                var checkQuery = "SELECT AvailableQuantity FROM Tools WHERE ToolID = @ToolID";
                int availableQuantity = 0;
                using (var checkCmd = new SQLiteCommand(checkQuery, connection, transaction))
                {
                    checkCmd.Parameters.AddWithValue("@ToolID", toolID);
                    var result = checkCmd.ExecuteScalar();
                    if (result != null && result != DBNull.Value)
                        availableQuantity = Convert.ToInt32(result);
                }
                if (availableQuantity < 1)
                    throw new InvalidOperationException("Insufficient quantity available.");

                // Insert rental record
                var rentalQuery = "INSERT INTO Rentals (ToolID, CustomerID, RentalDate, DueDate) VALUES (@ToolID, @CustomerID, @RentalDate, @DueDate)";
                using (var rentalCmd = new SQLiteCommand(rentalQuery, connection, transaction))
                {
                    rentalCmd.Parameters.AddWithValue("@ToolID", toolID);
                    rentalCmd.Parameters.AddWithValue("@CustomerID", customerID);
                    rentalCmd.Parameters.AddWithValue("@RentalDate", rentalDate);
                    rentalCmd.Parameters.AddWithValue("@DueDate", dueDate);
                    rentalCmd.ExecuteNonQuery();
                }

                // Update tool quantities
                var updateQuery = "UPDATE Tools SET AvailableQuantity = AvailableQuantity - 1, RentedQuantity = RentedQuantity + 1 WHERE ToolID = @ToolID";
                using (var updateCmd = new SQLiteCommand(updateQuery, connection, transaction))
                {
                    updateCmd.Parameters.AddWithValue("@ToolID", toolID);
                    updateCmd.ExecuteNonQuery();
                }

                transaction.Commit();
            }
            catch
            {
                transaction.Rollback();
                throw;
            }
        }


        public void ReturnToolWithTransaction(int rentalID, DateTime returnDate)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            using var transaction = connection.BeginTransaction();
            try
            {
                // Retrieve the associated toolID and ensure the rental is active
                int toolID = 0;
                var selectQuery = "SELECT ToolID FROM Rentals WHERE RentalID = @RentalID AND Status = 'Rented'";
                using (var selectCmd = new SQLiteCommand(selectQuery, connection, transaction))
                {
                    selectCmd.Parameters.AddWithValue("@RentalID", rentalID);
                    var result = selectCmd.ExecuteScalar();
                    if (result == null)
                        throw new InvalidOperationException("Rental not found or already returned.");
                    toolID = Convert.ToInt32(result);
                }

                // Update the rental record
                var rentalUpdateQuery = "UPDATE Rentals SET ReturnDate = @ReturnDate, Status = 'Returned' WHERE RentalID = @RentalID";
                using (var rentalUpdateCmd = new SQLiteCommand(rentalUpdateQuery, connection, transaction))
                {
                    rentalUpdateCmd.Parameters.AddWithValue("@ReturnDate", returnDate);
                    rentalUpdateCmd.Parameters.AddWithValue("@RentalID", rentalID);
                    rentalUpdateCmd.ExecuteNonQuery();
                }

                // Update tool quantities
                var updateQuery = "UPDATE Tools SET AvailableQuantity = AvailableQuantity + 1, RentedQuantity = RentedQuantity - 1 WHERE ToolID = @ToolID";
                using (var updateCmd = new SQLiteCommand(updateQuery, connection, transaction))
                {
                    updateCmd.Parameters.AddWithValue("@ToolID", toolID);
                    updateCmd.ExecuteNonQuery();
                }

                transaction.Commit();
            }
            catch
            {
                transaction.Rollback();
                throw;
            }
        }

        public List<Rental> GetRentalHistoryForTool(int toolID)
        {
            var rentals = new List<Rental>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM Rentals WHERE ToolID = @ToolID ORDER BY RentalDate DESC";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@ToolID", toolID);
            using var reader = command.ExecuteReader();
            while (reader.Read())
            {
                rentals.Add(new Rental
                {
                    RentalID = Convert.ToInt32(reader["RentalID"]),
                    ToolID = Convert.ToInt32(reader["ToolID"]),
                    CustomerID = Convert.ToInt32(reader["CustomerID"]),
                    RentalDate = Convert.ToDateTime(reader["RentalDate"]),
                    DueDate = Convert.ToDateTime(reader["DueDate"]),
                    ReturnDate = reader["ReturnDate"] is DBNull ? null : Convert.ToDateTime(reader["ReturnDate"]),
                    Status = reader["Status"].ToString()
                });
            }
            return rentals;
        }

        public List<Rental> GetOverdueRentals()
        {
            var rentals = new List<Rental>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM Rentals WHERE ReturnDate IS NULL AND DueDate < @Today";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Today", DateTime.Today);
            using var reader = command.ExecuteReader();
            while (reader.Read())
            {
                rentals.Add(new Rental
                {
                    RentalID = Convert.ToInt32(reader["RentalID"]),
                    ToolID = Convert.ToInt32(reader["ToolID"]),
                    CustomerID = Convert.ToInt32(reader["CustomerID"]),
                    RentalDate = Convert.ToDateTime(reader["RentalDate"]),
                    DueDate = Convert.ToDateTime(reader["DueDate"]),
                    ReturnDate = reader["ReturnDate"] is DBNull ? null : Convert.ToDateTime(reader["ReturnDate"]),
                    Status = reader["Status"].ToString()
                });
            }
            return rentals;
        }

        public void ExtendRental(int rentalID, DateTime newDueDate)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "UPDATE Rentals SET DueDate = @NewDueDate WHERE RentalID = @RentalID AND Status = 'Rented'";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@NewDueDate", newDueDate);
            command.Parameters.AddWithValue("@RentalID", rentalID);
            int rowsAffected = command.ExecuteNonQuery();
            if (rowsAffected == 0)
                throw new InvalidOperationException("Unable to extend rental. Rental not found or already returned.");
        }

        public List<Rental> GetAllRentals()
        {
            var rentals = new List<Rental>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM Rentals";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();
            while (reader.Read())
            {
                rentals.Add(new Rental
                {
                    RentalID = Convert.ToInt32(reader["RentalID"]),
                    ToolID = Convert.ToInt32(reader["ToolID"]),
                    CustomerID = Convert.ToInt32(reader["CustomerID"]),
                    RentalDate = Convert.ToDateTime(reader["RentalDate"]),
                    DueDate = Convert.ToDateTime(reader["DueDate"]),
                    ReturnDate = reader["ReturnDate"] is DBNull ? (DateTime?)null : Convert.ToDateTime(reader["ReturnDate"]),
                    Status = reader["Status"].ToString()
                });
            }
            return rentals;
        }

    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\ReportService.cs
--------------------------------------------------
// ReportService.cs
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Windows;
using System.Windows.Documents;
using System.Windows.Media;
using ToolManagementAppV2.Models;

namespace ToolManagementAppV2.Services
{
    public class ReportService
    {
        private readonly ToolService _toolService;
        private readonly RentalService _rentalService;
        private readonly ActivityLogService _activityLogService;
        private readonly CustomerService _customerService;
        private readonly UserService _userService;

        public ReportService(ToolService toolService, RentalService rentalService, ActivityLogService activityLogService, CustomerService customerService, UserService userService)
        {
            _toolService = toolService;
            _rentalService = rentalService;
            _activityLogService = activityLogService;
            _customerService = customerService;
            _userService = userService;
        }

        public FlowDocument GenerateInventoryReport()
        {
            var tools = _toolService.GetAllTools();
            FlowDocument doc = new FlowDocument
            {
                FontFamily = new FontFamily("Segoe UI"),
                FontSize = 12,
                PageWidth = 800
            };

            Paragraph header = new Paragraph(new Run("Tool Inventory Report"))
            {
                FontSize = 18,
                FontWeight = FontWeights.Bold,
                TextAlignment = System.Windows.TextAlignment.Center,
                Margin = new Thickness(0, 0, 0, 20)
            };
            doc.Blocks.Add(header);

            foreach (var tool in tools)
            {
                Paragraph p = new Paragraph(new Run(
                    $"Tool ID: {tool.ToolID} | Name: {tool.Name} | Qty: {tool.QuantityOnHand} | Location: {tool.Location} | Supplier: {tool.Supplier}"))
                {
                    Margin = new Thickness(0, 0, 0, 10)
                };
                doc.Blocks.Add(p);
            }
            return doc;
        }

        public FlowDocument GenerateRentalReport(bool activeOnly = true)
        {
            // Use active rentals or full history based on parameter.
            var rentals = activeOnly ? _rentalService.GetActiveRentals() : _rentalService.GetAllRentals();
            FlowDocument doc = new FlowDocument
            {
                FontFamily = new FontFamily("Segoe UI"),
                FontSize = 12,
                PageWidth = 800
            };

            string reportTitle = activeOnly ? "Active Rental Report" : "Full Rental History Report";
            Paragraph header = new Paragraph(new Run(reportTitle))
            {
                FontSize = 18,
                FontWeight = FontWeights.Bold,
                TextAlignment = System.Windows.TextAlignment.Center,
                Margin = new Thickness(0, 0, 0, 20)
            };
            doc.Blocks.Add(header);

            foreach (var rental in rentals)
            {
                Paragraph p = new Paragraph(new Run(
                    $"Rental ID: {rental.RentalID} | Tool ID: {rental.ToolID} | Customer ID: {rental.CustomerID} | " +
                    $"Rental Date: {rental.RentalDate:yyyy-MM-dd} | Due Date: {rental.DueDate:yyyy-MM-dd} | " +
                    $"Return Date: {(rental.ReturnDate.HasValue ? rental.ReturnDate.Value.ToString("yyyy-MM-dd") : "N/A")} | " +
                    $"Status: {rental.Status}"))
                {
                    Margin = new Thickness(0, 0, 0, 10)
                };
                doc.Blocks.Add(p);
            }
            return doc;
        }

        public FlowDocument GenerateActivityLogReport()
        {
            var logs = _activityLogService.GetRecentLogs(100);
            FlowDocument doc = new FlowDocument
            {
                FontFamily = new FontFamily("Segoe UI"),
                FontSize = 12,
                PageWidth = 800
            };

            Paragraph header = new Paragraph(new Run("Activity Log Report"))
            {
                FontSize = 18,
                FontWeight = FontWeights.Bold,
                TextAlignment = System.Windows.TextAlignment.Center,
                Margin = new Thickness(0, 0, 0, 20)
            };
            doc.Blocks.Add(header);

            foreach (var log in logs)
            {
                Paragraph p = new Paragraph(new Run(
                    $"LogID: {log.LogID} | UserID: {log.UserID} | User: {log.UserName} | " +
                    $"Action: {log.Action} | Timestamp: {log.Timestamp:yyyy-MM-dd HH:mm:ss}"))
                {
                    Margin = new Thickness(0, 0, 0, 10)
                };
                doc.Blocks.Add(p);
            }
            return doc;
        }

        public FlowDocument GenerateCustomerReport()
        {
            var customers = _customerService.GetAllCustomers();
            FlowDocument doc = new FlowDocument
            {
                FontFamily = new FontFamily("Segoe UI"),
                FontSize = 12,
                PageWidth = 800
            };

            Paragraph header = new Paragraph(new Run("Customer Report"))
            {
                FontSize = 18,
                FontWeight = FontWeights.Bold,
                TextAlignment = System.Windows.TextAlignment.Center,
                Margin = new Thickness(0, 0, 0, 20)
            };
            doc.Blocks.Add(header);

            foreach (var customer in customers)
            {
                Paragraph p = new Paragraph(new Run(
                    $"CustomerID: {customer.CustomerID} | Name: {customer.Name} | Email: {customer.Email} | " +
                    $"Contact: {customer.Contact} | Phone: {customer.Phone} | Address: {customer.Address}"))
                {
                    Margin = new Thickness(0, 0, 0, 10)
                };
                doc.Blocks.Add(p);
            }
            return doc;
        }

        public FlowDocument GenerateUserReport()
        {
            var users = _userService.GetAllUsers();
            FlowDocument doc = new FlowDocument
            {
                FontFamily = new FontFamily("Segoe UI"),
                FontSize = 12,
                PageWidth = 800
            };

            Paragraph header = new Paragraph(new Run("User Report"))
            {
                FontSize = 18,
                FontWeight = FontWeights.Bold,
                TextAlignment = System.Windows.TextAlignment.Center,
                Margin = new Thickness(0, 0, 0, 20)
            };
            doc.Blocks.Add(header);

            foreach (var user in users)
            {
                Paragraph p = new Paragraph(new Run(
                    $"UserID: {user.UserID} | Name: {user.UserName} | IsAdmin: {user.IsAdmin}"))
                {
                    Margin = new Thickness(0, 0, 0, 10)
                };
                doc.Blocks.Add(p);
            }
            return doc;
        }

        public FlowDocument GenerateSummaryReport()
        {
            // Generate a report summarizing key metrics.
            var totalTools = _toolService.GetAllTools().Count;
            var totalRentals = _rentalService.GetAllRentals().Count;
            var totalActiveRentals = _rentalService.GetActiveRentals().Count;
            var totalCustomers = _customerService.GetAllCustomers().Count;
            var totalUsers = _userService.GetAllUsers().Count;

            FlowDocument doc = new FlowDocument
            {
                FontFamily = new FontFamily("Segoe UI"),
                FontSize = 12,
                PageWidth = 800
            };

            Paragraph header = new Paragraph(new Run("Application Summary Report"))
            {
                FontSize = 18,
                FontWeight = FontWeights.Bold,
                TextAlignment = System.Windows.TextAlignment.Center,
                Margin = new Thickness(0, 0, 0, 20)
            };
            doc.Blocks.Add(header);

            Paragraph summary = new Paragraph();
            summary.Inlines.Add(new Run($"Total Tools: {totalTools}\n"));
            summary.Inlines.Add(new Run($"Total Rentals (History): {totalRentals}\n"));
            summary.Inlines.Add(new Run($"Active Rentals: {totalActiveRentals}\n"));
            summary.Inlines.Add(new Run($"Total Customers: {totalCustomers}\n"));
            summary.Inlines.Add(new Run($"Total Users: {totalUsers}\n"));
            doc.Blocks.Add(summary);

            return doc;
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\SettingsService.cs
--------------------------------------------------
using System.Collections.Generic;
using System.Data.SQLite;

namespace ToolManagementAppV2.Services
{
    public class SettingsService
    {
        private readonly DatabaseService _dbService;

        public SettingsService(DatabaseService dbService)
        {
            _dbService = dbService;
        }

        public void SaveSetting(string key, string value)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
                INSERT INTO Settings (Key, Value) 
                VALUES (@Key, @Value)
                ON CONFLICT(Key) DO UPDATE SET Value = @Value";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Key", key);
            command.Parameters.AddWithValue("@Value", value);
            command.ExecuteNonQuery();
        }

        public string GetSetting(string key)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT Value FROM Settings WHERE Key = @Key";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Key", key);
            return command.ExecuteScalar()?.ToString();
        }

        public Dictionary<string, string> GetAllSettings()
        {
            var settings = new Dictionary<string, string>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT Key, Value FROM Settings";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                settings[reader["Key"].ToString()] = reader["Value"].ToString();
            }

            return settings;
        }

        public void UpdateSettings(Dictionary<string, string> settings)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            using var transaction = connection.BeginTransaction();
            try
            {
                foreach (var kv in settings)
                {
                    var query = @"
                INSERT INTO Settings (Key, Value) 
                VALUES (@Key, @Value)
                ON CONFLICT(Key) DO UPDATE SET Value = @Value";
                    using var command = new SQLiteCommand(query, connection, transaction);
                    command.Parameters.AddWithValue("@Key", kv.Key);
                    command.Parameters.AddWithValue("@Value", kv.Value);
                    command.ExecuteNonQuery();
                }
                transaction.Commit();
            }
            catch
            {
                transaction.Rollback();
                throw;
            }
        }

        public void DeleteSetting(string key)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "DELETE FROM Settings WHERE Key = @Key";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Key", key);
            command.ExecuteNonQuery();
        }


    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\ToolService.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.IO;
using ToolManagementAppV2.Models;

namespace ToolManagementAppV2.Services
{
    public class ToolService
    {
        private readonly DatabaseService _dbService;

        public ToolService(DatabaseService dbService)
        {
            _dbService = dbService;
        }

        public List<Tool> GetAllTools()
        {
            var tools = new List<Tool>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT * FROM Tools";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                tools.Add(new Tool
                {
                    ToolID = reader["ToolID"].ToString(),
                    Description = reader["Description"].ToString(),
                    Location = reader["Location"].ToString(),
                    Brand = reader["Brand"].ToString(),
                    IsCheckedOut = reader["IsCheckedOut"].ToString() == "1",
                    CheckedOutBy = reader["CheckedOutBy"].ToString(),
                    CheckedOutTime = reader["CheckedOutTime"] is DBNull ? null : Convert.ToDateTime(reader["CheckedOutTime"])
                });
            }

            return tools;
        }

        public void AddTool(Tool tool)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
        INSERT INTO Tools (Name, Description, Location, Brand, PartNumber, Supplier, PurchasedDate, Notes, AvailableQuantity, RentedQuantity, IsCheckedOut)
        VALUES (@Name, @Description, @Location, @Brand, @PartNumber, @Supplier, @PurchasedDate, @Notes, @AvailableQuantity, @RentedQuantity, @IsCheckedOut)";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Name", tool.Name);
            command.Parameters.AddWithValue("@Description", tool.Description);
            command.Parameters.AddWithValue("@Location", tool.Location);
            command.Parameters.AddWithValue("@Brand", tool.Brand);
            command.Parameters.AddWithValue("@PartNumber", tool.PartNumber);
            command.Parameters.AddWithValue("@Supplier", tool.Supplier ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@PurchasedDate", tool.PurchasedDate ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Notes", tool.Notes ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@AvailableQuantity", tool.QuantityOnHand);
            command.Parameters.AddWithValue("@RentedQuantity", 0); // New tools start with no rentals
            command.Parameters.AddWithValue("@IsCheckedOut", 0);  // Default to not checked out
            command.ExecuteNonQuery();
        }

        public void UpdateTool(Tool tool)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
            UPDATE Tools 
            SET Description = @Description, Location = @Location, Brand = @Brand,
                IsCheckedOut = @IsCheckedOut, CheckedOutBy = @CheckedOutBy, CheckedOutTime = @CheckedOutTime
            WHERE ToolID = @ToolID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@ToolID", tool.ToolID);
            command.Parameters.AddWithValue("@Description", tool.Description);
            command.Parameters.AddWithValue("@Location", tool.Location);
            command.Parameters.AddWithValue("@Brand", tool.Brand);
            command.Parameters.AddWithValue("@IsCheckedOut", tool.IsCheckedOut ? 1 : 0);
            command.Parameters.AddWithValue("@CheckedOutBy", tool.CheckedOutBy ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@CheckedOutTime", tool.CheckedOutTime ?? (object)DBNull.Value);
            command.ExecuteNonQuery();
        }

        public void UpdateToolQuantities(string toolID, int quantityChange, bool isRental)
        {
            if (quantityChange <= 0) throw new ArgumentException("Quantity change must be greater than 0.");

            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = isRental
                ? "UPDATE Tools SET AvailableQuantity = AvailableQuantity - @QuantityChange, RentedQuantity = RentedQuantity + @QuantityChange WHERE ToolID = @ToolID AND AvailableQuantity >= @QuantityChange"
                : "UPDATE Tools SET AvailableQuantity = AvailableQuantity + @QuantityChange, RentedQuantity = RentedQuantity - @QuantityChange WHERE ToolID = @ToolID AND RentedQuantity >= @QuantityChange";

            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@ToolID", toolID);
            command.Parameters.AddWithValue("@QuantityChange", quantityChange);
            var rowsAffected = command.ExecuteNonQuery();

            if (rowsAffected == 0)
                throw new InvalidOperationException("Quantity update failed. Ensure sufficient stock or valid tool ID.");
        }

        public void DeleteTool(string toolID)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "DELETE FROM Tools WHERE ToolID = @ToolID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@ToolID", toolID);
            command.ExecuteNonQuery();
        }

        public List<Tool> SearchTools(string searchTerm)
        {
            var tools = new List<Tool>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
            SELECT * FROM Tools
            WHERE ToolID LIKE @SearchTerm OR Description LIKE @SearchTerm OR Location LIKE @SearchTerm";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@SearchTerm", $"%{searchTerm}%");
            using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                tools.Add(new Tool
                {
                    ToolID = reader["ToolID"].ToString(),
                    Description = reader["Description"].ToString(),
                    Location = reader["Location"].ToString(),
                    Brand = reader["Brand"].ToString(),
                    IsCheckedOut = reader["IsCheckedOut"].ToString() == "1",
                    CheckedOutBy = reader["CheckedOutBy"].ToString(),
                    CheckedOutTime = reader["CheckedOutTime"] is DBNull ? null : Convert.ToDateTime(reader["CheckedOutTime"])
                });
            }

            return tools;
        }

        public void ImportToolsFromCsv(string filePath)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var lines = File.ReadAllLines(filePath);
            foreach (var line in lines.Skip(1)) // Skip header row
            {
                var columns = line.Split(',');
                var query = @"
        INSERT INTO Tools (Name, Description, Location, Brand, PartNumber, Supplier, PurchasedDate, Notes, AvailableQuantity, RentedQuantity, IsCheckedOut)
        VALUES (@Name, @Description, @Location, @Brand, @PartNumber, @Supplier, @PurchasedDate, @Notes, @AvailableQuantity, @RentedQuantity, @IsCheckedOut)";
                using var command = new SQLiteCommand(query, connection);
                command.Parameters.AddWithValue("@Name", columns[0]);
                command.Parameters.AddWithValue("@Description", columns[1]);
                command.Parameters.AddWithValue("@Location", columns[2]);
                command.Parameters.AddWithValue("@Brand", columns[3]);
                command.Parameters.AddWithValue("@PartNumber", columns[4]);
                command.Parameters.AddWithValue("@Supplier", columns[5]);
                command.Parameters.AddWithValue("@PurchasedDate", DateTime.Parse(columns[6]));
                command.Parameters.AddWithValue("@Notes", columns[7]);
                command.Parameters.AddWithValue("@AvailableQuantity", int.Parse(columns[8]));
                command.Parameters.AddWithValue("@RentedQuantity", int.Parse(columns[9]));
                command.Parameters.AddWithValue("@IsCheckedOut", int.Parse(columns[10]));
                command.ExecuteNonQuery();
            }
        }

        public void ExportToolsToCsv(string filePath)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT * FROM Tools";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            using var writer = new StreamWriter(filePath);
            writer.WriteLine("Name,Description,Location,Brand,PartNumber,Supplier,PurchasedDate,Notes,AvailableQuantity,RentedQuantity,IsCheckedOut");
            while (reader.Read())
            {
                var line = string.Join(",",
                    reader["Name"],
                    reader["Description"],
                    reader["Location"],
                    reader["Brand"],
                    reader["PartNumber"],
                    reader["Supplier"],
                    reader["PurchasedDate"],
                    reader["Notes"],
                    reader["AvailableQuantity"],
                    reader["RentedQuantity"],
                    reader["IsCheckedOut"]);
                writer.WriteLine(line);
            }
        }

        public void ToggleToolCheckOutStatus(string toolID, string currentUser)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var selectQuery = "SELECT IsCheckedOut FROM Tools WHERE ToolID = @ToolID";
            bool currentStatus = false;
            using (var selectCommand = new SQLiteCommand(selectQuery, connection))
            {
                selectCommand.Parameters.AddWithValue("@ToolID", toolID);
                var result = selectCommand.ExecuteScalar();
                if (result != null && result != DBNull.Value)
                {
                    currentStatus = Convert.ToBoolean(result);
                }
            }

            bool newStatus = !currentStatus;
            DateTime? newCheckedOutTime = newStatus ? DateTime.Now : (DateTime?)null;
            string newCheckedOutBy = newStatus ? currentUser : null;

            var updateQuery = "UPDATE Tools SET IsCheckedOut = @IsCheckedOut, CheckedOutBy = @CheckedOutBy, CheckedOutTime = @CheckedOutTime WHERE ToolID = @ToolID";
            using (var updateCommand = new SQLiteCommand(updateQuery, connection))
            {
                updateCommand.Parameters.AddWithValue("@IsCheckedOut", newStatus ? 1 : 0);
                updateCommand.Parameters.AddWithValue("@CheckedOutBy", newCheckedOutBy ?? (object)DBNull.Value);
                updateCommand.Parameters.AddWithValue("@CheckedOutTime", newCheckedOutTime ?? (object)DBNull.Value);
                updateCommand.Parameters.AddWithValue("@ToolID", toolID);
                updateCommand.ExecuteNonQuery();
            }
        }

        public Tool GetToolByID(string toolID)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM Tools WHERE ToolID = @ToolID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@ToolID", toolID);
            using var reader = command.ExecuteReader();
            if (reader.Read())
            {
                return new Tool
                {
                    ToolID = reader["ToolID"].ToString(),
                    Name = reader["Name"].ToString(),
                    Description = reader["Description"].ToString(),
                    Location = reader["Location"].ToString(),
                    Brand = reader["Brand"].ToString(),
                    PartNumber = reader["PartNumber"].ToString(),
                    Supplier = reader["Supplier"].ToString(),
                    PurchasedDate = reader["PurchasedDate"] is DBNull ? null : Convert.ToDateTime(reader["PurchasedDate"]),
                    Notes = reader["Notes"].ToString(),
                    IsCheckedOut = reader["IsCheckedOut"].ToString() == "1",
                    CheckedOutBy = reader["CheckedOutBy"].ToString(),
                    CheckedOutTime = reader["CheckedOutTime"] is DBNull ? null : Convert.ToDateTime(reader["CheckedOutTime"])
                };
            }
            return null;
        }

        public void UpdateToolImage(string toolID, string imagePath)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "UPDATE Tools SET ToolImagePath = @ImagePath WHERE ToolID = @ToolID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@ImagePath", imagePath);
            command.Parameters.AddWithValue("@ToolID", toolID);
            command.ExecuteNonQuery();
        }

        // In ToolService.cs
        public List<Tool> GetToolsCheckedOutBy(string userName)
        {
            var tools = new List<Tool>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM Tools WHERE CheckedOutBy = @UserName AND IsCheckedOut = 1";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@UserName", userName);
            using var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tools.Add(new Tool
                {
                    ToolID = reader["ToolID"].ToString(),
                    Name = reader["Name"].ToString(),
                    PartNumber = reader["PartNumber"].ToString(),
                    Description = reader["Description"].ToString(),
                    Brand = reader["Brand"].ToString(),
                    Location = reader["Location"].ToString(),
                    QuantityOnHand = Convert.ToInt32(reader["AvailableQuantity"]),
                    Supplier = reader["Supplier"].ToString(),
                    PurchasedDate = reader["PurchasedDate"] is DBNull ? (DateTime?)null : Convert.ToDateTime(reader["PurchasedDate"]),
                    Notes = reader["Notes"].ToString(),
                    IsCheckedOut = reader["IsCheckedOut"].ToString() == "1",
                    CheckedOutBy = reader["CheckedOutBy"].ToString(),
                    CheckedOutTime = reader["CheckedOutTime"] is DBNull ? (DateTime?)null : Convert.ToDateTime(reader["CheckedOutTime"]),
                    ToolImagePath = reader["ToolImagePath"]?.ToString()
                });
            }
            return tools;
        }


    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\UserService.cs
--------------------------------------------------
// Revised UserService.cs (no password hashing)
using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.IO;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Models;

namespace ToolManagementAppV2.Services
{
    public class UserService
    {
        private readonly DatabaseService _dbService;
        public UserService(DatabaseService dbService)
        {
            _dbService = dbService;
        }

        public List<User> GetAllUsers()
        {
            var users = new List<User>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM Users";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();
            while (reader.Read())
            {
                var user = new User
                {
                    UserID = Convert.ToInt32(reader["UserID"]),
                    UserName = reader["UserName"].ToString(),
                    Password = reader["Password"].ToString(),
                    UserPhotoPath = reader["UserPhotoPath"].ToString(),
                    IsAdmin = Convert.ToInt32(reader["IsAdmin"]) == 1,
                    Email = reader["Email"]?.ToString(),
                    Phone = reader["Phone"]?.ToString(),
                    Address = reader["Address"]?.ToString(),
                    Role = reader["Role"]?.ToString()
                };
                if (!string.IsNullOrEmpty(user.UserPhotoPath) && File.Exists(user.UserPhotoPath))
                    user.PhotoBitmap = new BitmapImage(new Uri(user.UserPhotoPath));
                users.Add(user);
            }
            return users;
        }

        public void AddUser(User user)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = @"
        INSERT INTO Users (UserName, Password, UserPhotoPath, IsAdmin, Email, Phone, Address, Role)
        VALUES (@UserName, @Password, @UserPhotoPath, @IsAdmin, @Email, @Phone, @Address, @Role)";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@UserName", user.UserName);
            command.Parameters.AddWithValue("@Password", string.IsNullOrEmpty(user.Password) ? "" : user.Password);
            command.Parameters.AddWithValue("@UserPhotoPath", user.UserPhotoPath ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@IsAdmin", user.IsAdmin ? 1 : 0);
            command.Parameters.AddWithValue("@Email", user.Email ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Phone", user.Phone ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Address", user.Address ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Role", user.Role ?? (object)DBNull.Value);
            command.ExecuteNonQuery();
            using var cmdId = new SQLiteCommand("SELECT last_insert_rowid()", connection);
            var result = cmdId.ExecuteScalar();
            if (result != null && long.TryParse(result.ToString(), out long newId))
                user.UserID = (int)newId;
        }



        public void UpdateUser(User user)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = @"
        UPDATE Users 
        SET UserName = @UserName, Password = @Password, UserPhotoPath = @UserPhotoPath, IsAdmin = @IsAdmin,
            Email = @Email, Phone = @Phone, Address = @Address, Role = @Role
        WHERE UserID = @UserID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@UserID", user.UserID);
            command.Parameters.AddWithValue("@UserName", user.UserName);
            command.Parameters.AddWithValue("@Password", string.IsNullOrEmpty(user.Password) ? "" : user.Password);
            command.Parameters.AddWithValue("@UserPhotoPath", user.UserPhotoPath ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@IsAdmin", user.IsAdmin ? 1 : 0);
            command.Parameters.AddWithValue("@Email", user.Email ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Phone", user.Phone ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Address", user.Address ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Role", user.Role ?? (object)DBNull.Value);
            command.ExecuteNonQuery();
        }

        public User AuthenticateUser(string userName, string password)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM Users WHERE UserName = @UserName";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@UserName", userName);
            using var reader = command.ExecuteReader();
            if (reader.Read())
            {
                string storedPassword = reader["Password"].ToString();
                if (storedPassword == password)
                {
                    return new User
                    {
                        UserID = Convert.ToInt32(reader["UserID"]),
                        UserName = reader["UserName"].ToString(),
                        Password = storedPassword,
                        UserPhotoPath = reader["UserPhotoPath"].ToString(),
                        IsAdmin = Convert.ToInt32(reader["IsAdmin"]) == 1
                    };
                }
            }
            return null;
        }

        public void ChangeUserPassword(int userID, string newPassword)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "UPDATE Users SET Password = @Password WHERE UserID = @UserID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Password", newPassword);
            command.Parameters.AddWithValue("@UserID", userID);
            command.ExecuteNonQuery();
        }

        public void DeleteUser(int userID)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "DELETE FROM Users WHERE UserID = @UserID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@UserID", userID);
            command.ExecuteNonQuery();
        }

        public User GetCurrentUser()
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM Users LIMIT 1";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();
            if (reader.Read())
            {
                return new User
                {
                    UserID = Convert.ToInt32(reader["UserID"]),
                    UserName = reader["UserName"].ToString(),
                    Password = reader["Password"].ToString(),
                    UserPhotoPath = reader["UserPhotoPath"].ToString(),
                    IsAdmin = Convert.ToInt32(reader["IsAdmin"]) == 1
                };
            }
            return null;
        }

        public User GetUserByID(int userID)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();
            var query = "SELECT * FROM Users WHERE UserID = @UserID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@UserID", userID);
            using var reader = command.ExecuteReader();
            if (reader.Read())
            {
                return new User
                {
                    UserID = Convert.ToInt32(reader["UserID"]),
                    UserName = reader["UserName"].ToString(),
                    Password = reader["Password"].ToString(),
                    UserPhotoPath = reader["UserPhotoPath"].ToString(),
                    IsAdmin = Convert.ToInt32(reader["IsAdmin"]) == 1
                };
            }
            return null;
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\BooleanToAdminConverter.cs
--------------------------------------------------
// File: Utilities/BooleanToAdminConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities
{
    public class BooleanToAdminConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool isAdmin && isAdmin)
                return "Admin";
            return string.Empty;
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\CheckOutStatusConverter.cs
--------------------------------------------------
// File: Utilities/CheckOutStatusConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities
{
    public class CheckOutStatusConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return (value is bool isCheckedOut && isCheckedOut) ? "Check In" : "Check Out";
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\InverseBooleanConverter.cs
--------------------------------------------------
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities
{
    public class InverseBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool b)
                return !b;
            return value;
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool b)
                return !b;
            return value;
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\NonEmptyStringToBoolConverter.cs
--------------------------------------------------
// NonEmptyStringToBoolConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities
{
    public class NonEmptyStringToBoolConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture) =>
            !string.IsNullOrEmpty(value as string);

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) =>
            throw new NotImplementedException();
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\NullToDefaultImageConverter.cs
--------------------------------------------------
// Revised NullToDefaultImageConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media.Imaging;

namespace ToolManagementAppV2.Utilities
{
    public class NullToDefaultImageConverter : IValueConverter
    {
        private static BitmapImage _defaultImage;
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is BitmapImage bitmap)
                return bitmap;

            string path = value as string;
            if (!string.IsNullOrEmpty(path))
            {
                try
                {
                    return new BitmapImage(new Uri(path, UriKind.Absolute));
                }
                catch { }
            }
            if (_defaultImage == null)
            {
                try
                {
                    string defaultFile = "DefaultUserPhoto.png";
                    if (parameter != null)
                    {
                        string param = parameter.ToString();
                        if (param.Equals("Tool", StringComparison.OrdinalIgnoreCase))
                            defaultFile = "DefaultToolImage.png";
                        else if (param.Equals("Logo", StringComparison.OrdinalIgnoreCase))
                            defaultFile = "DefaultLogo.png";
                    }
                    var resourceUri = new Uri($"pack://application:,,,/Resources/{defaultFile}", UriKind.Absolute);
                    _defaultImage = new BitmapImage(resourceUri);
                }
                catch
                {
                    _defaultImage = new BitmapImage();
                }
            }
            return _defaultImage;
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\PathHelper.cs
--------------------------------------------------
using System;
using System.IO;

namespace ToolManagementAppV2.Utilities
{
    public static class PathHelper
    {
        public static string GetAbsolutePath(string relativePath)
        {
            return Path.Combine(AppDomain.CurrentDomain.BaseDirectory, relativePath);
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\SecurityHelper.cs
--------------------------------------------------
using System.Security.Cryptography;
using System.Text;

namespace ToolManagementAppV2.Utilities
{
    public static class SecurityHelper
    {
        public static string ComputeSha256Hash(string rawData)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));
                StringBuilder builder = new StringBuilder();
                foreach (byte b in bytes)
                {
                    builder.Append(b.ToString("x2")); // lowercase hex
                }
                return builder.ToString();
            }
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\ViewModels\MainViewModel.cs
--------------------------------------------------
// File: ViewModels/MainViewModel.cs
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Services;

namespace ToolManagementAppV2.ViewModels
{
    public class MainViewModel : ObservableObject
    {
        private readonly ToolService _toolService;
        private readonly UserService _userService;
        private readonly SettingsService _settingsService;

        // Properties for Current User
        private string _currentUserName;
        public string CurrentUserName
        {
            get => _currentUserName;
            set => SetProperty(ref _currentUserName, value);
        }

        private BitmapImage _currentUserPhoto;
        public BitmapImage CurrentUserPhoto
        {
            get => _currentUserPhoto;
            set => SetProperty(ref _currentUserPhoto, value);
        }

        // Observable Collections
        public ObservableCollection<Tool> Tools { get; } = new();
        public ObservableCollection<Tool> SearchResults { get; } = new();
        public ObservableCollection<Tool> CheckedOutTools { get; } = new();
        public ObservableCollection<User> Users { get; } = new ObservableCollection<User>();

        // Selected items (for master/detail)
        public Tool SelectedTool { get; set; }

        private User _selectedUser;
        public User SelectedUser
        {
            get => _selectedUser;
            set
            {
                SetProperty(ref _selectedUser, value);
                OnPropertyChanged(nameof(IsLastAdmin));
            }
        }

        // New properties for password change
        private string _newPassword;
        public string NewPassword
        {
            get => _newPassword;
            set => SetProperty(ref _newPassword, value);
        }
        private string _confirmPassword;
        public string ConfirmPassword
        {
            get => _confirmPassword;
            set => SetProperty(ref _confirmPassword, value);
        }

        // Tool Management
        public string SearchTerm { get; set; }

        // Commands (omitted for brevity)
        public ICommand SearchCommand { get; }
        public ICommand AddToolCommand { get; }
        public ICommand UpdateToolCommand { get; }
        public ICommand DeleteToolCommand { get; }
        public ICommand LoadUsersCommand { get; }

        // Header Logo property
        private BitmapImage _headerLogo;
        public BitmapImage HeaderLogo
        {
            get
            {
                if (_headerLogo == null)
                {
                    string logoPath = _settingsService.GetSetting("CompanyLogoPath");
                    if (string.IsNullOrEmpty(logoPath) || !System.IO.File.Exists(logoPath))
                    {
                        _headerLogo = new BitmapImage(new Uri("pack://application:,,,/Resources/DefaultLogo.png", UriKind.Absolute));
                    }
                    else
                    {
                        _headerLogo = new BitmapImage(new Uri(logoPath, UriKind.Absolute));
                    }
                }
                return _headerLogo;
            }
            set => SetProperty(ref _headerLogo, value);
        }

        public bool IsLastAdmin
        {
            get
            {
                if (SelectedUser == null)
                    return false;
                if (!SelectedUser.IsAdmin)
                    return false;
                return Users.Count(u => u.IsAdmin) == 1;
            }
        }

        public MainViewModel(ToolService toolService, UserService userService, SettingsService settingsService)
        {
            _toolService = toolService;
            _userService = userService;
            _settingsService = settingsService;
            SearchCommand = new RelayCommand(SearchTools);
            AddToolCommand = new RelayCommand(AddTool);
            UpdateToolCommand = new RelayCommand(UpdateTool);
            DeleteToolCommand = new RelayCommand(DeleteTool);
            LoadUsersCommand = new RelayCommand(LoadUsers);

            LoadTools();
            LoadCheckedOutTools();
            LoadUsers();
            LoadCurrentUser();
        }

        private void LoadTools()
        {
            Tools.Clear();
            var allTools = _toolService.GetAllTools();
            foreach (var tool in allTools)
                Tools.Add(tool);
        }

        private void LoadCheckedOutTools()
        {
            CheckedOutTools.Clear();
            var allTools = _toolService.GetAllTools();
            var checkedOut = allTools.Where(t => t.IsCheckedOut);
            foreach (var tool in checkedOut)
                CheckedOutTools.Add(tool);
        }

        private void SearchTools()
        {
            SearchResults.Clear();
            var results = _toolService.SearchTools(SearchTerm);
            foreach (var tool in results)
                SearchResults.Add(tool);
        }

        private void AddTool()
        {
            var newTool = new Tool { ToolID = "NewID", Description = "New Description" };
            _toolService.AddTool(newTool);
            LoadTools();
        }

        private void UpdateTool()
        {
            if (SelectedTool != null)
            {
                _toolService.UpdateTool(SelectedTool);
                LoadTools();
            }
        }

        private void DeleteTool()
        {
            if (SelectedTool != null)
            {
                _toolService.DeleteTool(SelectedTool.ToolID);
                LoadTools();
            }
        }

        public void LoadUsers()
        {
            Users.Clear();
            var usersList = _userService.GetAllUsers();
            foreach (var user in usersList)
            {
                if (!string.IsNullOrEmpty(user.UserPhotoPath) && System.IO.File.Exists(user.UserPhotoPath))
                {
                    user.PhotoBitmap = new BitmapImage(new Uri(user.UserPhotoPath, UriKind.Absolute))
                    {
                        CacheOption = BitmapCacheOption.OnLoad
                    };
                }
                Users.Add(user);
            }
            // Do not auto-select a user; user details remain empty until one is selected.
            SelectedUser = null;
            OnPropertyChanged(nameof(Users));
            OnPropertyChanged(nameof(SelectedUser));
            OnPropertyChanged(nameof(IsLastAdmin));
        }

        public void LoadCurrentUser()
        {
            if (Application.Current.Properties.Contains("CurrentUser"))
            {
                var currentUser = Application.Current.Properties["CurrentUser"] as User;
                if (currentUser != null)
                {
                    CurrentUserName = currentUser.UserName;
                    CurrentUserPhoto = LoadPhotoBitmap(currentUser.UserPhotoPath);
                    return;
                }
            }
            CurrentUserName = "Guest";
            CurrentUserPhoto = LoadPhotoBitmap(null);
        }

        private BitmapImage LoadPhotoBitmap(string photoPath)
        {
            if (string.IsNullOrEmpty(photoPath) || !System.IO.File.Exists(photoPath))
            {
                var defaultPhotoUri = new Uri("pack://application:,,,/Resources/DefaultUserPhoto.png", UriKind.Absolute);
                return new BitmapImage(defaultPhotoUri) { CacheOption = BitmapCacheOption.OnLoad };
            }
            return new BitmapImage(new Uri(photoPath, UriKind.Absolute)) { CacheOption = BitmapCacheOption.OnLoad };
        }

        public void ClearUserInputFields()
        {
            SelectedUser = new User();
            NewPassword = string.Empty;
            ConfirmPassword = string.Empty;
        }

        private string _userPassword;
        public string UserPassword
        {
            get => _userPassword;
            set => SetProperty(ref _userPassword, value);
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
--------------------------------------------------
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\App.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6FB3D0F57DDA2D30CA3F275BD99D9702C371929F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public static void Main() {
            ToolManagementAppV2.App app = new ToolManagementAppV2.App();
            app.Run();
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\App.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6FB3D0F57DDA2D30CA3F275BD99D9702C371929F"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public static void Main() {
            ToolManagementAppV2.App app = new ToolManagementAppV2.App();
            app.Run();
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\GeneratedInternalTypeHelper.g.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XamlGeneratedNamespace {
    
    
    /// <summary>
    /// GeneratedInternalTypeHelper
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public sealed class GeneratedInternalTypeHelper : System.Windows.Markup.InternalTypeHelper {
        
        /// <summary>
        /// CreateInstance
        /// </summary>
        protected override object CreateInstance(System.Type type, System.Globalization.CultureInfo culture) {
            return System.Activator.CreateInstance(type, ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) 
                            | (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.CreateInstance)), null, null, culture);
        }
        
        /// <summary>
        /// GetPropertyValue
        /// </summary>
        protected override object GetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture) {
            return propertyInfo.GetValue(target, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// SetPropertyValue
        /// </summary>
        protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
            propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// CreateDelegate
        /// </summary>
        protected override System.Delegate CreateDelegate(System.Type delegateType, object target, string handler) {
            return ((System.Delegate)(target.GetType().InvokeMember("_CreateDelegate", (System.Reflection.BindingFlags.InvokeMethod 
                            | (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)), null, target, new object[] {
                        delegateType,
                        handler}, null)));
        }
        
        /// <summary>
        /// AddEventHandler
        /// </summary>
        protected override void AddEventHandler(System.Reflection.EventInfo eventInfo, object target, System.Delegate handler) {
            eventInfo.AddEventHandler(target, handler);
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\GeneratedInternalTypeHelper.g.i.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XamlGeneratedNamespace {
    
    
    /// <summary>
    /// GeneratedInternalTypeHelper
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public sealed class GeneratedInternalTypeHelper : System.Windows.Markup.InternalTypeHelper {
        
        /// <summary>
        /// CreateInstance
        /// </summary>
        protected override object CreateInstance(System.Type type, System.Globalization.CultureInfo culture) {
            return System.Activator.CreateInstance(type, ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) 
                            | (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.CreateInstance)), null, null, culture);
        }
        
        /// <summary>
        /// GetPropertyValue
        /// </summary>
        protected override object GetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture) {
            return propertyInfo.GetValue(target, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// SetPropertyValue
        /// </summary>
        protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
            propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// CreateDelegate
        /// </summary>
        protected override System.Delegate CreateDelegate(System.Type delegateType, object target, string handler) {
            return ((System.Delegate)(target.GetType().InvokeMember("_CreateDelegate", (System.Reflection.BindingFlags.InvokeMethod 
                            | (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)), null, target, new object[] {
                        delegateType,
                        handler}, null)));
        }
        
        /// <summary>
        /// AddEventHandler
        /// </summary>
        protected override void AddEventHandler(System.Reflection.EventInfo eventInfo, object target, System.Delegate handler) {
            eventInfo.AddEventHandler(target, handler);
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\LoginWindow.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\LoginWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "B4FFFEBA2ED27244F78FA8E3C599C847896E8B7C"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2.Utilities;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// LoginWindow
    /// </summary>
    public partial class LoginWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 23 "..\..\..\LoginWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListBox UsersListBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/loginwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\LoginWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.UsersListBox = ((System.Windows.Controls.ListBox)(target));
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 2:
            
            #line 32 "..\..\..\LoginWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UserButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\LoginWindow.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\LoginWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "B4FFFEBA2ED27244F78FA8E3C599C847896E8B7C"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2.Utilities;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// LoginWindow
    /// </summary>
    public partial class LoginWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 23 "..\..\..\LoginWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListBox UsersListBox;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/loginwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\LoginWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.UsersListBox = ((System.Windows.Controls.ListBox)(target));
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 2:
            
            #line 32 "..\..\..\LoginWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UserButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\MainWindow.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5565544F165E7619EE08E03CC891E1DCCB06757A"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2.Utilities;
using Xceed.Wpf.Toolkit;
using Xceed.Wpf.Toolkit.Chromes;
using Xceed.Wpf.Toolkit.Converters;
using Xceed.Wpf.Toolkit.Core;
using Xceed.Wpf.Toolkit.Core.Converters;
using Xceed.Wpf.Toolkit.Core.Input;
using Xceed.Wpf.Toolkit.Core.Media;
using Xceed.Wpf.Toolkit.Core.Utilities;
using Xceed.Wpf.Toolkit.Mag.Converters;
using Xceed.Wpf.Toolkit.Panels;
using Xceed.Wpf.Toolkit.Primitives;
using Xceed.Wpf.Toolkit.PropertyGrid;
using Xceed.Wpf.Toolkit.PropertyGrid.Attributes;
using Xceed.Wpf.Toolkit.PropertyGrid.Commands;
using Xceed.Wpf.Toolkit.PropertyGrid.Converters;
using Xceed.Wpf.Toolkit.PropertyGrid.Editors;
using Xceed.Wpf.Toolkit.Zoombox;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 29 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image HeaderIcon;
        
        #line default
        #line hidden
        
        
        #line 49 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabControl MyTabControl;
        
        #line default
        #line hidden
        
        
        #line 58 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SearchInput;
        
        #line default
        #line hidden
        
        
        #line 63 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView SearchResultsList;
        
        #line default
        #line hidden
        
        
        #line 101 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CheckedOutToolsList;
        
        #line default
        #line hidden
        
        
        #line 134 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolIDInput;
        
        #line default
        #line hidden
        
        
        #line 135 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PartNumberInput;
        
        #line default
        #line hidden
        
        
        #line 136 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolNameInput;
        
        #line default
        #line hidden
        
        
        #line 137 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox BrandInput;
        
        #line default
        #line hidden
        
        
        #line 138 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox LocationInput;
        
        #line default
        #line hidden
        
        
        #line 139 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox QuantityInput;
        
        #line default
        #line hidden
        
        
        #line 140 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SupplierInput;
        
        #line default
        #line hidden
        
        
        #line 141 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PurchasedInput;
        
        #line default
        #line hidden
        
        
        #line 142 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox NotesInput;
        
        #line default
        #line hidden
        
        
        #line 151 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ToolsList;
        
        #line default
        #line hidden
        
        
        #line 196 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerNameInput;
        
        #line default
        #line hidden
        
        
        #line 197 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerEmailInput;
        
        #line default
        #line hidden
        
        
        #line 198 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerContactInput;
        
        #line default
        #line hidden
        
        
        #line 199 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerPhoneInput;
        
        #line default
        #line hidden
        
        
        #line 200 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerAddressInput;
        
        #line default
        #line hidden
        
        
        #line 208 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CustomerList;
        
        #line default
        #line hidden
        
        
        #line 231 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 232 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 233 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox DueDateInput;
        
        #line default
        #line hidden
        
        
        #line 238 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox RentalIDInput;
        
        #line default
        #line hidden
        
        
        #line 239 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox NewDueDateInput;
        
        #line default
        #line hidden
        
        
        #line 243 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView RentalsList;
        
        #line default
        #line hidden
        
        
        #line 267 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView UserList;
        
        #line default
        #line hidden
        
        
        #line 299 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox PasswordBox;
        
        #line default
        #line hidden
        
        
        #line 338 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox RentalDurationInput;
        
        #line default
        #line hidden
        
        
        #line 341 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image LogoPreview;
        
        #line default
        #line hidden
        
        
        #line 352 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock SelectedCsvFile;
        
        #line default
        #line hidden
        
        
        #line 365 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ActivityLogsList;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 2:
            this.HeaderIcon = ((System.Windows.Controls.Image)(target));
            return;
            case 3:
            
            #line 35 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LogoutButton_Click);
            
            #line default
            #line hidden
            return;
            case 4:
            this.MyTabControl = ((System.Windows.Controls.TabControl)(target));
            return;
            case 5:
            this.SearchInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            
            #line 58 "..\..\..\MainWindow.xaml"
            this.SearchInput.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.SearchInput_TextChanged);
            
            #line default
            #line hidden
            return;
            case 6:
            
            #line 60 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintSearchResults_Click);
            
            #line default
            #line hidden
            return;
            case 7:
            
            #line 61 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintMyCheckedOutTools_Click);
            
            #line default
            #line hidden
            return;
            case 8:
            this.SearchResultsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 9:
            
            #line 99 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChooseUserProfilePicButton_Click);
            
            #line default
            #line hidden
            return;
            case 10:
            this.CheckedOutToolsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 12:
            this.ToolIDInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 13:
            this.PartNumberInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 14:
            this.ToolNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 15:
            this.BrandInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 16:
            this.LocationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 17:
            this.QuantityInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 18:
            this.SupplierInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 19:
            this.PurchasedInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 20:
            this.NotesInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 21:
            
            #line 144 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddButton_Click);
            
            #line default
            #line hidden
            return;
            case 22:
            
            #line 145 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateButton_Click);
            
            #line default
            #line hidden
            return;
            case 23:
            
            #line 146 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);
            
            #line default
            #line hidden
            return;
            case 24:
            
            #line 147 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeToolImage_Click);
            
            #line default
            #line hidden
            return;
            case 25:
            this.ToolsList = ((System.Windows.Controls.ListView)(target));
            
            #line 151 "..\..\..\MainWindow.xaml"
            this.ToolsList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ToolsList_SelectionChanged);
            
            #line default
            #line hidden
            return;
            case 26:
            this.CustomerNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 27:
            this.CustomerEmailInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 28:
            this.CustomerContactInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 29:
            this.CustomerPhoneInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 30:
            this.CustomerAddressInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 31:
            
            #line 202 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 32:
            
            #line 203 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 33:
            
            #line 204 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 34:
            this.CustomerList = ((System.Windows.Controls.ListView)(target));
            return;
            case 35:
            this.ToolIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 36:
            this.CustomerIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 37:
            this.DueDateInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 38:
            
            #line 234 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RentToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 39:
            
            #line 235 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ReturnToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 40:
            this.RentalIDInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 41:
            this.NewDueDateInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 42:
            
            #line 240 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ExtendRentalButton_Click);
            
            #line default
            #line hidden
            return;
            case 43:
            
            #line 241 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadOverdueRentals_Click);
            
            #line default
            #line hidden
            return;
            case 44:
            this.RentalsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 45:
            this.UserList = ((System.Windows.Controls.ListView)(target));
            return;
            case 46:
            
            #line 291 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadUserPhotoButton_Click);
            
            #line default
            #line hidden
            return;
            case 47:
            this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            
            #line 299 "..\..\..\MainWindow.xaml"
            this.PasswordBox.PasswordChanged += new System.Windows.RoutedEventHandler(this.PasswordBox_PasswordChanged);
            
            #line default
            #line hidden
            return;
            case 48:
            
            #line 323 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.NewUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 49:
            
            #line 324 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 50:
            
            #line 325 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SaveUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 51:
            this.RentalDurationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 52:
            this.LogoPreview = ((System.Windows.Controls.Image)(target));
            return;
            case 53:
            
            #line 342 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadLogoButton_Click);
            
            #line default
            #line hidden
            return;
            case 54:
            
            #line 343 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SaveSettingsButton_Click);
            
            #line default
            #line hidden
            return;
            case 55:
            
            #line 351 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SelectCsvFileButton_Click);
            
            #line default
            #line hidden
            return;
            case 56:
            this.SelectedCsvFile = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 57:
            
            #line 353 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportCsvButton_Click);
            
            #line default
            #line hidden
            return;
            case 58:
            
            #line 355 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ExportCsvButton_Click);
            
            #line default
            #line hidden
            return;
            case 59:
            
            #line 362 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshLogsButton_Click);
            
            #line default
            #line hidden
            return;
            case 60:
            
            #line 363 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PurgeLogsButton_Click);
            
            #line default
            #line hidden
            return;
            case 61:
            this.ActivityLogsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 62:
            
            #line 389 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintInventoryReport_Click);
            
            #line default
            #line hidden
            return;
            case 63:
            
            #line 390 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintActiveRentalsReport_Click);
            
            #line default
            #line hidden
            return;
            case 64:
            
            #line 391 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintFullRentalReport_Click);
            
            #line default
            #line hidden
            return;
            case 65:
            
            #line 394 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintActivityLogReport_Click);
            
            #line default
            #line hidden
            return;
            case 66:
            
            #line 395 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintCustomerReport_Click);
            
            #line default
            #line hidden
            return;
            case 67:
            
            #line 396 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintUserReport_Click);
            
            #line default
            #line hidden
            return;
            case 68:
            
            #line 398 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintSummaryReport_Click);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            
            #line 20 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            case 11:
            
            #line 108 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\MainWindow.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5565544F165E7619EE08E03CC891E1DCCB06757A"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2.Utilities;
using Xceed.Wpf.Toolkit;
using Xceed.Wpf.Toolkit.Chromes;
using Xceed.Wpf.Toolkit.Converters;
using Xceed.Wpf.Toolkit.Core;
using Xceed.Wpf.Toolkit.Core.Converters;
using Xceed.Wpf.Toolkit.Core.Input;
using Xceed.Wpf.Toolkit.Core.Media;
using Xceed.Wpf.Toolkit.Core.Utilities;
using Xceed.Wpf.Toolkit.Mag.Converters;
using Xceed.Wpf.Toolkit.Panels;
using Xceed.Wpf.Toolkit.Primitives;
using Xceed.Wpf.Toolkit.PropertyGrid;
using Xceed.Wpf.Toolkit.PropertyGrid.Attributes;
using Xceed.Wpf.Toolkit.PropertyGrid.Commands;
using Xceed.Wpf.Toolkit.PropertyGrid.Converters;
using Xceed.Wpf.Toolkit.PropertyGrid.Editors;
using Xceed.Wpf.Toolkit.Zoombox;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 29 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image HeaderIcon;
        
        #line default
        #line hidden
        
        
        #line 49 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabControl MyTabControl;
        
        #line default
        #line hidden
        
        
        #line 58 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SearchInput;
        
        #line default
        #line hidden
        
        
        #line 63 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView SearchResultsList;
        
        #line default
        #line hidden
        
        
        #line 101 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CheckedOutToolsList;
        
        #line default
        #line hidden
        
        
        #line 134 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolIDInput;
        
        #line default
        #line hidden
        
        
        #line 135 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PartNumberInput;
        
        #line default
        #line hidden
        
        
        #line 136 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolNameInput;
        
        #line default
        #line hidden
        
        
        #line 137 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox BrandInput;
        
        #line default
        #line hidden
        
        
        #line 138 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox LocationInput;
        
        #line default
        #line hidden
        
        
        #line 139 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox QuantityInput;
        
        #line default
        #line hidden
        
        
        #line 140 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SupplierInput;
        
        #line default
        #line hidden
        
        
        #line 141 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PurchasedInput;
        
        #line default
        #line hidden
        
        
        #line 142 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox NotesInput;
        
        #line default
        #line hidden
        
        
        #line 151 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ToolsList;
        
        #line default
        #line hidden
        
        
        #line 196 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerNameInput;
        
        #line default
        #line hidden
        
        
        #line 197 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerEmailInput;
        
        #line default
        #line hidden
        
        
        #line 198 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerContactInput;
        
        #line default
        #line hidden
        
        
        #line 199 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerPhoneInput;
        
        #line default
        #line hidden
        
        
        #line 200 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerAddressInput;
        
        #line default
        #line hidden
        
        
        #line 208 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CustomerList;
        
        #line default
        #line hidden
        
        
        #line 231 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 232 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 233 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox DueDateInput;
        
        #line default
        #line hidden
        
        
        #line 238 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox RentalIDInput;
        
        #line default
        #line hidden
        
        
        #line 239 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox NewDueDateInput;
        
        #line default
        #line hidden
        
        
        #line 243 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView RentalsList;
        
        #line default
        #line hidden
        
        
        #line 267 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView UserList;
        
        #line default
        #line hidden
        
        
        #line 299 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox PasswordBox;
        
        #line default
        #line hidden
        
        
        #line 338 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox RentalDurationInput;
        
        #line default
        #line hidden
        
        
        #line 341 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image LogoPreview;
        
        #line default
        #line hidden
        
        
        #line 352 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock SelectedCsvFile;
        
        #line default
        #line hidden
        
        
        #line 365 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ActivityLogsList;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 2:
            this.HeaderIcon = ((System.Windows.Controls.Image)(target));
            return;
            case 3:
            
            #line 35 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LogoutButton_Click);
            
            #line default
            #line hidden
            return;
            case 4:
            this.MyTabControl = ((System.Windows.Controls.TabControl)(target));
            return;
            case 5:
            this.SearchInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            
            #line 58 "..\..\..\MainWindow.xaml"
            this.SearchInput.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.SearchInput_TextChanged);
            
            #line default
            #line hidden
            return;
            case 6:
            
            #line 60 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintSearchResults_Click);
            
            #line default
            #line hidden
            return;
            case 7:
            
            #line 61 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintMyCheckedOutTools_Click);
            
            #line default
            #line hidden
            return;
            case 8:
            this.SearchResultsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 9:
            
            #line 99 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChooseUserProfilePicButton_Click);
            
            #line default
            #line hidden
            return;
            case 10:
            this.CheckedOutToolsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 12:
            this.ToolIDInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 13:
            this.PartNumberInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 14:
            this.ToolNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 15:
            this.BrandInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 16:
            this.LocationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 17:
            this.QuantityInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 18:
            this.SupplierInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 19:
            this.PurchasedInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 20:
            this.NotesInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 21:
            
            #line 144 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddButton_Click);
            
            #line default
            #line hidden
            return;
            case 22:
            
            #line 145 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateButton_Click);
            
            #line default
            #line hidden
            return;
            case 23:
            
            #line 146 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);
            
            #line default
            #line hidden
            return;
            case 24:
            
            #line 147 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeToolImage_Click);
            
            #line default
            #line hidden
            return;
            case 25:
            this.ToolsList = ((System.Windows.Controls.ListView)(target));
            
            #line 151 "..\..\..\MainWindow.xaml"
            this.ToolsList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ToolsList_SelectionChanged);
            
            #line default
            #line hidden
            return;
            case 26:
            this.CustomerNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 27:
            this.CustomerEmailInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 28:
            this.CustomerContactInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 29:
            this.CustomerPhoneInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 30:
            this.CustomerAddressInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 31:
            
            #line 202 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 32:
            
            #line 203 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 33:
            
            #line 204 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 34:
            this.CustomerList = ((System.Windows.Controls.ListView)(target));
            return;
            case 35:
            this.ToolIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 36:
            this.CustomerIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 37:
            this.DueDateInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 38:
            
            #line 234 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RentToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 39:
            
            #line 235 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ReturnToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 40:
            this.RentalIDInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 41:
            this.NewDueDateInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 42:
            
            #line 240 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ExtendRentalButton_Click);
            
            #line default
            #line hidden
            return;
            case 43:
            
            #line 241 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LoadOverdueRentals_Click);
            
            #line default
            #line hidden
            return;
            case 44:
            this.RentalsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 45:
            this.UserList = ((System.Windows.Controls.ListView)(target));
            return;
            case 46:
            
            #line 291 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadUserPhotoButton_Click);
            
            #line default
            #line hidden
            return;
            case 47:
            this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            
            #line 299 "..\..\..\MainWindow.xaml"
            this.PasswordBox.PasswordChanged += new System.Windows.RoutedEventHandler(this.PasswordBox_PasswordChanged);
            
            #line default
            #line hidden
            return;
            case 48:
            
            #line 323 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.NewUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 49:
            
            #line 324 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 50:
            
            #line 325 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SaveUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 51:
            this.RentalDurationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 52:
            this.LogoPreview = ((System.Windows.Controls.Image)(target));
            return;
            case 53:
            
            #line 342 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadLogoButton_Click);
            
            #line default
            #line hidden
            return;
            case 54:
            
            #line 343 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SaveSettingsButton_Click);
            
            #line default
            #line hidden
            return;
            case 55:
            
            #line 351 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SelectCsvFileButton_Click);
            
            #line default
            #line hidden
            return;
            case 56:
            this.SelectedCsvFile = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 57:
            
            #line 353 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportCsvButton_Click);
            
            #line default
            #line hidden
            return;
            case 58:
            
            #line 355 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ExportCsvButton_Click);
            
            #line default
            #line hidden
            return;
            case 59:
            
            #line 362 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RefreshLogsButton_Click);
            
            #line default
            #line hidden
            return;
            case 60:
            
            #line 363 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PurgeLogsButton_Click);
            
            #line default
            #line hidden
            return;
            case 61:
            this.ActivityLogsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 62:
            
            #line 389 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintInventoryReport_Click);
            
            #line default
            #line hidden
            return;
            case 63:
            
            #line 390 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintActiveRentalsReport_Click);
            
            #line default
            #line hidden
            return;
            case 64:
            
            #line 391 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintFullRentalReport_Click);
            
            #line default
            #line hidden
            return;
            case 65:
            
            #line 394 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintActivityLogReport_Click);
            
            #line default
            #line hidden
            return;
            case 66:
            
            #line 395 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintCustomerReport_Click);
            
            #line default
            #line hidden
            return;
            case 67:
            
            #line 396 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintUserReport_Click);
            
            #line default
            #line hidden
            return;
            case 68:
            
            #line 398 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintSummaryReport_Click);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            
            #line 20 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            case 11:
            
            #line 108 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\PasswordPromptWindow.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\PasswordPromptWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "D2A04DDA6404EF027DF5AE0912C61ABC480BA15D"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// PasswordPromptWindow
    /// </summary>
    public partial class PasswordPromptWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 16 "..\..\..\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox PasswordBox;
        
        #line default
        #line hidden
        
        
        #line 17 "..\..\..\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock ErrorTextBlock;
        
        #line default
        #line hidden
        
        
        #line 22 "..\..\..\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock ForgotPasswordTextBlock;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/passwordpromptwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\PasswordPromptWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            return;
            case 2:
            this.ErrorTextBlock = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 3:
            
            #line 19 "..\..\..\PasswordPromptWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OK_Click);
            
            #line default
            #line hidden
            return;
            case 4:
            
            #line 20 "..\..\..\PasswordPromptWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Cancel_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            this.ForgotPasswordTextBlock = ((System.Windows.Controls.TextBlock)(target));
            
            #line 25 "..\..\..\PasswordPromptWindow.xaml"
            this.ForgotPasswordTextBlock.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.ForgotPasswordTextBlock_MouseLeftButtonUp);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\PasswordPromptWindow.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\PasswordPromptWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "D2A04DDA6404EF027DF5AE0912C61ABC480BA15D"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// PasswordPromptWindow
    /// </summary>
    public partial class PasswordPromptWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector {
        
        
        #line 16 "..\..\..\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.PasswordBox PasswordBox;
        
        #line default
        #line hidden
        
        
        #line 17 "..\..\..\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock ErrorTextBlock;
        
        #line default
        #line hidden
        
        
        #line 22 "..\..\..\PasswordPromptWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock ForgotPasswordTextBlock;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/passwordpromptwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\PasswordPromptWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            this.PasswordBox = ((System.Windows.Controls.PasswordBox)(target));
            return;
            case 2:
            this.ErrorTextBlock = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 3:
            
            #line 19 "..\..\..\PasswordPromptWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OK_Click);
            
            #line default
            #line hidden
            return;
            case 4:
            
            #line 20 "..\..\..\PasswordPromptWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Cancel_Click);
            
            #line default
            #line hidden
            return;
            case 5:
            this.ForgotPasswordTextBlock = ((System.Windows.Controls.TextBlock)(target));
            
            #line 25 "..\..\..\PasswordPromptWindow.xaml"
            this.ForgotPasswordTextBlock.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.ForgotPasswordTextBlock_MouseLeftButtonUp);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e4bac307d2e2873daf09db248445bb65aaa972ae")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_2aysmrwe_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e4bac307d2e2873daf09db248445bb65aaa972ae")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_2aysmrwe_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_51qhjghj_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e4bac307d2e2873daf09db248445bb65aaa972ae")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_51qhjghj_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_cble125o_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e4bac307d2e2873daf09db248445bb65aaa972ae")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_cble125o_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_d4l4actx_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e4bac307d2e2873daf09db248445bb65aaa972ae")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_d4l4actx_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_f10y0qyz_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e4bac307d2e2873daf09db248445bb65aaa972ae")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_f10y0qyz_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_fdg2vivu_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e4bac307d2e2873daf09db248445bb65aaa972ae")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_fdg2vivu_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_imh2de2n_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e4bac307d2e2873daf09db248445bb65aaa972ae")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_imh2de2n_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_oei3owj2_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e4bac307d2e2873daf09db248445bb65aaa972ae")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_oei3owj2_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_rmxf4p2y_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e4bac307d2e2873daf09db248445bb65aaa972ae")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_rmxf4p2y_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_sh4oypgh_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e4bac307d2e2873daf09db248445bb65aaa972ae")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_sh4oypgh_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\App.xaml
--------------------------------------------------
<Application x:Class="ToolManagementAppV2.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Application.Resources>
    </Application.Resources>
</Application>


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\LoginWindow.xaml
--------------------------------------------------
<Window x:Class="ToolManagementAppV2.LoginWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:ToolManagementAppV2.Utilities"
        Title="Tool Inventory Management - Login" Height="500" Width="600" WindowStartupLocation="CenterScreen" Background="White">
    <Window.Resources>
        <local:NullToDefaultImageConverter x:Key="NullToDefaultImageConverter"/>
        <local:BooleanToAdminConverter x:Key="BooleanToAdminConverter"/>
    </Window.Resources>
    <DockPanel>
        <!-- Header -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <DockPanel>
                <!-- Logo via pack URI -->
                <Image Source="pack://application:,,,/Resources/DefaultLogo.png" Width="50" Height="50" />
                <TextBlock Text="Tool Inventory Management" FontWeight="Bold" FontSize="20" Margin="10" VerticalAlignment="Center"/>
            </DockPanel>
        </Border>
        <!-- Content -->
        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10">
            <TextBlock Text="Select User to Login:" FontSize="16" FontWeight="SemiBold" Margin="0,10,0,10" HorizontalAlignment="Center"/>
            <!-- ListBox for user selection -->
            <ListBox x:Name="UsersListBox" BorderThickness="0" Background="Transparent">
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Margin="10" Width="100">
                            <Button Click="UserButton_Click" Tag="{Binding}" BorderThickness="0" Background="Transparent">
                                <StackPanel>
                                    <!-- Use parameter "User" for default user photo -->
                                    <Image Source="{Binding PhotoBitmap, Converter={StaticResource NullToDefaultImageConverter}, ConverterParameter=User}" 
                         Width="80" Height="80" Stretch="Uniform"/>
                                    <TextBlock Text="{Binding UserName}" HorizontalAlignment="Center" Margin="0,5,0,0" FontWeight="SemiBold"/>
                                    <TextBlock Text="{Binding IsAdmin, Converter={StaticResource BooleanToAdminConverter}}" HorizontalAlignment="Center" FontSize="10" Foreground="Red"/>
                                </StackPanel>
                            </Button>
                        </StackPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </StackPanel>
    </DockPanel>
</Window>


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\MainWindow.xaml
--------------------------------------------------
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:local="clr-namespace:ToolManagementAppV2.Utilities"
        xmlns:av="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="av"
        x:Class="ToolManagementAppV2.MainWindow"
        Title="Tool Inventory Management"
        Height="650"
        Width="1600"
        WindowStartupLocation="CenterScreen">
    <DockPanel Margin="10">
        <!-- Global Resources -->
        <DockPanel.Resources>
            <local:CheckOutStatusConverter x:Key="CheckOutStatusConverter"/>
            <local:NullToDefaultImageConverter x:Key="NullToDefaultImageConverter"/>
            <local:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
            <local:NonEmptyStringToBoolConverter x:Key="NonEmptyStringToBoolConverter"/>
            <DataTemplate x:Key="CheckOutButtonTemplate">
                <Button Content="{Binding IsCheckedOut, Converter={StaticResource CheckOutStatusConverter}}"
                Click="CheckOutButton_Click"
                CommandParameter="{Binding ToolID}" />
            </DataTemplate>
        </DockPanel.Resources>

        <!-- Header with Logo and Title -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <DockPanel>
                <!-- Bind HeaderLogo property; if no logo is set, it returns the default logo -->
                <Image x:Name="HeaderIcon" Source="{Binding HeaderLogo}" Width="50" Height="50" />
                <TextBlock Text="Tool Inventory Management" FontWeight="Bold" FontSize="20" Margin="10" VerticalAlignment="Center" />
                <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" HorizontalAlignment="Right" Margin="5">
                    <Image Source="{Binding CurrentUserPhoto}" Width="50" Height="50" Margin="0,0,10,0" />
                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="{Binding CurrentUserName}" FontWeight="Bold" Margin="0,0,0,5" />
                        <Button Content="Logout" Click="LogoutButton_Click" Width="80" />
                    </StackPanel>
                </StackPanel>
            </DockPanel>
        </Border>


        <!-- Main Content Area -->
        <Grid DockPanel.Dock="Top">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <TabControl x:Name="MyTabControl" Margin="5" Grid.Row="0">
                <!-- Search Tools Tab -->
                <TabItem Header="Search Tools">
                    <Grid Margin="5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="150" />
                        </Grid.RowDefinitions>
                        <xctk:WatermarkTextBox x:Name="SearchInput" Width="300" Margin="10,0" Watermark="Search Tools..." TextChanged="SearchInput_TextChanged" />
                        <StackPanel Orientation="Horizontal">
                            <Button Content="Print Search Results" Click="PrintSearchResults_Click" Height="20" Width="160" Margin="10,0" />
                            <Button Content="Print My Checked-Out Tools" Click="PrintMyCheckedOutTools_Click" Height="20" Width="160" Margin="10,0" />
                        </StackPanel>
                        <ListView x:Name="SearchResultsList" ItemsSource="{Binding SearchResults}" Margin="10" Grid.Row="1" ScrollViewer.VerticalScrollBarVisibility="Auto">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Action" Width="80" CellTemplate="{StaticResource CheckOutButtonTemplate}"/>
                                    <GridViewColumn Header="ID" DisplayMemberBinding="{Binding ToolID}" Width="60"/>
                                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}" Width="120"/>
                                    <GridViewColumn Header="Location" DisplayMemberBinding="{Binding Location}" Width="70"/>
                                    <GridViewColumn Header="Part Number" DisplayMemberBinding="{Binding PartNumber}" Width="100"/>
                                    <GridViewColumn Header="Brand" DisplayMemberBinding="{Binding Brand}" Width="100"/>
                                    <GridViewColumn Header="Description" DisplayMemberBinding="{Binding Description}" Width="380"/>
                                    <GridViewColumn Header="Quantity" DisplayMemberBinding="{Binding QuantityOnHand}" Width="60"/>
                                    <GridViewColumn Header="Supplier" DisplayMemberBinding="{Binding Supplier}" Width="100"/>
                                    <GridViewColumn Header="Purchased Date" Width="80">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding PurchasedDate, StringFormat=\{0:yyyy-MM-dd\}}"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Notes" Width="200">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Notes}" TextWrapping="Wrap"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Image" Width="100">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Image Source="{Binding ToolImagePath, Converter={StaticResource NullToDefaultImageConverter}}" Height="50" Width="50" Stretch="Uniform"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                        <Button Content="Choose Profile Picture" Click="ChooseUserProfilePicButton_Click" Width="150" Height="20" HorizontalAlignment="Right" VerticalAlignment="Top" Grid.RowSpan="2" />
                        <!-- In MainWindow.xaml, update the Checked Out Tools ListView -->
                        <ListView x:Name="CheckedOutToolsList" ItemsSource="{Binding CheckedOutTools}" Margin="10" Grid.Row="2">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Action" Width="80">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Button Content="{Binding IsCheckedOut, Converter={StaticResource CheckOutStatusConverter}}" 
                                Click="CheckOutButton_Click" 
                                CommandParameter="{Binding ToolID}" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Tool ID" DisplayMemberBinding="{Binding ToolID}" Width="60" />
                                    <GridViewColumn Header="Description" DisplayMemberBinding="{Binding Description}" Width="380" />
                                    <GridViewColumn Header="Checked Out By" DisplayMemberBinding="{Binding CheckedOutBy}" Width="150" />
                                    <GridViewColumn Header="Checked Out Time" DisplayMemberBinding="{Binding CheckedOutTime, StringFormat=\{0:G\}}" Width="150" />
                                    <GridViewColumn Header="Location" DisplayMemberBinding="{Binding Location}" Width="100" />
                                </GridView>
                            </ListView.View>
                        </ListView>

                    </Grid>
                </TabItem>

                <!-- Tool Management Tab -->
                <TabItem Header="Tool Management">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="350" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <GroupBox Grid.Column="0" Header="Tool Details" Margin="5">
                            <StackPanel>
                                <xctk:WatermarkTextBox x:Name="ToolIDInput" Watermark="Tool ID (Required)" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="PartNumberInput" Watermark="Part Number" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="ToolNameInput" Watermark="Tool Name" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="BrandInput" Watermark="Brand" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="LocationInput" Watermark="Location" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="QuantityInput" Watermark="Quantity on Hand" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="SupplierInput" Watermark="Supplier" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="PurchasedInput" Watermark="Purchased Date (yyyy-MM-dd)" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="NotesInput" Watermark="Notes" TextWrapping="Wrap" Margin="0,5" Height="60" AcceptsReturn="True" />
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <Button Content="Add" Click="AddButton_Click" Margin="5" />
                                    <Button Content="Update" Click="UpdateButton_Click" Margin="5" />
                                    <Button Content="Delete" Click="DeleteButton_Click" Margin="5" />
                                    <Button Content="Add/Change Tool Image" Click="ChangeToolImage_Click" Margin="5" />
                                </StackPanel>
                            </StackPanel>
                        </GroupBox>
                        <ListView x:Name="ToolsList" Grid.Column="1" ItemsSource="{Binding Tools}" SelectionChanged="ToolsList_SelectionChanged" Margin="5">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="ID" DisplayMemberBinding="{Binding ToolID}" Width="60" />
                                    <GridViewColumn Header="Part Number" DisplayMemberBinding="{Binding PartNumber}" Width="100" />
                                    <GridViewColumn Header="Brand" DisplayMemberBinding="{Binding Brand}" Width="100" />
                                    <GridViewColumn Header="Location" DisplayMemberBinding="{Binding Location}" Width="100" />
                                    <GridViewColumn Header="Quantity" DisplayMemberBinding="{Binding QuantityOnHand}" Width="80" />
                                    <GridViewColumn Header="Supplier" DisplayMemberBinding="{Binding Supplier}" Width="100" />
                                    <GridViewColumn Header="Purchased" Width="120">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding PurchasedDate, StringFormat=\{0:yyyy-MM-dd\}}"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Notes">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Notes}" TextWrapping="Wrap" Width="400" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Image" Width="100">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Image Source="{Binding ToolImagePath, Converter={StaticResource NullToDefaultImageConverter}}" Height="50" Width="50" Stretch="Uniform"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>

                <!-- Customers Management Tab -->
                <TabItem Header="Customers">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="350" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <GroupBox Header="Customer Details" Grid.Column="0" Margin="5">
                            <StackPanel>
                                <xctk:WatermarkTextBox x:Name="CustomerNameInput" Watermark="Name" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerEmailInput" Watermark="Email" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerContactInput" Watermark="Customer Contact" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerPhoneInput" Watermark="Phone" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerAddressInput" Watermark="Address" Margin="5" />
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <Button Content="Add" Click="AddCustomerButton_Click" Margin="5" />
                                    <Button Content="Update" Click="UpdateCustomerButton_Click" Margin="5" />
                                    <Button Content="Delete" Click="DeleteCustomerButton_Click" Margin="5" />
                                </StackPanel>
                            </StackPanel>
                        </GroupBox>
                        <ListView x:Name="CustomerList" Grid.Column="1" ItemsSource="{Binding Customers}" Margin="5">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}" Width="150" />
                                    <GridViewColumn Header="Email" DisplayMemberBinding="{Binding Email}" Width="200" />
                                    <GridViewColumn Header="Contact" DisplayMemberBinding="{Binding Contact}" Width="200" />
                                    <GridViewColumn Header="Phone" DisplayMemberBinding="{Binding Phone}" Width="120" />
                                    <GridViewColumn Header="Address" DisplayMemberBinding="{Binding Address}" Width="250" />
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>

                <!-- Rentals Management Tab -->
                <TabItem Header="Rentals">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <StackPanel Orientation="Horizontal" Margin="10" Grid.Row="0">
                            <xctk:WatermarkTextBox x:Name="ToolIDForRentalInput" Watermark="Tool ID" Margin="5" Width="200" />
                            <xctk:WatermarkTextBox x:Name="CustomerIDForRentalInput" Watermark="Customer ID" Margin="5" Width="200" />
                            <xctk:WatermarkTextBox x:Name="DueDateInput" Watermark="Due Date (YYYY-MM-DD)" Margin="5" Width="200" />
                            <Button Content="Rent Tool" Click="RentToolButton_Click" Margin="5" />
                            <Button Content="Return Tool" Click="ReturnToolButton_Click" Margin="5" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="10" Grid.Row="1">
                            <xctk:WatermarkTextBox x:Name="RentalIDInput" Watermark="Rental ID" Margin="5" Width="100" />
                            <xctk:WatermarkTextBox x:Name="NewDueDateInput" Watermark="New Due Date (YYYY-MM-DD)" Margin="5" Width="200" />
                            <Button Content="Extend Rental" Click="ExtendRentalButton_Click" Margin="5" />
                            <Button Content="Load Overdue Rentals" Click="LoadOverdueRentals_Click" Margin="5" />
                        </StackPanel>
                        <ListView x:Name="RentalsList" ItemsSource="{Binding Rentals}" Grid.Row="2" Margin="10">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Rental ID" DisplayMemberBinding="{Binding RentalID}" Width="100" />
                                    <GridViewColumn Header="Tool ID" DisplayMemberBinding="{Binding ToolID}" Width="100" />
                                    <GridViewColumn Header="Customer ID" DisplayMemberBinding="{Binding CustomerID}" Width="100" />
                                    <GridViewColumn Header="Rental Date" DisplayMemberBinding="{Binding RentalDate, StringFormat=\{0:yyyy-MM-dd\}}" Width="150" />
                                    <GridViewColumn Header="Due Date" DisplayMemberBinding="{Binding DueDate, StringFormat=\{0:yyyy-MM-dd\}}" Width="150" />
                                    <GridViewColumn Header="Return Date" DisplayMemberBinding="{Binding ReturnDate, StringFormat=\{0:yyyy-MM-dd\}}" Width="150" />
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>

                <!-- Users Management Tab -->
                <TabItem Header="Users">
                    <Grid Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="250"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <StackPanel Grid.Column="0">
                            <TextBlock Text="Users" FontSize="16" FontWeight="Bold" Margin="5"/>
                            <ListView x:Name="UserList" ItemsSource="{Binding Users}" 
          SelectedItem="{Binding SelectedUser, Mode=TwoWay}" Margin="5">
                                <ListView.View>
                                    <GridView>
                                        <GridViewColumn Header="Name" DisplayMemberBinding="{Binding UserName}" Width="160"/>
                                        <GridViewColumn Header="Admin" Width="70">
                                            <GridViewColumn.CellTemplate>
                                                <DataTemplate>
                                                    <CheckBox IsChecked="{Binding IsAdmin}" IsEnabled="False" HorizontalAlignment="Center"/>
                                                </DataTemplate>
                                            </GridViewColumn.CellTemplate>
                                        </GridViewColumn>
                                    </GridView>
                                </ListView.View>
                            </ListView>
                        </StackPanel>
                        <!-- Right Panel: User Details -->
                        <StackPanel Grid.Column="1" Margin="10" VerticalAlignment="Top">
                            <TextBlock Text="User Details" FontSize="16" FontWeight="Bold" Margin="5"/>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <Border Width="100" Height="100" BorderBrush="Gray" BorderThickness="1">
                                    <Image Source="{Binding SelectedUser.PhotoBitmap, ConverterParameter=User, Converter={StaticResource NullToDefaultImageConverter}}" 
                 Stretch="UniformToFill"/>
                                </Border>
                                <Button Content="Change Photo" Click="UploadUserPhotoButton_Click" Margin="10,0,0,0" VerticalAlignment="Center"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="User Name:" Width="100" VerticalAlignment="Center"/>
                                <TextBox Text="{Binding SelectedUser.UserName, Mode=TwoWay}" Width="200"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Password:" Width="100" VerticalAlignment="Center"/>
                                <PasswordBox x:Name="PasswordBox" Width="200" PasswordChanged="PasswordBox_PasswordChanged"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Email:" Width="100" VerticalAlignment="Center"/>
                                <TextBox Text="{Binding SelectedUser.Email, Mode=TwoWay}" Width="200"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Phone:" Width="100" VerticalAlignment="Center"/>
                                <TextBox Text="{Binding SelectedUser.Phone, Mode=TwoWay}" Width="200"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Address:" Width="100" VerticalAlignment="Center"/>
                                <TextBox Text="{Binding SelectedUser.Address, Mode=TwoWay}" Width="200"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Role:" Width="100" VerticalAlignment="Center"/>
                                <TextBox Text="{Binding SelectedUser.Role, Mode=TwoWay}" Width="200"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" Margin="5">
                                <TextBlock Text="Is Admin:" Width="100" VerticalAlignment="Center"/>
                                <CheckBox IsChecked="{Binding SelectedUser.IsAdmin, Mode=TwoWay}" 
              IsEnabled="{Binding UserPassword, Converter={StaticResource NonEmptyStringToBoolConverter}, UpdateSourceTrigger=PropertyChanged}" />
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="10">
                                <Button Content="New User" Click="NewUserButton_Click" Width="100" Margin="5"/>
                                <Button Content="Delete User" Click="DeleteUserButton_Click" Width="100" Margin="5"/>
                                <Button Content="Save" Click="SaveUserButton_Click" Width="100" Margin="5"/>
                            </StackPanel>
                        </StackPanel>
                    </Grid>
                </TabItem>


                <!-- Settings Tab -->
                <TabItem Header="Settings">
                    <StackPanel Orientation="Vertical" Margin="10">
                        <TextBlock Text="Application Settings" FontWeight="Bold" FontSize="16" Margin="5" />
                        <StackPanel Orientation="Horizontal" Margin="5">
                            <TextBlock Text="Default Rental Duration (days):" VerticalAlignment="Center" Width="200" />
                            <xctk:WatermarkTextBox x:Name="RentalDurationInput" Watermark="7" Width="100" Margin="5" />
                        </StackPanel>
                        <TextBlock Text="Company Logo:" FontWeight="Bold" Margin="5" />
                        <Image x:Name="LogoPreview" Width="150" Height="150" Margin="5" Stretch="Uniform" HorizontalAlignment="Left"/>
                        <Button Content="Upload Logo" Click="UploadLogoButton_Click" Margin="5" HorizontalAlignment="Left" />
                        <Button Content="Save Settings" Click="SaveSettingsButton_Click" Margin="5" HorizontalAlignment="Left" />
                    </StackPanel>
                </TabItem>

                <!-- Import/Export Tab -->
                <TabItem Header="Import/Export">
                    <StackPanel Margin="10">
                        <TextBlock Text="Import Tools" FontWeight="Bold" FontSize="16" Margin="5" />
                        <Button Content="Select CSV File" Click="SelectCsvFileButton_Click" Margin="5" />
                        <TextBlock x:Name="SelectedCsvFile" Text="No file selected" Margin="5" />
                        <Button Content="Import" Click="ImportCsvButton_Click" Margin="5" />
                        <TextBlock Text="Export Tools" FontWeight="Bold" FontSize="16" Margin="5" />
                        <Button Content="Export to CSV" Click="ExportCsvButton_Click" Margin="5" />
                    </StackPanel>
                </TabItem>

                <TabItem Header="Activity Logs">
                    <Grid>
                        <StackPanel Orientation="Horizontal" Margin="10">
                            <Button Content="Refresh Logs" Click="RefreshLogsButton_Click" Margin="5" />
                            <Button Content="Purge Logs" Click="PurgeLogsButton_Click" Margin="5" />
                        </StackPanel>
                        <ListView x:Name="ActivityLogsList" Margin="10" VerticalAlignment="Stretch">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Log ID" DisplayMemberBinding="{Binding LogID}" Width="80" />
                                    <GridViewColumn Header="User ID" DisplayMemberBinding="{Binding UserID}" Width="80" />
                                    <GridViewColumn Header="User Name" DisplayMemberBinding="{Binding UserName}" Width="150" />
                                    <GridViewColumn Header="Action" DisplayMemberBinding="{Binding Action}" Width="400" />
                                    <GridViewColumn Header="Timestamp" Width="150">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Timestamp, StringFormat=\{0:yyyy-MM-dd HH:mm:ss\}}"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>
                <TabItem Header="Reports">
                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                        <StackPanel Margin="10">
                            <TextBlock Text="Generate and Print Reports" FontWeight="Bold" FontSize="16" Margin="0,0,0,10"/>
                            <WrapPanel Orientation="Horizontal">
                                <Button Content="Print Inventory Report" Click="PrintInventoryReport_Click" Margin="5" Width="200"/>
                                <Button Content="Print Active Rentals Report" Click="PrintActiveRentalsReport_Click" Margin="5" Width="200"/>
                                <Button Content="Print Full Rental History" Click="PrintFullRentalReport_Click" Margin="5" Width="200"/>
                            </WrapPanel>
                            <WrapPanel Orientation="Horizontal">
                                <Button Content="Print Activity Log Report" Click="PrintActivityLogReport_Click" Margin="5" Width="200"/>
                                <Button Content="Print Customer Report" Click="PrintCustomerReport_Click" Margin="5" Width="200"/>
                                <Button Content="Print User Report" Click="PrintUserReport_Click" Margin="5" Width="200"/>
                            </WrapPanel>
                            <Button Content="Print Summary Report" Click="PrintSummaryReport_Click" Margin="5" Width="200"/>
                        </StackPanel>
                    </ScrollViewer>
                </TabItem>


            </TabControl>

            <!-- Status Bar -->
            <StatusBar Grid.Row="1" Height="25" Background="LightGray">
                <StatusBarItem Content="Ready" />
            </StatusBar>
        </Grid>
    </DockPanel>
</Window>


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\PasswordPromptWindow.xaml
--------------------------------------------------
<!-- PasswordPromptWindow.xaml – Layout remains the same -->
<Window x:Class="ToolManagementAppV2.PasswordPromptWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Enter Password" Height="250" Width="350" WindowStartupLocation="CenterScreen"
        Background="White" WindowStyle="ToolWindow" ResizeMode="NoResize">
    <Grid Margin="20">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <TextBlock Text="Enter your password:" FontSize="14" FontWeight="Bold" Grid.Row="0" Margin="0,0,0,10"/>
        <PasswordBox x:Name="PasswordBox" Grid.Row="1" Height="30" FontSize="14"/>
        <TextBlock x:Name="ErrorTextBlock" Grid.Row="2" Foreground="Red" FontSize="12" Visibility="Collapsed" Margin="0,5,0,5"/>
        <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button Content="OK" Width="75" Margin="5" Click="OK_Click"/>
            <Button Content="Cancel" Width="75" Margin="5" Click="Cancel_Click"/>
        </StackPanel>
        <TextBlock x:Name="ForgotPasswordTextBlock" Text="Forgot your password?" Foreground="Blue" 
               TextDecorations="Underline" FontSize="12" Visibility="Collapsed" Cursor="Hand" 
               Grid.Row="4" HorizontalAlignment="Center" Margin="0,10,0,0" 
               MouseLeftButtonUp="ForgotPasswordTextBlock_MouseLeftButtonUp"/>
    </Grid>
</Window>



Program Code Dump
==============================
File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\App.xaml.cs
--------------------------------------------------
using System.Configuration;
using System.Data;
using System.Windows;

namespace ToolManagementAppV2
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
    }

}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\AssemblyInfo.cs
--------------------------------------------------
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\MainWindow.xaml.cs
--------------------------------------------------
using System;
using System.Data.SQLite;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Services;
using ToolManagementAppV2.ViewModels;

namespace ToolManagementAppV2
{
    public partial class MainWindow : Window
    {
        private readonly CustomerService _customerService;
        private readonly RentalService _rentalService;
        private readonly ToolService _toolService;
        private readonly UserService _userService;
        private readonly SettingsService _settingsService;

        public MainWindow()
        {
            InitializeComponent();

            var dbPath = "tool_inventory.db";
            var databaseService = new DatabaseService(dbPath);
            _toolService = new ToolService(databaseService);
            _customerService = new CustomerService(databaseService);
            _rentalService = new RentalService(databaseService);
            _userService = new UserService(databaseService);
            _settingsService = new SettingsService(databaseService);

            try
            {
                // Load essential data
                RefreshToolList();
                RefreshUserList();
                RefreshCustomerList();
                RefreshRentalList();

                // Load settings
                LoadSettings();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error initializing data: {ex.Message}", "Initialization Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }

            // Set up the ViewModel with all required services
            DataContext = new MainViewModel(_toolService, _userService, _settingsService);
        }


        private void AddButton_Click(object sender, RoutedEventArgs e)
        {
            var newTool = new Tool
            {
                Name = ToolNameInput.Text, // Use the Name input
                ToolID = ToolIDInput.Text,
                PartNumber = PartNumberInput.Text,
                Brand = BrandInput.Text,
                Location = LocationInput.Text,
                QuantityOnHand = int.Parse(QuantityInput.Text),
                Supplier = SupplierInput.Text,
                PurchasedDate = DateTime.TryParse(PurchasedInput.Text, out var date) ? date : null,
                Notes = NotesInput.Text
            };

            _toolService.AddTool(newTool);
            RefreshToolList();
        }


        private void UpdateButton_Click(object sender, RoutedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool selectedTool)
            {
                selectedTool.PartNumber = PartNumberInput.Text;
                selectedTool.Brand = BrandInput.Text;
                selectedTool.Location = LocationInput.Text;
                selectedTool.QuantityOnHand = int.Parse(QuantityInput.Text);
                selectedTool.Supplier = SupplierInput.Text;
                selectedTool.PurchasedDate = !string.IsNullOrEmpty(PurchasedInput.Text) && DateTime.TryParse(PurchasedInput.Text, out var date) ? date : null;
                selectedTool.Notes = NotesInput.Text;

                _toolService.UpdateTool(selectedTool);
                RefreshToolList();
            }
        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool selectedTool)
            {
                _toolService.DeleteTool(selectedTool.ToolID);
                RefreshToolList();
            }
        }

        private void ChangeToolImage_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Change Tool Image Button Clicked!");
        }

        private void PrintSearchResults_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Print Search Results Button Clicked!");
        }

        private void PrintMyCheckedOutTools_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Print My Checked-Out Tools Button Clicked!");
        }

        private void LogoutButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Logout Button Clicked!");
        }

        private void ToolsList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool selectedTool)
            {
                ToolIDInput.Text = selectedTool.ToolID;
                PartNumberInput.Text = selectedTool.PartNumber;
                BrandInput.Text = selectedTool.Brand;
                LocationInput.Text = selectedTool.Location;
                QuantityInput.Text = selectedTool.QuantityOnHand.ToString();
                SupplierInput.Text = selectedTool.Supplier;
                PurchasedInput.Text = selectedTool.PurchasedDate?.ToString("yyyy-MM-dd");
                NotesInput.Text = selectedTool.Notes;
            }
        }

        private void ChooseUserProfilePicButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("Choose Profile Picture Button Clicked!");
        }

        private void CheckOutButton_Click(object sender, RoutedEventArgs e)
        {
            if (sender is Button button && button.CommandParameter is string toolId)
            {
                MessageBox.Show($"CheckOut/CheckIn Button Clicked for Tool ID: {toolId}");
            }
        }

        private void AddCustomerButton_Click(object sender, RoutedEventArgs e)
        {
            var customer = new Customer
            {
                Name = CustomerNameInput.Text,
                Email = CustomerEmailInput.Text,
                Contact = CustomerContactInput.Text,
                Phone = CustomerPhoneInput.Text,
                Address = CustomerAddressInput.Text
            };

            _customerService.AddCustomer(customer);
            RefreshCustomerList();
        }

        private void UpdateCustomerButton_Click(object sender, RoutedEventArgs e)
        {
            if (CustomerList.SelectedItem is Customer customer)
            {
                customer.Name = CustomerNameInput.Text;
                customer.Email = CustomerEmailInput.Text;
                customer.Contact = CustomerContactInput.Text;
                customer.Phone = CustomerPhoneInput.Text;
                customer.Address = CustomerAddressInput.Text;

                _customerService.UpdateCustomer(customer);
                RefreshCustomerList();
            }
        }

        private void DeleteCustomerButton_Click(object sender, RoutedEventArgs e)
        {
            if (CustomerList.SelectedItem is Customer customer)
            {
                _customerService.DeleteCustomer(customer.CustomerID);
                RefreshCustomerList();
            }
        }

        private void CustomerList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (CustomerList.SelectedItem is Customer customer)
            {
                CustomerNameInput.Text = customer.Name;
                CustomerEmailInput.Text = customer.Email;
                CustomerContactInput.Text = customer.Contact;
                CustomerPhoneInput.Text = customer.Phone;
                CustomerAddressInput.Text = customer.Address;
            }
        }

        private void RentToolButton_Click(object sender, RoutedEventArgs e)
        {
            if (ToolsList.SelectedItem is Tool selectedTool && CustomerList.SelectedItem is Customer selectedCustomer)
            {
                _rentalService.RentTool(selectedTool.ToolID, selectedCustomer.CustomerID, DateTime.Now, DateTime.Now.AddDays(7));
                RefreshRentalList();
                RefreshToolList();
            }
        }

        private void ReturnToolButton_Click(object sender, RoutedEventArgs e)
        {
            if (RentalsList.SelectedItem is Rental rental)
            {
                _rentalService.ReturnTool(rental.RentalID, DateTime.Now);
                RefreshRentalList();
                RefreshToolList();
            }
        }

        private void AddUserButton_Click(object sender, RoutedEventArgs e)
        {
            var newUser = new User
            {
                UserName = UserNameInput.Text,
                IsAdmin = IsAdminCheckbox.IsChecked == true,
                UserPhotoPath = _selectedUserPhotoPath // Path saved during photo upload
            };

            _userService.AddUser(newUser);
            RefreshUserList();
            ClearUserInputFields(); // Optionally clear input fields after adding
            MessageBox.Show("User added successfully!");
        }



        private void UpdateUserButton_Click(object sender, RoutedEventArgs e)
        {
            if (UserList.SelectedItem is User user)
            {
                user.UserName = UserNameInput.Text;
                user.IsAdmin = IsAdminCheckbox.IsChecked ?? false;
                _userService.UpdateUser(user);
                RefreshUserList();
            }
        }

        private void DeleteUserButton_Click(object sender, RoutedEventArgs e)
        {
            if (UserList.SelectedItem is User user)
            {
                _userService.DeleteUser(user.UserID);
                RefreshUserList();
            }
        }

        private void SaveSettingsButton_Click(object sender, RoutedEventArgs e)
        {
            if (int.TryParse(RentalDurationInput.Text, out var rentalDuration))
            {
                _settingsService.SaveSetting("DefaultRentalDuration", rentalDuration.ToString());
                MessageBox.Show("Settings saved successfully!", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
            {
                MessageBox.Show("Invalid rental duration.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void UploadLogoButton_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Image Files (*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg",
                Title = "Select Company Logo"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                var selectedLogoPath = openFileDialog.FileName;
                LogoPreview.Source = new BitmapImage(new Uri(selectedLogoPath));
                _settingsService.SaveSetting("CompanyLogoPath", selectedLogoPath);
                UpdateHeaderLogo();
            }
        }


        private void SelectCsvFileButton_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "CSV Files|*.csv"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                SelectedCsvFile.Text = openFileDialog.FileName;
            }
        }

        private void ImportCsvButton_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(SelectedCsvFile.Text))
            {
                _toolService.ImportToolsFromCsv(SelectedCsvFile.Text);
                RefreshToolList();
                MessageBox.Show("Tools imported successfully!");
            }
        }

        private void ExportCsvButton_Click(object sender, RoutedEventArgs e)
        {
            _toolService.ExportToolsToCsv("tools_export.csv");
            MessageBox.Show("Tools exported successfully!");
        }

        private string _selectedUserPhotoPath; // To store the selected photo path temporarily

        private void UploadUserPhotoButton_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog
            {
                Filter = "Image Files (*.png;*.jpg;*.jpeg)|*.png;*.jpg;*.jpeg",
                Title = "Select User Photo"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                _selectedUserPhotoPath = openFileDialog.FileName;

                // Update preview in the Users tab
                var userPhotoImage = new BitmapImage(new Uri(_selectedUserPhotoPath));
            }
        }























        private void RefreshToolList()
        {
            try
            {
                ToolsList.ItemsSource = _toolService.GetAllTools();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading tools: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RefreshUserList()
        {
            try
            {
                var users = _userService.GetAllUsers();
                foreach (var user in users)
                {
                    if (!string.IsNullOrEmpty(user.UserPhotoPath) && System.IO.File.Exists(user.UserPhotoPath))
                    {
                        user.PhotoBitmap = new BitmapImage(new Uri(user.UserPhotoPath))
                        {
                            CacheOption = BitmapCacheOption.OnLoad
                        };
                    }
                }
                UserList.ItemsSource = users;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading users: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }


        private void RefreshCustomerList()
        {
            try
            {
                CustomerList.ItemsSource = _customerService.GetAllCustomers();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading customers: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RefreshRentalList()
        {
            try
            {
                RentalsList.ItemsSource = _rentalService.GetActiveRentals();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading rentals: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void SearchInput_TextChanged(object sender, TextChangedEventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(SearchInput.Text))
                {
                    SearchResultsList.ItemsSource = _toolService.SearchTools(SearchInput.Text);
                }
                else
                {
                    SearchResultsList.ItemsSource = null; // Clear search results if input is empty
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error performing search: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void UpdateHeaderLogo()
        {
            try
            {
                var logoPath = _settingsService.GetSetting("CompanyLogoPath");
                HeaderIcon.Source = !string.IsNullOrEmpty(logoPath) && System.IO.File.Exists(logoPath)
                    ? new BitmapImage(new Uri(logoPath))
                    : new BitmapImage(new Uri("pack://application:,,,/Resources/DefaultLogo.png"));
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load header logo: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }



        private void ClearUserInputFields()
        {
            UserNameInput.Text = string.Empty;
            IsAdminCheckbox.IsChecked = false;
            _selectedUserPhotoPath = null; // Clear selected photo path
        }


        private void LoadSettings()
        {
            try
            {
                var companyLogoPath = _settingsService.GetSetting("CompanyLogoPath");
                if (!string.IsNullOrEmpty(companyLogoPath))
                {
                    LogoPreview.Source = new System.Windows.Media.Imaging.BitmapImage(new Uri(companyLogoPath));
                    HeaderIcon.Source = LogoPreview.Source;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load settings: {ex.Message}", "Settings Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }
    }
}

File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\ActivityLog.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ToolManagementAppV2.Models
{
    public class ActivityLog
    {
        public int LogID { get; set; }
        public int UserID { get; set; }
        public string UserName { get; set; }
        public string Action { get; set; }
        public DateTime Timestamp { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\Customer.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ToolManagementAppV2.Models
{
    public class Customer
    {
        public int CustomerID { get; set; }
        public string Name { get; set; }
        public string Contact { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public string Address { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\Rental.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ToolManagementAppV2.Models
{
    public class Rental
    {
        public int RentalID { get; set; }
        public int ToolID { get; set; }
        public int CustomerID { get; set; }
        public DateTime RentalDate { get; set; }
        public DateTime DueDate { get; set; }
        public DateTime? ReturnDate { get; set; } // Nullable to indicate if returned or not
        public string? Status { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\Tool.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ToolManagementAppV2.Models
{
    public class Tool
    {
        public string ToolID { get; set; }
        public string Name { get; set; }
        public string PartNumber { get; set; }
        public string Description { get; set; }
        public string Brand { get; set; }
        public string Location { get; set; }
        public int QuantityOnHand { get; set; }
        public string Supplier { get; set; }
        public DateTime? PurchasedDate { get; set; }
        public string Notes { get; set; }
        public bool IsCheckedOut { get; set; }
        public string CheckedOutBy { get; set; }
        public DateTime? CheckedOutTime { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Models\User.cs
--------------------------------------------------
using System.Windows.Media.Imaging;

namespace ToolManagementAppV2.Models
{
    public class User
    {
        public int UserID { get; set; }
        public string UserName { get; set; }
        public string UserPhotoPath { get; set; }
        public bool IsAdmin { get; set; }

        // BitmapImage to bind photos in the UI
        public BitmapImage PhotoBitmap { get; set; }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\CustomerService.cs
--------------------------------------------------
using System.Collections.Generic;
using System.Data.SQLite;
using ToolManagementAppV2.Models;

namespace ToolManagementAppV2.Services
{
    public class CustomerService
    {
        private readonly DatabaseService _dbService;

        public CustomerService(DatabaseService dbService)
        {
            _dbService = dbService;
        }

        public List<Customer> GetAllCustomers()
        {
            var customers = new List<Customer>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT * FROM Customers";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                customers.Add(new Customer
                {
                    CustomerID = Convert.ToInt32(reader["CustomerID"]),
                    Name = reader["Name"].ToString(),
                    Email = reader["Email"].ToString(),
                    Contact = reader["Contact"].ToString(),
                    Phone = reader["Phone"].ToString(),
                    Address = reader["Address"].ToString()
                });
            }

            return customers;
        }


        public void AddCustomer(Customer customer)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
        INSERT INTO Customers (Name, Email, Contact, Phone, Address)
        VALUES (@Name, @Email, @Contact, @Phone, @Address)";

            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Name", customer.Name);
            command.Parameters.AddWithValue("@Email", customer.Email);
            command.Parameters.AddWithValue("@Contact", customer.Contact);
            command.Parameters.AddWithValue("@Phone", customer.Phone);
            command.Parameters.AddWithValue("@Address", customer.Address);
            command.ExecuteNonQuery();
        }


        public void UpdateCustomer(Customer customer)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
        UPDATE Customers
        SET Name = @Name, Email = @Email, Contact = @Contact, Phone = @Phone, Address = @Address
        WHERE CustomerID = @CustomerID";

            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Name", customer.Name);
            command.Parameters.AddWithValue("@Email", customer.Email);
            command.Parameters.AddWithValue("@Contact", customer.Contact);
            command.Parameters.AddWithValue("@Phone", customer.Phone);
            command.Parameters.AddWithValue("@Address", customer.Address);
            command.Parameters.AddWithValue("@CustomerID", customer.CustomerID);
            command.ExecuteNonQuery();
        }


        public void DeleteCustomer(int customerID)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "DELETE FROM Customers WHERE CustomerID = @CustomerID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@CustomerID", customerID);
            command.ExecuteNonQuery();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\DatabaseService.cs
--------------------------------------------------
using System.Data.SQLite;

namespace ToolManagementAppV2.Services
{
    public class DatabaseService
    {
        public string ConnectionString { get; }

        public DatabaseService(string dbPath)
        {
            ConnectionString = $"Data Source={dbPath};Version=3;";
            InitializeDatabase();
        }

        private void InitializeDatabase()
        {
            using var connection = new SQLiteConnection(ConnectionString);
            connection.Open();

            var createTables = @"
                -- Tools Table
                CREATE TABLE IF NOT EXISTS Tools (
                    ToolID INTEGER PRIMARY KEY AUTOINCREMENT,
                    Name TEXT NOT NULL,
                    Description TEXT,
                    Location TEXT,
                    Brand TEXT,
                    PartNumber TEXT,
                    Supplier TEXT,
                    PurchasedDate DATETIME,
                    Notes TEXT,
                    AvailableQuantity INTEGER NOT NULL DEFAULT 0,
                    RentedQuantity INTEGER NOT NULL DEFAULT 0,
                    IsCheckedOut INTEGER NOT NULL DEFAULT 0,
                    CheckedOutBy TEXT,
                    CheckedOutTime DATETIME
                );

                -- Users Table
                CREATE TABLE IF NOT EXISTS Users (
                    UserID INTEGER PRIMARY KEY AUTOINCREMENT,
                    UserName TEXT NOT NULL,
                    UserPhotoPath TEXT,
                    IsAdmin INTEGER NOT NULL DEFAULT 0
                );

                -- Customers Table
                CREATE TABLE IF NOT EXISTS Customers (
                    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,
                    Name TEXT NOT NULL,
                    Email TEXT,
                    Contact TEXT,
                    Phone TEXT,
                    Address TEXT
                );

                -- Rentals Table
                CREATE TABLE IF NOT EXISTS Rentals (
                    RentalID INTEGER PRIMARY KEY AUTOINCREMENT,
                    ToolID INTEGER NOT NULL,
                    CustomerID INTEGER NOT NULL,
                    RentalDate DATETIME NOT NULL,
                    DueDate DATETIME NOT NULL,
                    ReturnDate DATETIME,
                    Status TEXT NOT NULL DEFAULT 'Rented',
                    FOREIGN KEY (ToolID) REFERENCES Tools (ToolID),
                    FOREIGN KEY (CustomerID) REFERENCES Customers (CustomerID)
                );

                -- Activity Logs Table
                CREATE TABLE IF NOT EXISTS ActivityLogs (
                    LogID INTEGER PRIMARY KEY AUTOINCREMENT,
                    UserID INTEGER,
                    UserName TEXT,
                    Action TEXT,
                    Timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (UserID) REFERENCES Users (UserID)
                );

                -- Settings Table for configuration options
                CREATE TABLE IF NOT EXISTS Settings (
                    Key TEXT PRIMARY KEY,
                    Value TEXT
                );
            ";

            using var command = new SQLiteCommand(createTables, connection);
            command.ExecuteNonQuery();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\RentalService.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.SQLite;
using ToolManagementAppV2.Models;

namespace ToolManagementAppV2.Services
{
    public class RentalService
    {
        private readonly DatabaseService _dbService;

        public RentalService(DatabaseService dbService)
        {
            _dbService = dbService;
        }

        public void RentTool(string toolID, int customerID, DateTime rentalDate, DateTime dueDate)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var rentalQuery = @"
        INSERT INTO Rentals (ToolID, CustomerID, RentalDate, DueDate)
        VALUES (@ToolID, @CustomerID, @RentalDate, @DueDate);
        
        UPDATE Tools
        SET AvailableQuantity = AvailableQuantity - 1, RentedQuantity = RentedQuantity + 1
        WHERE ToolID = @ToolID AND AvailableQuantity > 0";

            using var command = new SQLiteCommand(rentalQuery, connection);
            command.Parameters.AddWithValue("@ToolID", toolID);
            command.Parameters.AddWithValue("@CustomerID", customerID);
            command.Parameters.AddWithValue("@RentalDate", rentalDate);
            command.Parameters.AddWithValue("@DueDate", dueDate);
            command.ExecuteNonQuery();
        }


        public void ReturnTool(int rentalID, DateTime returnDate)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var returnQuery = @"
            UPDATE Rentals
            SET ReturnDate = @ReturnDate, Status = 'Returned'
            WHERE RentalID = @RentalID;

            UPDATE Tools
            SET AvailableQuantity = AvailableQuantity + 1, RentedQuantity = RentedQuantity - 1
            WHERE ToolID = (SELECT ToolID FROM Rentals WHERE RentalID = @RentalID)";

            using var command = new SQLiteCommand(returnQuery, connection);
            command.Parameters.AddWithValue("@RentalID", rentalID);
            command.Parameters.AddWithValue("@ReturnDate", returnDate);
            command.ExecuteNonQuery();
        }

        public List<Rental> GetActiveRentals()
        {
            var rentals = new List<Rental>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT * FROM Rentals WHERE Status = 'Rented'";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                rentals.Add(new Rental
                {
                    RentalID = Convert.ToInt32(reader["RentalID"]),
                    ToolID = Convert.ToInt32(reader["ToolID"]),
                    CustomerID = Convert.ToInt32(reader["CustomerID"]),
                    RentalDate = Convert.ToDateTime(reader["RentalDate"]),
                    DueDate = Convert.ToDateTime(reader["DueDate"]),
                    ReturnDate = reader["ReturnDate"] as DateTime?,
                    Status = reader["Status"].ToString()
                });
            }

            return rentals;
        }

        public void UpdateRentalStatus(int rentalID, string status)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "UPDATE Rentals SET Status = @Status WHERE RentalID = @RentalID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Status", status);
            command.Parameters.AddWithValue("@RentalID", rentalID);
            command.ExecuteNonQuery();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\SettingsService.cs
--------------------------------------------------
using System.Collections.Generic;
using System.Data.SQLite;

namespace ToolManagementAppV2.Services
{
    public class SettingsService
    {
        private readonly DatabaseService _dbService;

        public SettingsService(DatabaseService dbService)
        {
            _dbService = dbService;
        }

        public void SaveSetting(string key, string value)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
                INSERT INTO Settings (Key, Value) 
                VALUES (@Key, @Value)
                ON CONFLICT(Key) DO UPDATE SET Value = @Value";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Key", key);
            command.Parameters.AddWithValue("@Value", value);
            command.ExecuteNonQuery();
        }

        public string GetSetting(string key)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT Value FROM Settings WHERE Key = @Key";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Key", key);
            return command.ExecuteScalar()?.ToString();
        }

        public Dictionary<string, string> GetAllSettings()
        {
            var settings = new Dictionary<string, string>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT Key, Value FROM Settings";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                settings[reader["Key"].ToString()] = reader["Value"].ToString();
            }

            return settings;
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\ToolService.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.IO;
using ToolManagementAppV2.Models;

namespace ToolManagementAppV2.Services
{
    public class ToolService
    {
        private readonly DatabaseService _dbService;

        public ToolService(DatabaseService dbService)
        {
            _dbService = dbService;
        }

        public List<Tool> GetAllTools()
        {
            var tools = new List<Tool>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT * FROM Tools";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                tools.Add(new Tool
                {
                    ToolID = reader["ToolID"].ToString(),
                    Description = reader["Description"].ToString(),
                    Location = reader["Location"].ToString(),
                    Brand = reader["Brand"].ToString(),
                    IsCheckedOut = reader["IsCheckedOut"].ToString() == "1",
                    CheckedOutBy = reader["CheckedOutBy"].ToString(),
                    CheckedOutTime = reader["CheckedOutTime"] is DBNull ? null : Convert.ToDateTime(reader["CheckedOutTime"])
                });
            }

            return tools;
        }

        public void AddTool(Tool tool)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
        INSERT INTO Tools (Name, Description, Location, Brand, PartNumber, Supplier, PurchasedDate, Notes, AvailableQuantity, RentedQuantity, IsCheckedOut)
        VALUES (@Name, @Description, @Location, @Brand, @PartNumber, @Supplier, @PurchasedDate, @Notes, @AvailableQuantity, @RentedQuantity, @IsCheckedOut)";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@Name", tool.Name);
            command.Parameters.AddWithValue("@Description", tool.Description);
            command.Parameters.AddWithValue("@Location", tool.Location);
            command.Parameters.AddWithValue("@Brand", tool.Brand);
            command.Parameters.AddWithValue("@PartNumber", tool.PartNumber);
            command.Parameters.AddWithValue("@Supplier", tool.Supplier ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@PurchasedDate", tool.PurchasedDate ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@Notes", tool.Notes ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@AvailableQuantity", tool.QuantityOnHand);
            command.Parameters.AddWithValue("@RentedQuantity", 0); // New tools start with no rentals
            command.Parameters.AddWithValue("@IsCheckedOut", 0);  // Default to not checked out
            command.ExecuteNonQuery();
        }

        public void UpdateTool(Tool tool)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
            UPDATE Tools 
            SET Description = @Description, Location = @Location, Brand = @Brand,
                IsCheckedOut = @IsCheckedOut, CheckedOutBy = @CheckedOutBy, CheckedOutTime = @CheckedOutTime
            WHERE ToolID = @ToolID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@ToolID", tool.ToolID);
            command.Parameters.AddWithValue("@Description", tool.Description);
            command.Parameters.AddWithValue("@Location", tool.Location);
            command.Parameters.AddWithValue("@Brand", tool.Brand);
            command.Parameters.AddWithValue("@IsCheckedOut", tool.IsCheckedOut ? 1 : 0);
            command.Parameters.AddWithValue("@CheckedOutBy", tool.CheckedOutBy ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@CheckedOutTime", tool.CheckedOutTime ?? (object)DBNull.Value);
            command.ExecuteNonQuery();
        }

        public void UpdateToolQuantities(string toolID, int quantityChange, bool isRental)
        {
            if (quantityChange <= 0) throw new ArgumentException("Quantity change must be greater than 0.");

            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = isRental
                ? "UPDATE Tools SET AvailableQuantity = AvailableQuantity - @QuantityChange, RentedQuantity = RentedQuantity + @QuantityChange WHERE ToolID = @ToolID AND AvailableQuantity >= @QuantityChange"
                : "UPDATE Tools SET AvailableQuantity = AvailableQuantity + @QuantityChange, RentedQuantity = RentedQuantity - @QuantityChange WHERE ToolID = @ToolID AND RentedQuantity >= @QuantityChange";

            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@ToolID", toolID);
            command.Parameters.AddWithValue("@QuantityChange", quantityChange);
            var rowsAffected = command.ExecuteNonQuery();

            if (rowsAffected == 0)
                throw new InvalidOperationException("Quantity update failed. Ensure sufficient stock or valid tool ID.");
        }

        public void DeleteTool(string toolID)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "DELETE FROM Tools WHERE ToolID = @ToolID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@ToolID", toolID);
            command.ExecuteNonQuery();
        }

        public List<Tool> SearchTools(string searchTerm)
        {
            var tools = new List<Tool>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
            SELECT * FROM Tools
            WHERE ToolID LIKE @SearchTerm OR Description LIKE @SearchTerm OR Location LIKE @SearchTerm";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@SearchTerm", $"%{searchTerm}%");
            using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                tools.Add(new Tool
                {
                    ToolID = reader["ToolID"].ToString(),
                    Description = reader["Description"].ToString(),
                    Location = reader["Location"].ToString(),
                    Brand = reader["Brand"].ToString(),
                    IsCheckedOut = reader["IsCheckedOut"].ToString() == "1",
                    CheckedOutBy = reader["CheckedOutBy"].ToString(),
                    CheckedOutTime = reader["CheckedOutTime"] is DBNull ? null : Convert.ToDateTime(reader["CheckedOutTime"])
                });
            }

            return tools;
        }

        public void ImportToolsFromCsv(string filePath)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var lines = File.ReadAllLines(filePath);
            foreach (var line in lines.Skip(1)) // Skip header row
            {
                var columns = line.Split(',');
                var query = @"
        INSERT INTO Tools (Name, Description, Location, Brand, PartNumber, Supplier, PurchasedDate, Notes, AvailableQuantity, RentedQuantity, IsCheckedOut)
        VALUES (@Name, @Description, @Location, @Brand, @PartNumber, @Supplier, @PurchasedDate, @Notes, @AvailableQuantity, @RentedQuantity, @IsCheckedOut)";
                using var command = new SQLiteCommand(query, connection);
                command.Parameters.AddWithValue("@Name", columns[0]);
                command.Parameters.AddWithValue("@Description", columns[1]);
                command.Parameters.AddWithValue("@Location", columns[2]);
                command.Parameters.AddWithValue("@Brand", columns[3]);
                command.Parameters.AddWithValue("@PartNumber", columns[4]);
                command.Parameters.AddWithValue("@Supplier", columns[5]);
                command.Parameters.AddWithValue("@PurchasedDate", DateTime.Parse(columns[6]));
                command.Parameters.AddWithValue("@Notes", columns[7]);
                command.Parameters.AddWithValue("@AvailableQuantity", int.Parse(columns[8]));
                command.Parameters.AddWithValue("@RentedQuantity", int.Parse(columns[9]));
                command.Parameters.AddWithValue("@IsCheckedOut", int.Parse(columns[10]));
                command.ExecuteNonQuery();
            }
        }

        public void ExportToolsToCsv(string filePath)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT * FROM Tools";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            using var writer = new StreamWriter(filePath);
            writer.WriteLine("Name,Description,Location,Brand,PartNumber,Supplier,PurchasedDate,Notes,AvailableQuantity,RentedQuantity,IsCheckedOut");
            while (reader.Read())
            {
                var line = string.Join(",",
                    reader["Name"],
                    reader["Description"],
                    reader["Location"],
                    reader["Brand"],
                    reader["PartNumber"],
                    reader["Supplier"],
                    reader["PurchasedDate"],
                    reader["Notes"],
                    reader["AvailableQuantity"],
                    reader["RentedQuantity"],
                    reader["IsCheckedOut"]);
                writer.WriteLine(line);
            }
        }

    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Services\UserService.cs
--------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.IO;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Models;

namespace ToolManagementAppV2.Services
{
    public class UserService
    {
        private readonly DatabaseService _dbService;

        public UserService(DatabaseService dbService)
        {
            _dbService = dbService;
        }

        // Retrieve all users from the database
        public List<User> GetAllUsers()
        {
            var users = new List<User>();
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT * FROM Users";
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            while (reader.Read())
            {
                var user = new User
                {
                    UserID = Convert.ToInt32(reader["UserID"]),
                    UserName = reader["UserName"].ToString(),
                    UserPhotoPath = reader["UserPhotoPath"].ToString(),
                    IsAdmin = reader["IsAdmin"].ToString() == "1"
                };

                // Load the bitmap image from the photo path
                if (!string.IsNullOrEmpty(user.UserPhotoPath) && File.Exists(user.UserPhotoPath))
                {
                    user.PhotoBitmap = new BitmapImage(new Uri(user.UserPhotoPath));
                }

                users.Add(user);
            }

            return users;
        }


        // Add a new user to the database
        public void AddUser(User user)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
            INSERT INTO Users (UserName, UserPhotoPath, IsAdmin)
            VALUES (@UserName, @UserPhotoPath, @IsAdmin)";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@UserName", user.UserName);
            command.Parameters.AddWithValue("@UserPhotoPath", user.UserPhotoPath ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@IsAdmin", user.IsAdmin ? 1 : 0); // SQLite uses 1/0 for booleans
            command.ExecuteNonQuery();
        }

        // Update an existing user's information
        public void UpdateUser(User user)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = @"
            UPDATE Users 
            SET UserName = @UserName, UserPhotoPath = @UserPhotoPath, IsAdmin = @IsAdmin
            WHERE UserID = @UserID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@UserID", user.UserID);
            command.Parameters.AddWithValue("@UserName", user.UserName);
            command.Parameters.AddWithValue("@UserPhotoPath", user.UserPhotoPath ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@IsAdmin", user.IsAdmin ? 1 : 0);
            command.ExecuteNonQuery();
        }

        // Delete a user from the database
        public void DeleteUser(int userID)
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "DELETE FROM Users WHERE UserID = @UserID";
            using var command = new SQLiteCommand(query, connection);
            command.Parameters.AddWithValue("@UserID", userID);
            command.ExecuteNonQuery();
        }

        public User GetCurrentUser()
        {
            using var connection = new SQLiteConnection(_dbService.ConnectionString);
            connection.Open();

            var query = "SELECT * FROM Users LIMIT 1"; // Update this query based on your logic
            using var command = new SQLiteCommand(query, connection);
            using var reader = command.ExecuteReader();

            if (reader.Read())
            {
                return new User
                {
                    UserID = Convert.ToInt32(reader["UserID"]),
                    UserName = reader["UserName"].ToString(),
                    UserPhotoPath = reader["UserPhotoPath"].ToString(),
                    IsAdmin = reader["IsAdmin"].ToString() == "1"
                };
            }

            return null; // Return null if no user is found
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\CheckOutStatusConverter.cs
--------------------------------------------------
using System.Globalization;
using System.Windows.Data;

namespace ToolManagementAppV2.Utilities
{
    public class CheckOutStatusConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return (value is bool isCheckedOut) ? (isCheckedOut ? "Check In" : "Check Out") : "Check Out";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\Utilities\PathHelper.cs
--------------------------------------------------
using System;
using System.IO;

namespace ToolManagementAppV2.Utilities
{
    public static class PathHelper
    {
        public static string GetAbsolutePath(string relativePath)
        {
            return Path.Combine(AppDomain.CurrentDomain.BaseDirectory, relativePath);
        }
    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\ViewModels\MainViewModel.cs
--------------------------------------------------
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using ToolManagementAppV2.Models;
using ToolManagementAppV2.Services;

namespace ToolManagementAppV2.ViewModels
{
    public class MainViewModel : ObservableObject
    {
        private readonly ToolService _toolService;
        private readonly UserService _userService;
        private readonly SettingsService _settingsService;

        // Properties for Current User
        private string _currentUserName;
        public string CurrentUserName
        {
            get => _currentUserName;
            set => SetProperty(ref _currentUserName, value);
        }

        private BitmapImage _currentUserPhoto;
        public BitmapImage CurrentUserPhoto
        {
            get => _currentUserPhoto;
            set => SetProperty(ref _currentUserPhoto, value);
        }

        // Observable Collections
        public ObservableCollection<Tool> Tools { get; } = new();
        public ObservableCollection<Tool> SearchResults { get; } = new();
        public ObservableCollection<User> Users { get; } = new();

        // Tool Management
        public string SearchTerm { get; set; }
        public Tool SelectedTool { get; set; }

        // Commands
        public ICommand SearchCommand { get; }
        public ICommand AddToolCommand { get; }
        public ICommand UpdateToolCommand { get; }
        public ICommand DeleteToolCommand { get; }
        public ICommand LoadUsersCommand { get; }

        public MainViewModel(ToolService toolService, UserService userService, SettingsService settingsService)
        {
            _toolService = toolService;
            _userService = userService;
            _settingsService = settingsService;

            // Initialize Commands
            SearchCommand = new RelayCommand(SearchTools);
            AddToolCommand = new RelayCommand(AddTool);
            UpdateToolCommand = new RelayCommand(UpdateTool);
            DeleteToolCommand = new RelayCommand(DeleteTool);
            LoadUsersCommand = new RelayCommand(LoadUsers);

            // Load Initial Data
            LoadTools();
            LoadUsers();
            LoadCurrentUser();
        }

        private void LoadTools()
        {
            Tools.Clear();
            foreach (var tool in _toolService.GetAllTools())
                Tools.Add(tool);
        }

        private void SearchTools()
        {
            SearchResults.Clear();
            foreach (var tool in _toolService.SearchTools(SearchTerm))
                SearchResults.Add(tool);
        }

        private void AddTool()
        {
            var newTool = new Tool { ToolID = "NewID", Description = "New Description" }; // Replace with actual input
            _toolService.AddTool(newTool);
            LoadTools();
        }

        private void UpdateTool()
        {
            if (SelectedTool != null)
            {
                _toolService.UpdateTool(SelectedTool);
                LoadTools();
            }
        }

        private void DeleteTool()
        {
            if (SelectedTool != null)
            {
                _toolService.DeleteTool(SelectedTool.ToolID);
                LoadTools();
            }
        }

        private void LoadUsers()
        {
            Users.Clear();
            foreach (var user in _userService.GetAllUsers())
                Users.Add(user);
        }

        private void LoadCurrentUser()
        {
            var currentUser = _userService.GetCurrentUser();

            if (currentUser != null)
            {
                CurrentUserName = currentUser.UserName;
                CurrentUserPhoto = LoadPhotoBitmap(currentUser.UserPhotoPath);
            }
            else
            {
                CurrentUserName = "Guest";
                CurrentUserPhoto = LoadPhotoBitmap(null); // Default avatar
            }
        }

        private BitmapImage LoadPhotoBitmap(string photoPath)
        {
            if (string.IsNullOrEmpty(photoPath) || !System.IO.File.Exists(photoPath))
            {
                // Use a relative path to load the default photo from the app directory
                var defaultPhotoPath = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "DefaultUserPhoto.png");
                if (System.IO.File.Exists(defaultPhotoPath))
                {
                    return new BitmapImage(new Uri(defaultPhotoPath, UriKind.Absolute))
                    {
                        CacheOption = BitmapCacheOption.OnLoad
                    };
                }
                else
                {
                    MessageBox.Show("DefaultUserPhoto.png not found in the application directory.", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return null; // Handle gracefully if the default image is missing
                }
            }

            return new BitmapImage(new Uri(photoPath, UriKind.Absolute))
            {
                CacheOption = BitmapCacheOption.OnLoad
            };
        }


    }
}


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
--------------------------------------------------
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\App.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9B0601BE7ADAEB66E0E4EECDDAB2A72E8957A1F9"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            
            #line 5 "..\..\..\App.xaml"
            this.StartupUri = new System.Uri("MainWindow.xaml", System.UriKind.Relative);
            
            #line default
            #line hidden
        }
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public static void Main() {
            ToolManagementAppV2.App app = new ToolManagementAppV2.App();
            app.InitializeComponent();
            app.Run();
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\App.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9B0601BE7ADAEB66E0E4EECDDAB2A72E8957A1F9"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            
            #line 5 "..\..\..\App.xaml"
            this.StartupUri = new System.Uri("MainWindow.xaml", System.UriKind.Relative);
            
            #line default
            #line hidden
        }
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public static void Main() {
            ToolManagementAppV2.App app = new ToolManagementAppV2.App();
            app.InitializeComponent();
            app.Run();
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\GeneratedInternalTypeHelper.g.cs
--------------------------------------------------




File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\GeneratedInternalTypeHelper.g.i.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XamlGeneratedNamespace {
    
    
    /// <summary>
    /// GeneratedInternalTypeHelper
    /// </summary>
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public sealed class GeneratedInternalTypeHelper : System.Windows.Markup.InternalTypeHelper {
        
        /// <summary>
        /// CreateInstance
        /// </summary>
        protected override object CreateInstance(System.Type type, System.Globalization.CultureInfo culture) {
            return System.Activator.CreateInstance(type, ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic) 
                            | (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.CreateInstance)), null, null, culture);
        }
        
        /// <summary>
        /// GetPropertyValue
        /// </summary>
        protected override object GetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, System.Globalization.CultureInfo culture) {
            return propertyInfo.GetValue(target, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// SetPropertyValue
        /// </summary>
        protected override void SetPropertyValue(System.Reflection.PropertyInfo propertyInfo, object target, object value, System.Globalization.CultureInfo culture) {
            propertyInfo.SetValue(target, value, System.Reflection.BindingFlags.Default, null, null, culture);
        }
        
        /// <summary>
        /// CreateDelegate
        /// </summary>
        protected override System.Delegate CreateDelegate(System.Type delegateType, object target, string handler) {
            return ((System.Delegate)(target.GetType().InvokeMember("_CreateDelegate", (System.Reflection.BindingFlags.InvokeMethod 
                            | (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)), null, target, new object[] {
                        delegateType,
                        handler}, null)));
        }
        
        /// <summary>
        /// AddEventHandler
        /// </summary>
        protected override void AddEventHandler(System.Reflection.EventInfo eventInfo, object target, System.Delegate handler) {
            eventInfo.AddEventHandler(target, handler);
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\MainWindow.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6E482D2AB37F5C12CD7EBE7F8D892D2F9E0E7980"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2.Utilities;
using Xceed.Wpf.Toolkit;
using Xceed.Wpf.Toolkit.Chromes;
using Xceed.Wpf.Toolkit.Converters;
using Xceed.Wpf.Toolkit.Core;
using Xceed.Wpf.Toolkit.Core.Converters;
using Xceed.Wpf.Toolkit.Core.Input;
using Xceed.Wpf.Toolkit.Core.Media;
using Xceed.Wpf.Toolkit.Core.Utilities;
using Xceed.Wpf.Toolkit.Mag.Converters;
using Xceed.Wpf.Toolkit.Panels;
using Xceed.Wpf.Toolkit.Primitives;
using Xceed.Wpf.Toolkit.PropertyGrid;
using Xceed.Wpf.Toolkit.PropertyGrid.Attributes;
using Xceed.Wpf.Toolkit.PropertyGrid.Commands;
using Xceed.Wpf.Toolkit.PropertyGrid.Converters;
using Xceed.Wpf.Toolkit.PropertyGrid.Editors;
using Xceed.Wpf.Toolkit.Zoombox;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 25 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image HeaderIcon;
        
        #line default
        #line hidden
        
        
        #line 53 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabControl MyTabControl;
        
        #line default
        #line hidden
        
        
        #line 62 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SearchInput;
        
        #line default
        #line hidden
        
        
        #line 67 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView SearchResultsList;
        
        #line default
        #line hidden
        
        
        #line 94 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CheckedOutToolsList;
        
        #line default
        #line hidden
        
        
        #line 126 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolIDInput;
        
        #line default
        #line hidden
        
        
        #line 127 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PartNumberInput;
        
        #line default
        #line hidden
        
        
        #line 128 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolNameInput;
        
        #line default
        #line hidden
        
        
        #line 129 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox BrandInput;
        
        #line default
        #line hidden
        
        
        #line 130 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox LocationInput;
        
        #line default
        #line hidden
        
        
        #line 131 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox QuantityInput;
        
        #line default
        #line hidden
        
        
        #line 132 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SupplierInput;
        
        #line default
        #line hidden
        
        
        #line 133 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PurchasedInput;
        
        #line default
        #line hidden
        
        
        #line 134 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox NotesInput;
        
        #line default
        #line hidden
        
        
        #line 146 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ToolsList;
        
        #line default
        #line hidden
        
        
        #line 179 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerNameInput;
        
        #line default
        #line hidden
        
        
        #line 180 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerEmailInput;
        
        #line default
        #line hidden
        
        
        #line 181 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerContactInput;
        
        #line default
        #line hidden
        
        
        #line 182 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerPhoneInput;
        
        #line default
        #line hidden
        
        
        #line 183 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerAddressInput;
        
        #line default
        #line hidden
        
        
        #line 191 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CustomerList;
        
        #line default
        #line hidden
        
        
        #line 213 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 214 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 215 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox DueDateInput;
        
        #line default
        #line hidden
        
        
        #line 219 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView RentalsList;
        
        #line default
        #line hidden
        
        
        #line 243 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox UserNameInput;
        
        #line default
        #line hidden
        
        
        #line 244 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.CheckBox IsAdminCheckbox;
        
        #line default
        #line hidden
        
        
        #line 253 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView UserList;
        
        #line default
        #line hidden
        
        
        #line 280 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox RentalDurationInput;
        
        #line default
        #line hidden
        
        
        #line 285 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image LogoPreview;
        
        #line default
        #line hidden
        
        
        #line 299 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock SelectedCsvFile;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 2:
            this.HeaderIcon = ((System.Windows.Controls.Image)(target));
            return;
            case 3:
            
            #line 37 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LogoutButton_Click);
            
            #line default
            #line hidden
            return;
            case 4:
            this.MyTabControl = ((System.Windows.Controls.TabControl)(target));
            return;
            case 5:
            this.SearchInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            
            #line 62 "..\..\..\MainWindow.xaml"
            this.SearchInput.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.SearchInput_TextChanged);
            
            #line default
            #line hidden
            return;
            case 6:
            
            #line 64 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintSearchResults_Click);
            
            #line default
            #line hidden
            return;
            case 7:
            
            #line 65 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintMyCheckedOutTools_Click);
            
            #line default
            #line hidden
            return;
            case 8:
            this.SearchResultsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 9:
            
            #line 93 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChooseUserProfilePicButton_Click);
            
            #line default
            #line hidden
            return;
            case 10:
            this.CheckedOutToolsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 12:
            this.ToolIDInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 13:
            this.PartNumberInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 14:
            this.ToolNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 15:
            this.BrandInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 16:
            this.LocationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 17:
            this.QuantityInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 18:
            this.SupplierInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 19:
            this.PurchasedInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 20:
            this.NotesInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 21:
            
            #line 137 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddButton_Click);
            
            #line default
            #line hidden
            return;
            case 22:
            
            #line 138 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateButton_Click);
            
            #line default
            #line hidden
            return;
            case 23:
            
            #line 139 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);
            
            #line default
            #line hidden
            return;
            case 24:
            
            #line 140 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeToolImage_Click);
            
            #line default
            #line hidden
            return;
            case 25:
            this.ToolsList = ((System.Windows.Controls.ListView)(target));
            
            #line 146 "..\..\..\MainWindow.xaml"
            this.ToolsList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ToolsList_SelectionChanged);
            
            #line default
            #line hidden
            return;
            case 26:
            this.CustomerNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 27:
            this.CustomerEmailInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 28:
            this.CustomerContactInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 29:
            this.CustomerPhoneInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 30:
            this.CustomerAddressInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 31:
            
            #line 185 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 32:
            
            #line 186 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 33:
            
            #line 187 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 34:
            this.CustomerList = ((System.Windows.Controls.ListView)(target));
            return;
            case 35:
            this.ToolIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 36:
            this.CustomerIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 37:
            this.DueDateInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 38:
            
            #line 216 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RentToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 39:
            
            #line 217 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ReturnToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 40:
            this.RentalsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 41:
            this.UserNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 42:
            this.IsAdminCheckbox = ((System.Windows.Controls.CheckBox)(target));
            return;
            case 43:
            
            #line 245 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadUserPhotoButton_Click);
            
            #line default
            #line hidden
            return;
            case 44:
            
            #line 247 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 45:
            
            #line 248 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 46:
            
            #line 249 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 47:
            this.UserList = ((System.Windows.Controls.ListView)(target));
            return;
            case 48:
            this.RentalDurationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 49:
            this.LogoPreview = ((System.Windows.Controls.Image)(target));
            return;
            case 50:
            
            #line 286 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadLogoButton_Click);
            
            #line default
            #line hidden
            return;
            case 51:
            
            #line 289 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SaveSettingsButton_Click);
            
            #line default
            #line hidden
            return;
            case 52:
            
            #line 298 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SelectCsvFileButton_Click);
            
            #line default
            #line hidden
            return;
            case 53:
            this.SelectedCsvFile = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 54:
            
            #line 300 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportCsvButton_Click);
            
            #line default
            #line hidden
            return;
            case 55:
            
            #line 302 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ExportCsvButton_Click);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            
            #line 17 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            case 11:
            
            #line 100 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\MainWindow.g.i.cs
--------------------------------------------------
#pragma checksum "..\..\..\MainWindow.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6E482D2AB37F5C12CD7EBE7F8D892D2F9E0E7980"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2.Utilities;
using Xceed.Wpf.Toolkit;
using Xceed.Wpf.Toolkit.Chromes;
using Xceed.Wpf.Toolkit.Converters;
using Xceed.Wpf.Toolkit.Core;
using Xceed.Wpf.Toolkit.Core.Converters;
using Xceed.Wpf.Toolkit.Core.Input;
using Xceed.Wpf.Toolkit.Core.Media;
using Xceed.Wpf.Toolkit.Core.Utilities;
using Xceed.Wpf.Toolkit.Mag.Converters;
using Xceed.Wpf.Toolkit.Panels;
using Xceed.Wpf.Toolkit.Primitives;
using Xceed.Wpf.Toolkit.PropertyGrid;
using Xceed.Wpf.Toolkit.PropertyGrid.Attributes;
using Xceed.Wpf.Toolkit.PropertyGrid.Commands;
using Xceed.Wpf.Toolkit.PropertyGrid.Converters;
using Xceed.Wpf.Toolkit.PropertyGrid.Editors;
using Xceed.Wpf.Toolkit.Zoombox;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// MainWindow
    /// </summary>
    public partial class MainWindow : System.Windows.Window, System.Windows.Markup.IComponentConnector, System.Windows.Markup.IStyleConnector {
        
        
        #line 25 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image HeaderIcon;
        
        #line default
        #line hidden
        
        
        #line 53 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TabControl MyTabControl;
        
        #line default
        #line hidden
        
        
        #line 62 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SearchInput;
        
        #line default
        #line hidden
        
        
        #line 67 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView SearchResultsList;
        
        #line default
        #line hidden
        
        
        #line 94 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CheckedOutToolsList;
        
        #line default
        #line hidden
        
        
        #line 126 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolIDInput;
        
        #line default
        #line hidden
        
        
        #line 127 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PartNumberInput;
        
        #line default
        #line hidden
        
        
        #line 128 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolNameInput;
        
        #line default
        #line hidden
        
        
        #line 129 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox BrandInput;
        
        #line default
        #line hidden
        
        
        #line 130 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox LocationInput;
        
        #line default
        #line hidden
        
        
        #line 131 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox QuantityInput;
        
        #line default
        #line hidden
        
        
        #line 132 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox SupplierInput;
        
        #line default
        #line hidden
        
        
        #line 133 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox PurchasedInput;
        
        #line default
        #line hidden
        
        
        #line 134 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox NotesInput;
        
        #line default
        #line hidden
        
        
        #line 146 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView ToolsList;
        
        #line default
        #line hidden
        
        
        #line 179 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerNameInput;
        
        #line default
        #line hidden
        
        
        #line 180 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerEmailInput;
        
        #line default
        #line hidden
        
        
        #line 181 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerContactInput;
        
        #line default
        #line hidden
        
        
        #line 182 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerPhoneInput;
        
        #line default
        #line hidden
        
        
        #line 183 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerAddressInput;
        
        #line default
        #line hidden
        
        
        #line 191 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView CustomerList;
        
        #line default
        #line hidden
        
        
        #line 213 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox ToolIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 214 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox CustomerIDForRentalInput;
        
        #line default
        #line hidden
        
        
        #line 215 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox DueDateInput;
        
        #line default
        #line hidden
        
        
        #line 219 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView RentalsList;
        
        #line default
        #line hidden
        
        
        #line 243 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox UserNameInput;
        
        #line default
        #line hidden
        
        
        #line 244 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.CheckBox IsAdminCheckbox;
        
        #line default
        #line hidden
        
        
        #line 253 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.ListView UserList;
        
        #line default
        #line hidden
        
        
        #line 280 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal Xceed.Wpf.Toolkit.WatermarkTextBox RentalDurationInput;
        
        #line default
        #line hidden
        
        
        #line 285 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.Image LogoPreview;
        
        #line default
        #line hidden
        
        
        #line 299 "..\..\..\MainWindow.xaml"
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")]
        internal System.Windows.Controls.TextBlock SelectedCsvFile;
        
        #line default
        #line hidden
        
        private bool _contentLoaded;
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            if (_contentLoaded) {
                return;
            }
            _contentLoaded = true;
            System.Uri resourceLocater = new System.Uri("/ToolManagementAppV2;component/mainwindow.xaml", System.UriKind.Relative);
            
            #line 1 "..\..\..\MainWindow.xaml"
            System.Windows.Application.LoadComponent(this, resourceLocater);
            
            #line default
            #line hidden
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 2:
            this.HeaderIcon = ((System.Windows.Controls.Image)(target));
            return;
            case 3:
            
            #line 37 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.LogoutButton_Click);
            
            #line default
            #line hidden
            return;
            case 4:
            this.MyTabControl = ((System.Windows.Controls.TabControl)(target));
            return;
            case 5:
            this.SearchInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            
            #line 62 "..\..\..\MainWindow.xaml"
            this.SearchInput.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.SearchInput_TextChanged);
            
            #line default
            #line hidden
            return;
            case 6:
            
            #line 64 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintSearchResults_Click);
            
            #line default
            #line hidden
            return;
            case 7:
            
            #line 65 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.PrintMyCheckedOutTools_Click);
            
            #line default
            #line hidden
            return;
            case 8:
            this.SearchResultsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 9:
            
            #line 93 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChooseUserProfilePicButton_Click);
            
            #line default
            #line hidden
            return;
            case 10:
            this.CheckedOutToolsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 12:
            this.ToolIDInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 13:
            this.PartNumberInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 14:
            this.ToolNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 15:
            this.BrandInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 16:
            this.LocationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 17:
            this.QuantityInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 18:
            this.SupplierInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 19:
            this.PurchasedInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 20:
            this.NotesInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 21:
            
            #line 137 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddButton_Click);
            
            #line default
            #line hidden
            return;
            case 22:
            
            #line 138 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateButton_Click);
            
            #line default
            #line hidden
            return;
            case 23:
            
            #line 139 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteButton_Click);
            
            #line default
            #line hidden
            return;
            case 24:
            
            #line 140 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ChangeToolImage_Click);
            
            #line default
            #line hidden
            return;
            case 25:
            this.ToolsList = ((System.Windows.Controls.ListView)(target));
            
            #line 146 "..\..\..\MainWindow.xaml"
            this.ToolsList.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.ToolsList_SelectionChanged);
            
            #line default
            #line hidden
            return;
            case 26:
            this.CustomerNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 27:
            this.CustomerEmailInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 28:
            this.CustomerContactInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 29:
            this.CustomerPhoneInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 30:
            this.CustomerAddressInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 31:
            
            #line 185 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 32:
            
            #line 186 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 33:
            
            #line 187 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteCustomerButton_Click);
            
            #line default
            #line hidden
            return;
            case 34:
            this.CustomerList = ((System.Windows.Controls.ListView)(target));
            return;
            case 35:
            this.ToolIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 36:
            this.CustomerIDForRentalInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 37:
            this.DueDateInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 38:
            
            #line 216 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.RentToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 39:
            
            #line 217 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ReturnToolButton_Click);
            
            #line default
            #line hidden
            return;
            case 40:
            this.RentalsList = ((System.Windows.Controls.ListView)(target));
            return;
            case 41:
            this.UserNameInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 42:
            this.IsAdminCheckbox = ((System.Windows.Controls.CheckBox)(target));
            return;
            case 43:
            
            #line 245 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadUserPhotoButton_Click);
            
            #line default
            #line hidden
            return;
            case 44:
            
            #line 247 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.AddUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 45:
            
            #line 248 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UpdateUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 46:
            
            #line 249 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteUserButton_Click);
            
            #line default
            #line hidden
            return;
            case 47:
            this.UserList = ((System.Windows.Controls.ListView)(target));
            return;
            case 48:
            this.RentalDurationInput = ((Xceed.Wpf.Toolkit.WatermarkTextBox)(target));
            return;
            case 49:
            this.LogoPreview = ((System.Windows.Controls.Image)(target));
            return;
            case 50:
            
            #line 286 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.UploadLogoButton_Click);
            
            #line default
            #line hidden
            return;
            case 51:
            
            #line 289 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SaveSettingsButton_Click);
            
            #line default
            #line hidden
            return;
            case 52:
            
            #line 298 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.SelectCsvFileButton_Click);
            
            #line default
            #line hidden
            return;
            case 53:
            this.SelectedCsvFile = ((System.Windows.Controls.TextBlock)(target));
            return;
            case 54:
            
            #line 300 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ImportCsvButton_Click);
            
            #line default
            #line hidden
            return;
            case 55:
            
            #line 302 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.ExportCsvButton_Click);
            
            #line default
            #line hidden
            return;
            }
            this._contentLoaded = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1033:InterfaceMethodsShouldBeCallableByChildTypes")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target) {
            switch (connectionId)
            {
            case 1:
            
            #line 17 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            case 11:
            
            #line 100 "..\..\..\MainWindow.xaml"
            ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckOutButton_Click);
            
            #line default
            #line hidden
            break;
            }
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+6bac120e4e324e34347da85de17cefeef9b5524f")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_m3sljtjb_wpftmp.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+6bac120e4e324e34347da85de17cefeef9b5524f")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Debug\net8.0-windows\ToolManagementAppV2_m3sljtjb_wpftmp.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Release\net8.0-windows\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
--------------------------------------------------
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Release\net8.0-windows\App.g.cs
--------------------------------------------------
#pragma checksum "..\..\..\App.xaml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9B0601BE7ADAEB66E0E4EECDDAB2A72E8957A1F9"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Automation;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Controls.Ribbon;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Effects;
using System.Windows.Media.Imaging;
using System.Windows.Media.Media3D;
using System.Windows.Media.TextFormatting;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Shell;
using ToolManagementAppV2;


namespace ToolManagementAppV2 {
    
    
    /// <summary>
    /// App
    /// </summary>
    public partial class App : System.Windows.Application {
        
        /// <summary>
        /// InitializeComponent
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public void InitializeComponent() {
            
            #line 5 "..\..\..\App.xaml"
            this.StartupUri = new System.Uri("MainWindow.xaml", System.UriKind.Relative);
            
            #line default
            #line hidden
        }
        
        /// <summary>
        /// Application Entry Point.
        /// </summary>
        [System.STAThreadAttribute()]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("PresentationBuildTasks", "9.0.0.0")]
        public static void Main() {
            ToolManagementAppV2.App app = new ToolManagementAppV2.App();
            app.InitializeComponent();
            app.Run();
        }
    }
}



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Release\net8.0-windows\ToolManagementAppV2.AssemblyInfo.cs
--------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+6bac120e4e324e34347da85de17cefeef9b5524f")]
[assembly: System.Reflection.AssemblyProductAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyTitleAttribute("ToolManagementAppV2")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: System.Runtime.Versioning.TargetPlatformAttribute("Windows7.0")]
[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute("Windows7.0")]

// Generated by the MSBuild WriteCodeFragment class.



File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\obj\Release\net8.0-windows\ToolManagementAppV2.GlobalUsings.g.cs
--------------------------------------------------
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.Linq;
global using global::System.Threading;
global using global::System.Threading.Tasks;


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\App.xaml
--------------------------------------------------
<Application x:Class="ToolManagementAppV2.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ToolManagementAppV2"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>


File: C:\Users\GarettDaly\source\repos\BaccioOFDeath\ToolManagementAppV2\ToolManagementAppV2\MainWindow.xaml
--------------------------------------------------
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:local="clr-namespace:ToolManagementAppV2.Utilities"
        x:Class="ToolManagementAppV2.MainWindow"
        Title="Tool Inventory Management"
        Height="650"
        Width="1600"
        WindowStartupLocation="CenterScreen">

    <DockPanel Margin="10">
        <!-- Resource Dictionary for Converters and DataTemplates -->
        <DockPanel.Resources>
            <local:CheckOutStatusConverter x:Key="CheckOutStatusConverter"/>
            <DataTemplate x:Key="CheckOutButtonTemplate">
                <Button Content="{Binding IsCheckedOut, Converter={StaticResource CheckOutStatusConverter}}"
                        Click="CheckOutButton_Click"
                        CommandParameter="{Binding ToolID}" />
            </DataTemplate>
        </DockPanel.Resources>

        <!-- Header with Logo and Title -->
        <Border DockPanel.Dock="Top" Background="#DDD" Padding="10">
            <DockPanel>
                <Image x:Name="HeaderIcon" Source="{Binding CurrentUserPhoto}" Width="50" Height="50" />
                <!-- App Title -->
                <TextBlock Text="Tool Inventory Management" FontWeight="Bold" FontSize="20" Margin="10" VerticalAlignment="Center" />

                <!-- Current User Section -->
                <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" HorizontalAlignment="Right" Margin="5">
                    <!-- User Photo -->
                    <Image Source="{Binding CurrentUserPhoto}" Width="50" Height="50" Margin="0,0,10,0" />

                    <!-- User Info -->
                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="{Binding CurrentUserName}" FontWeight="Bold" Margin="0,0,0,5" />
                        <Button Content="Logout" Click="LogoutButton_Click" Width="80" />
                    </StackPanel>
                </StackPanel>
            </DockPanel>
        </Border>



        <!-- Main Content Area -->
        <Grid DockPanel.Dock="Top">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <!-- Tab Control -->
            <TabControl x:Name="MyTabControl" Margin="5" Grid.Row="0">
                <!-- Search Tools Tab -->
                <TabItem Header="Search Tools">
                    <Grid Margin="5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="150" />
                        </Grid.RowDefinitions>
                        <xctk:WatermarkTextBox x:Name="SearchInput" Width="300" Margin="10,0" Watermark="Search Tools..." TextChanged="SearchInput_TextChanged" />
                        <StackPanel Orientation="Horizontal">
                            <Button Content="Print Search Results" Click="PrintSearchResults_Click" Height="20" Width="160" Margin="10,0" />
                            <Button Content="Print My Checked-Out Tools" Click="PrintMyCheckedOutTools_Click" Height="20" Width="160" Margin="10,0" />
                        </StackPanel>
                        <ListView x:Name="SearchResultsList" ItemsSource="{Binding SearchResults}" Margin="10" Grid.Row="1" ScrollViewer.VerticalScrollBarVisibility="Auto">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Action" Width="80">
                                        <GridViewColumn.CellTemplate>
                                            <StaticResource ResourceKey="CheckOutButtonTemplate" />
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="ID" DisplayMemberBinding="{Binding ToolID}" Width="60" />
                                    <GridViewColumn Header="Location" DisplayMemberBinding="{Binding Location}" Width="70" />
                                    <GridViewColumn Header="Part Number" DisplayMemberBinding="{Binding PartNumber}" Width="100" />
                                    <GridViewColumn Header="Brand" DisplayMemberBinding="{Binding Brand}" Width="100" />
                                    <GridViewColumn Header="Description" DisplayMemberBinding="{Binding Description}" Width="380" />
                                    <GridViewColumn Header="On Hand" DisplayMemberBinding="{Binding OnHand}" Width="60" />
                                    <GridViewColumn Header="Supplier" DisplayMemberBinding="{Binding Supplier}" Width="100" />
                                    <GridViewColumn Header="Purchased" DisplayMemberBinding="{Binding Purchased}" Width="80" />
                                    <GridViewColumn Header="Notes">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Notes}" TextWrapping="Wrap" Width="800" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                        <Button Content="Choose Profile Picture" Click="ChooseUserProfilePicButton_Click" Width="150" Height="20" HorizontalAlignment="Right" VerticalAlignment="Top" Grid.RowSpan="2" />
                        <ListView x:Name="CheckedOutToolsList" ItemsSource="{Binding CheckedOutTools}" Margin="10" Grid.Row="2">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Action" Width="80">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Button Content="{Binding IsCheckedOut, Converter={StaticResource CheckOutStatusConverter}}" Click="CheckOutButton_Click" CommandParameter="{Binding ToolID}" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Header="Tool ID" DisplayMemberBinding="{Binding ToolID}" Width="60" />
                                    <GridViewColumn Header="Description" DisplayMemberBinding="{Binding Description}" Width="380" />
                                    <GridViewColumn Header="Checked Out By" DisplayMemberBinding="{Binding CheckedOutByName}" Width="150" />
                                    <GridViewColumn Header="Checked Out Time" DisplayMemberBinding="{Binding CheckedOutTime, StringFormat='{}{0:G}'}" Width="150" />
                                    <GridViewColumn Header="Location" DisplayMemberBinding="{Binding Location}" Width="100" />
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>

                <!-- Tool Management Tab -->
                <TabItem Header="Tool Management">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="350" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <!-- Tool Details Input Section -->
                        <GroupBox Grid.Column="0" Header="Tool Details" Margin="5">
                            <StackPanel>
                                <xctk:WatermarkTextBox x:Name="ToolIDInput" Watermark="Tool ID (Required)" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="PartNumberInput" Watermark="Part Number" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="ToolNameInput" Watermark="Tool Name" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="BrandInput" Watermark="Brand" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="LocationInput" Watermark="Location" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="QuantityInput" Watermark="Quantity on Hand" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="SupplierInput" Watermark="Supplier" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="PurchasedInput" Watermark="Purchased Date (yyyy-MM-dd)" Margin="0,5" />
                                <xctk:WatermarkTextBox x:Name="NotesInput" Watermark="Notes" TextWrapping="Wrap" Margin="0,5" Height="60" AcceptsReturn="True" />

                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <Button Content="Add" Click="AddButton_Click" Margin="5" />
                                    <Button Content="Update" Click="UpdateButton_Click" Margin="5" />
                                    <Button Content="Delete" Click="DeleteButton_Click" Margin="5" />
                                    <Button Content="Add/Change Tool Image" Click="ChangeToolImage_Click" Margin="5" />
                                </StackPanel>
                            </StackPanel>
                        </GroupBox>

                        <!-- Tools List -->
                        <ListView x:Name="ToolsList" Grid.Column="1" ItemsSource="{Binding Tools}" SelectionChanged="ToolsList_SelectionChanged" Margin="5">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="ID" DisplayMemberBinding="{Binding ToolID}" Width="60" />
                                    <GridViewColumn Header="Part Number" DisplayMemberBinding="{Binding PartNumber}" Width="100" />
                                    <GridViewColumn Header="Brand" DisplayMemberBinding="{Binding Brand}" Width="100" />
                                    <GridViewColumn Header="Location" DisplayMemberBinding="{Binding Location}" Width="100" />
                                    <GridViewColumn Header="Quantity" DisplayMemberBinding="{Binding QuantityOnHand}" Width="80" />
                                    <GridViewColumn Header="Supplier" DisplayMemberBinding="{Binding Supplier}" Width="100" />
                                    <GridViewColumn Header="Purchased" DisplayMemberBinding="{Binding PurchasedDate}" Width="120" />
                                    <GridViewColumn Header="Notes">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Notes}" TextWrapping="Wrap" Width="400" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>


                <!-- Customers Management Tab -->
                <TabItem Header="Customers">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="350" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <GroupBox Header="Customer Details" Grid.Column="0" Margin="5">
                            <StackPanel>
                                <xctk:WatermarkTextBox x:Name="CustomerNameInput" Watermark="Name" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerEmailInput" Watermark="Email" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerContactInput" Watermark="Customer Contact" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerPhoneInput" Watermark="Phone" Margin="5" />
                                <xctk:WatermarkTextBox x:Name="CustomerAddressInput" Watermark="Address" Margin="5" />
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <Button Content="Add" Click="AddCustomerButton_Click" Margin="5" />
                                    <Button Content="Update" Click="UpdateCustomerButton_Click" Margin="5" />
                                    <Button Content="Delete" Click="DeleteCustomerButton_Click" Margin="5" />
                                </StackPanel>
                            </StackPanel>
                        </GroupBox>
                        <ListView x:Name="CustomerList" Grid.Column="1" ItemsSource="{Binding Customers}" Margin="5">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding Name}" Width="150" />
                                    <GridViewColumn Header="Email" DisplayMemberBinding="{Binding Email}" Width="200" />
                                    <GridViewColumn Header="Contact" DisplayMemberBinding="{Binding Contact}" Width="200" />
                                    <GridViewColumn Header="Phone" DisplayMemberBinding="{Binding Phone}" Width="120" />
                                    <GridViewColumn Header="Address" DisplayMemberBinding="{Binding Address}" Width="250" />
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>

                <!-- Rentals Management Tab -->
                <TabItem Header="Rentals">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <StackPanel Orientation="Horizontal" Margin="10">
                            <xctk:WatermarkTextBox x:Name="ToolIDForRentalInput" Watermark="Tool ID" Margin="5" Width="200" />
                            <xctk:WatermarkTextBox x:Name="CustomerIDForRentalInput" Watermark="Customer ID" Margin="5" Width="200" />
                            <xctk:WatermarkTextBox x:Name="DueDateInput" Watermark="Due Date (YYYY-MM-DD)" Margin="5" Width="200" />
                            <Button Content="Rent Tool" Click="RentToolButton_Click" Margin="5" />
                            <Button Content="Return Tool" Click="ReturnToolButton_Click" Margin="5" />
                        </StackPanel>
                        <ListView x:Name="RentalsList" ItemsSource="{Binding Rentals}" Grid.Row="1" Margin="10">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Rental ID" DisplayMemberBinding="{Binding RentalID}" Width="100" />
                                    <GridViewColumn Header="Tool ID" DisplayMemberBinding="{Binding ToolID}" Width="100" />
                                    <GridViewColumn Header="Customer ID" DisplayMemberBinding="{Binding CustomerID}" Width="100" />
                                    <GridViewColumn Header="Rental Date" DisplayMemberBinding="{Binding RentalDate, StringFormat='{}{0:yyyy-MM-dd}'}" Width="150" />
                                    <GridViewColumn Header="Due Date" DisplayMemberBinding="{Binding DueDate, StringFormat='{}{0:yyyy-MM-dd}'}" Width="150" />
                                    <GridViewColumn Header="Return Date" DisplayMemberBinding="{Binding ReturnDate, StringFormat='{}{0:yyyy-MM-dd}'}" Width="150" />
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>

                <!-- New Users Management Tab -->
                <TabItem Header="Users">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="350" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <GroupBox Header="User Details" Grid.Column="0" Margin="5">
                            <StackPanel>
                                <xctk:WatermarkTextBox x:Name="UserNameInput" Watermark="User Name" Margin="5" />
                                <CheckBox x:Name="IsAdminCheckbox" Content="Is Admin" Margin="5" />
                                <Button Content="Upload Photo" Click="UploadUserPhotoButton_Click" Margin="5" />
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <Button Content="Add" Click="AddUserButton_Click" Margin="5" />
                                    <Button Content="Update" Click="UpdateUserButton_Click" Margin="5" />
                                    <Button Content="Delete" Click="DeleteUserButton_Click" Margin="5" />
                                </StackPanel>
                            </StackPanel>
                        </GroupBox>
                        <ListView x:Name="UserList" Grid.Column="1" ItemsSource="{Binding Users}" Margin="5">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Name" DisplayMemberBinding="{Binding UserName}" Width="150" />
                                    <GridViewColumn Header="Is Admin" DisplayMemberBinding="{Binding IsAdmin}" Width="100" />
                                    <GridViewColumn Header="Photo">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Image Source="{Binding PhotoBitmap}" Width="50" Height="50" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </Grid>
                </TabItem>


                <!-- New Settings Tab -->
                <TabItem Header="Settings">
                    <StackPanel Orientation="Vertical" Margin="10">
                        <TextBlock Text="Application Settings" FontWeight="Bold" FontSize="16" Margin="5" />

                        <!-- Rental Duration Setting -->
                        <StackPanel Orientation="Horizontal" Margin="5">
                            <TextBlock Text="Default Rental Duration (days):" VerticalAlignment="Center" Width="200" />
                            <xctk:WatermarkTextBox x:Name="RentalDurationInput" Watermark="7" Width="100" Margin="5" />
                        </StackPanel>

                        <!-- Logo Upload Section -->
                        <TextBlock Text="Company Logo:" FontWeight="Bold" Margin="5" />
                        <Image x:Name="LogoPreview" Width="150" Height="150" Margin="5" Stretch="Uniform" HorizontalAlignment="Left"/>
                        <Button Content="Upload Logo" Click="UploadLogoButton_Click" Margin="5" HorizontalAlignment="Left" />

                        <!-- Save Settings -->
                        <Button Content="Save Settings" Click="SaveSettingsButton_Click" Margin="5" HorizontalAlignment="Left" />
                    </StackPanel>
                </TabItem>


                <!-- New Import/Export Tab -->
                <TabItem Header="Import/Export">
                    <StackPanel Margin="10">
                        <TextBlock Text="Import Tools" FontWeight="Bold" FontSize="16" Margin="5" />
                        <Button Content="Select CSV File" Click="SelectCsvFileButton_Click" Margin="5" />
                        <TextBlock x:Name="SelectedCsvFile" Text="No file selected" Margin="5" />
                        <Button Content="Import" Click="ImportCsvButton_Click" Margin="5" />
                        <TextBlock Text="Export Tools" FontWeight="Bold" FontSize="16" Margin="5" />
                        <Button Content="Export to CSV" Click="ExportCsvButton_Click" Margin="5" />
                    </StackPanel>
                </TabItem>
            </TabControl>

            <!-- Status Bar -->
            <StatusBar Grid.Row="1" Height="25" Background="LightGray">
                <StatusBarItem Content="Ready" />
            </StatusBar>
        </Grid>
    </DockPanel>
</Window>



